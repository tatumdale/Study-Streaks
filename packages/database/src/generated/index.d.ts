
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model School
 * 
 */
export type School = $Result.DefaultSelection<Prisma.$SchoolPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Parent
 * 
 */
export type Parent = $Result.DefaultSelection<Prisma.$ParentPayload>
/**
 * Model SchoolAdmin
 * 
 */
export type SchoolAdmin = $Result.DefaultSelection<Prisma.$SchoolAdminPayload>
/**
 * Model ParentStudent
 * 
 */
export type ParentStudent = $Result.DefaultSelection<Prisma.$ParentStudentPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model TeacherClass
 * 
 */
export type TeacherClass = $Result.DefaultSelection<Prisma.$TeacherClassPayload>
/**
 * Model Club
 * 
 */
export type Club = $Result.DefaultSelection<Prisma.$ClubPayload>
/**
 * Model HomeworkCompletion
 * 
 */
export type HomeworkCompletion = $Result.DefaultSelection<Prisma.$HomeworkCompletionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SchoolType: {
  NURSERY: 'NURSERY',
  PRIMARY: 'PRIMARY',
  SECONDARY: 'SECONDARY',
  ALL_THROUGH: 'ALL_THROUGH',
  SPECIAL: 'SPECIAL',
  PRU: 'PRU'
};

export type SchoolType = (typeof SchoolType)[keyof typeof SchoolType]


export const TeacherType: {
  HEAD_TEACHER: 'HEAD_TEACHER',
  DEPUTY_HEAD: 'DEPUTY_HEAD',
  ASSISTANT_HEAD: 'ASSISTANT_HEAD',
  CLASS_TEACHER: 'CLASS_TEACHER',
  SUBJECT_SPECIALIST: 'SUBJECT_SPECIALIST',
  TEACHING_ASSISTANT: 'TEACHING_ASSISTANT',
  HIGHER_LEVEL_TA: 'HIGHER_LEVEL_TA',
  SEN_COORDINATOR: 'SEN_COORDINATOR',
  SUPPLY_TEACHER: 'SUPPLY_TEACHER',
  TRAINEE_TEACHER: 'TRAINEE_TEACHER'
};

export type TeacherType = (typeof TeacherType)[keyof typeof TeacherType]


export const ContractType: {
  PERMANENT: 'PERMANENT',
  TEMPORARY: 'TEMPORARY',
  SUPPLY: 'SUPPLY',
  TRAINEE: 'TRAINEE',
  VOLUNTEER: 'VOLUNTEER'
};

export type ContractType = (typeof ContractType)[keyof typeof ContractType]


export const ContactMethod: {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PHONE: 'PHONE',
  APP_NOTIFICATION: 'APP_NOTIFICATION'
};

export type ContactMethod = (typeof ContactMethod)[keyof typeof ContactMethod]


export const AdminLevel: {
  SUPER_ADMIN: 'SUPER_ADMIN',
  SCHOOL_ADMIN: 'SCHOOL_ADMIN',
  OFFICE_ADMIN: 'OFFICE_ADMIN',
  DATA_MANAGER: 'DATA_MANAGER',
  SYSTEM_ADMIN: 'SYSTEM_ADMIN',
  CLUB_ADMIN: 'CLUB_ADMIN'
};

export type AdminLevel = (typeof AdminLevel)[keyof typeof AdminLevel]


export const ParentType: {
  MOTHER: 'MOTHER',
  FATHER: 'FATHER',
  STEP_MOTHER: 'STEP_MOTHER',
  STEP_FATHER: 'STEP_FATHER',
  GUARDIAN: 'GUARDIAN',
  CARER: 'CARER',
  GRANDPARENT: 'GRANDPARENT',
  AUNT_UNCLE: 'AUNT_UNCLE',
  SIBLING: 'SIBLING',
  OTHER: 'OTHER'
};

export type ParentType = (typeof ParentType)[keyof typeof ParentType]


export const RoleScope: {
  PLATFORM: 'PLATFORM',
  SCHOOL: 'SCHOOL',
  YEAR_GROUP: 'YEAR_GROUP',
  CLASS: 'CLASS',
  SUBJECT: 'SUBJECT',
  INDIVIDUAL: 'INDIVIDUAL'
};

export type RoleScope = (typeof RoleScope)[keyof typeof RoleScope]


export const UserType: {
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT',
  PARENT: 'PARENT',
  SCHOOL_ADMIN: 'SCHOOL_ADMIN'
};

export type UserType = (typeof UserType)[keyof typeof UserType]


export const PermissionCategory: {
  USER_MANAGEMENT: 'USER_MANAGEMENT',
  ACADEMIC: 'ACADEMIC',
  ADMINISTRATIVE: 'ADMINISTRATIVE',
  COMMUNICATION: 'COMMUNICATION',
  DATA_ACCESS: 'DATA_ACCESS',
  SYSTEM: 'SYSTEM',
  GENERAL: 'GENERAL'
};

export type PermissionCategory = (typeof PermissionCategory)[keyof typeof PermissionCategory]


export const RiskLevel: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type RiskLevel = (typeof RiskLevel)[keyof typeof RiskLevel]


export const ClassType: {
  FORM: 'FORM',
  SUBJECT: 'SUBJECT',
  SET: 'SET',
  MIXED: 'MIXED',
  INTERVENTION: 'INTERVENTION',
  CLUB: 'CLUB',
  NURTURE: 'NURTURE'
};

export type ClassType = (typeof ClassType)[keyof typeof ClassType]


export const KeyStage: {
  EYFS: 'EYFS',
  KS1: 'KS1',
  KS2: 'KS2',
  KS3: 'KS3',
  KS4: 'KS4',
  KS5: 'KS5'
};

export type KeyStage = (typeof KeyStage)[keyof typeof KeyStage]


export const ClassRole: {
  CLASS_TEACHER: 'CLASS_TEACHER',
  ASSISTANT_TEACHER: 'ASSISTANT_TEACHER',
  SUBJECT_SPECIALIST: 'SUBJECT_SPECIALIST',
  SUPPORT_TEACHER: 'SUPPORT_TEACHER',
  STUDENT_TEACHER: 'STUDENT_TEACHER',
  COVER_TEACHER: 'COVER_TEACHER',
  VOLUNTEER: 'VOLUNTEER'
};

export type ClassRole = (typeof ClassRole)[keyof typeof ClassRole]


export const ClubType: {
  ACADEMIC: 'ACADEMIC',
  NUMBER: 'NUMBER',
  READING: 'READING',
  SPELLING: 'SPELLING',
  WRITING: 'WRITING',
  SCIENCE: 'SCIENCE',
  TOPIC: 'TOPIC',
  SKILL: 'SKILL',
  WELLBEING: 'WELLBEING'
};

export type ClubType = (typeof ClubType)[keyof typeof ClubType]


export const ClubEvidenceType: {
  PHOTO: 'PHOTO',
  READING_LOG: 'READING_LOG',
  COMPLETION_MARK: 'COMPLETION_MARK',
  AUDIO_RECORDING: 'AUDIO_RECORDING',
  WRITTEN_WORK: 'WRITTEN_WORK',
  TEACHER_OBSERVED: 'TEACHER_OBSERVED'
};

export type ClubEvidenceType = (typeof ClubEvidenceType)[keyof typeof ClubEvidenceType]

}

export type SchoolType = $Enums.SchoolType

export const SchoolType: typeof $Enums.SchoolType

export type TeacherType = $Enums.TeacherType

export const TeacherType: typeof $Enums.TeacherType

export type ContractType = $Enums.ContractType

export const ContractType: typeof $Enums.ContractType

export type ContactMethod = $Enums.ContactMethod

export const ContactMethod: typeof $Enums.ContactMethod

export type AdminLevel = $Enums.AdminLevel

export const AdminLevel: typeof $Enums.AdminLevel

export type ParentType = $Enums.ParentType

export const ParentType: typeof $Enums.ParentType

export type RoleScope = $Enums.RoleScope

export const RoleScope: typeof $Enums.RoleScope

export type UserType = $Enums.UserType

export const UserType: typeof $Enums.UserType

export type PermissionCategory = $Enums.PermissionCategory

export const PermissionCategory: typeof $Enums.PermissionCategory

export type RiskLevel = $Enums.RiskLevel

export const RiskLevel: typeof $Enums.RiskLevel

export type ClassType = $Enums.ClassType

export const ClassType: typeof $Enums.ClassType

export type KeyStage = $Enums.KeyStage

export const KeyStage: typeof $Enums.KeyStage

export type ClassRole = $Enums.ClassRole

export const ClassRole: typeof $Enums.ClassRole

export type ClubType = $Enums.ClubType

export const ClubType: typeof $Enums.ClubType

export type ClubEvidenceType = $Enums.ClubEvidenceType

export const ClubEvidenceType: typeof $Enums.ClubEvidenceType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Schools
 * const schools = await prisma.school.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Schools
   * const schools = await prisma.school.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.school`: Exposes CRUD operations for the **School** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schools
    * const schools = await prisma.school.findMany()
    * ```
    */
  get school(): Prisma.SchoolDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.parent`: Exposes CRUD operations for the **Parent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Parents
    * const parents = await prisma.parent.findMany()
    * ```
    */
  get parent(): Prisma.ParentDelegate<ExtArgs>;

  /**
   * `prisma.schoolAdmin`: Exposes CRUD operations for the **SchoolAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolAdmins
    * const schoolAdmins = await prisma.schoolAdmin.findMany()
    * ```
    */
  get schoolAdmin(): Prisma.SchoolAdminDelegate<ExtArgs>;

  /**
   * `prisma.parentStudent`: Exposes CRUD operations for the **ParentStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ParentStudents
    * const parentStudents = await prisma.parentStudent.findMany()
    * ```
    */
  get parentStudent(): Prisma.ParentStudentDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs>;

  /**
   * `prisma.teacherClass`: Exposes CRUD operations for the **TeacherClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherClasses
    * const teacherClasses = await prisma.teacherClass.findMany()
    * ```
    */
  get teacherClass(): Prisma.TeacherClassDelegate<ExtArgs>;

  /**
   * `prisma.club`: Exposes CRUD operations for the **Club** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clubs
    * const clubs = await prisma.club.findMany()
    * ```
    */
  get club(): Prisma.ClubDelegate<ExtArgs>;

  /**
   * `prisma.homeworkCompletion`: Exposes CRUD operations for the **HomeworkCompletion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HomeworkCompletions
    * const homeworkCompletions = await prisma.homeworkCompletion.findMany()
    * ```
    */
  get homeworkCompletion(): Prisma.HomeworkCompletionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    School: 'School',
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken',
    Teacher: 'Teacher',
    Student: 'Student',
    Parent: 'Parent',
    SchoolAdmin: 'SchoolAdmin',
    ParentStudent: 'ParentStudent',
    Role: 'Role',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    UserRole: 'UserRole',
    Class: 'Class',
    TeacherClass: 'TeacherClass',
    Club: 'Club',
    HomeworkCompletion: 'HomeworkCompletion'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "school" | "user" | "account" | "session" | "verificationToken" | "teacher" | "student" | "parent" | "schoolAdmin" | "parentStudent" | "role" | "permission" | "rolePermission" | "userRole" | "class" | "teacherClass" | "club" | "homeworkCompletion"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      School: {
        payload: Prisma.$SchoolPayload<ExtArgs>
        fields: Prisma.SchoolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findFirst: {
            args: Prisma.SchoolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          findMany: {
            args: Prisma.SchoolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          create: {
            args: Prisma.SchoolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          createMany: {
            args: Prisma.SchoolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>[]
          }
          delete: {
            args: Prisma.SchoolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          update: {
            args: Prisma.SchoolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SchoolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolPayload>
          }
          aggregate: {
            args: Prisma.SchoolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchool>
          }
          groupBy: {
            args: Prisma.SchoolGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Parent: {
        payload: Prisma.$ParentPayload<ExtArgs>
        fields: Prisma.ParentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          findFirst: {
            args: Prisma.ParentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          findMany: {
            args: Prisma.ParentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>[]
          }
          create: {
            args: Prisma.ParentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          createMany: {
            args: Prisma.ParentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>[]
          }
          delete: {
            args: Prisma.ParentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          update: {
            args: Prisma.ParentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          deleteMany: {
            args: Prisma.ParentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentPayload>
          }
          aggregate: {
            args: Prisma.ParentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParent>
          }
          groupBy: {
            args: Prisma.ParentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParentCountArgs<ExtArgs>
            result: $Utils.Optional<ParentCountAggregateOutputType> | number
          }
        }
      }
      SchoolAdmin: {
        payload: Prisma.$SchoolAdminPayload<ExtArgs>
        fields: Prisma.SchoolAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>
          }
          findFirst: {
            args: Prisma.SchoolAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>
          }
          findMany: {
            args: Prisma.SchoolAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>[]
          }
          create: {
            args: Prisma.SchoolAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>
          }
          createMany: {
            args: Prisma.SchoolAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolAdminCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>[]
          }
          delete: {
            args: Prisma.SchoolAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>
          }
          update: {
            args: Prisma.SchoolAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>
          }
          deleteMany: {
            args: Prisma.SchoolAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SchoolAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolAdminPayload>
          }
          aggregate: {
            args: Prisma.SchoolAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchoolAdmin>
          }
          groupBy: {
            args: Prisma.SchoolAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolAdminCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolAdminCountAggregateOutputType> | number
          }
        }
      }
      ParentStudent: {
        payload: Prisma.$ParentStudentPayload<ExtArgs>
        fields: Prisma.ParentStudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ParentStudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ParentStudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>
          }
          findFirst: {
            args: Prisma.ParentStudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ParentStudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>
          }
          findMany: {
            args: Prisma.ParentStudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
          }
          create: {
            args: Prisma.ParentStudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>
          }
          createMany: {
            args: Prisma.ParentStudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ParentStudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>[]
          }
          delete: {
            args: Prisma.ParentStudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>
          }
          update: {
            args: Prisma.ParentStudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>
          }
          deleteMany: {
            args: Prisma.ParentStudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ParentStudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ParentStudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ParentStudentPayload>
          }
          aggregate: {
            args: Prisma.ParentStudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateParentStudent>
          }
          groupBy: {
            args: Prisma.ParentStudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ParentStudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ParentStudentCountArgs<ExtArgs>
            result: $Utils.Optional<ParentStudentCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserRoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      TeacherClass: {
        payload: Prisma.$TeacherClassPayload<ExtArgs>
        fields: Prisma.TeacherClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>
          }
          findFirst: {
            args: Prisma.TeacherClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>
          }
          findMany: {
            args: Prisma.TeacherClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>[]
          }
          create: {
            args: Prisma.TeacherClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>
          }
          createMany: {
            args: Prisma.TeacherClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>[]
          }
          delete: {
            args: Prisma.TeacherClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>
          }
          update: {
            args: Prisma.TeacherClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>
          }
          deleteMany: {
            args: Prisma.TeacherClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeacherClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherClassPayload>
          }
          aggregate: {
            args: Prisma.TeacherClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacherClass>
          }
          groupBy: {
            args: Prisma.TeacherClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherClassCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherClassCountAggregateOutputType> | number
          }
        }
      }
      Club: {
        payload: Prisma.$ClubPayload<ExtArgs>
        fields: Prisma.ClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findFirst: {
            args: Prisma.ClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          findMany: {
            args: Prisma.ClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          create: {
            args: Prisma.ClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          createMany: {
            args: Prisma.ClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>[]
          }
          delete: {
            args: Prisma.ClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          update: {
            args: Prisma.ClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          deleteMany: {
            args: Prisma.ClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClubPayload>
          }
          aggregate: {
            args: Prisma.ClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClub>
          }
          groupBy: {
            args: Prisma.ClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClubCountArgs<ExtArgs>
            result: $Utils.Optional<ClubCountAggregateOutputType> | number
          }
        }
      }
      HomeworkCompletion: {
        payload: Prisma.$HomeworkCompletionPayload<ExtArgs>
        fields: Prisma.HomeworkCompletionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HomeworkCompletionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HomeworkCompletionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>
          }
          findFirst: {
            args: Prisma.HomeworkCompletionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HomeworkCompletionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>
          }
          findMany: {
            args: Prisma.HomeworkCompletionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>[]
          }
          create: {
            args: Prisma.HomeworkCompletionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>
          }
          createMany: {
            args: Prisma.HomeworkCompletionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HomeworkCompletionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>[]
          }
          delete: {
            args: Prisma.HomeworkCompletionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>
          }
          update: {
            args: Prisma.HomeworkCompletionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>
          }
          deleteMany: {
            args: Prisma.HomeworkCompletionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HomeworkCompletionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HomeworkCompletionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HomeworkCompletionPayload>
          }
          aggregate: {
            args: Prisma.HomeworkCompletionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHomeworkCompletion>
          }
          groupBy: {
            args: Prisma.HomeworkCompletionGroupByArgs<ExtArgs>
            result: $Utils.Optional<HomeworkCompletionGroupByOutputType>[]
          }
          count: {
            args: Prisma.HomeworkCompletionCountArgs<ExtArgs>
            result: $Utils.Optional<HomeworkCompletionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SchoolCountOutputType
   */

  export type SchoolCountOutputType = {
    users: number
    teachers: number
    students: number
    parents: number
    schoolAdmins: number
    classes: number
    clubs: number
    parentStudents: number
    teacherClasses: number
    roles: number
    userRoles: number
    homeworkCompletions: number
  }

  export type SchoolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | SchoolCountOutputTypeCountUsersArgs
    teachers?: boolean | SchoolCountOutputTypeCountTeachersArgs
    students?: boolean | SchoolCountOutputTypeCountStudentsArgs
    parents?: boolean | SchoolCountOutputTypeCountParentsArgs
    schoolAdmins?: boolean | SchoolCountOutputTypeCountSchoolAdminsArgs
    classes?: boolean | SchoolCountOutputTypeCountClassesArgs
    clubs?: boolean | SchoolCountOutputTypeCountClubsArgs
    parentStudents?: boolean | SchoolCountOutputTypeCountParentStudentsArgs
    teacherClasses?: boolean | SchoolCountOutputTypeCountTeacherClassesArgs
    roles?: boolean | SchoolCountOutputTypeCountRolesArgs
    userRoles?: boolean | SchoolCountOutputTypeCountUserRolesArgs
    homeworkCompletions?: boolean | SchoolCountOutputTypeCountHomeworkCompletionsArgs
  }

  // Custom InputTypes
  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolCountOutputType
     */
    select?: SchoolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountParentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountSchoolAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolAdminWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountParentStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentStudentWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountTeacherClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherClassWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * SchoolCountOutputType without action
   */
  export type SchoolCountOutputTypeCountHomeworkCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkCompletionWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userRoles: number
    accounts: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userRoles?: boolean | UserCountOutputTypeCountUserRolesArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    teacherClasses: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherClasses?: boolean | TeacherCountOutputTypeCountTeacherClassesArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountTeacherClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherClassWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    parentStudents: number
    homeworkCompletions: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentStudents?: boolean | StudentCountOutputTypeCountParentStudentsArgs
    homeworkCompletions?: boolean | StudentCountOutputTypeCountHomeworkCompletionsArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountParentStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentStudentWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountHomeworkCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkCompletionWhereInput
  }


  /**
   * Count Type ParentCountOutputType
   */

  export type ParentCountOutputType = {
    parentStudents: number
  }

  export type ParentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentStudents?: boolean | ParentCountOutputTypeCountParentStudentsArgs
  }

  // Custom InputTypes
  /**
   * ParentCountOutputType without action
   */
  export type ParentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentCountOutputType
     */
    select?: ParentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ParentCountOutputType without action
   */
  export type ParentCountOutputTypeCountParentStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentStudentWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    permissions: number
    userRoles: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
    userRoles?: boolean | RoleCountOutputTypeCountUserRolesArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    rolePermissions: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolePermissions?: boolean | PermissionCountOutputTypeCountRolePermissionsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    teacherClasses: number
    students: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherClasses?: boolean | ClassCountOutputTypeCountTeacherClassesArgs
    students?: boolean | ClassCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountTeacherClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherClassWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type ClubCountOutputType
   */

  export type ClubCountOutputType = {
    homeworkCompletions: number
  }

  export type ClubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    homeworkCompletions?: boolean | ClubCountOutputTypeCountHomeworkCompletionsArgs
  }

  // Custom InputTypes
  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClubCountOutputType
     */
    select?: ClubCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClubCountOutputType without action
   */
  export type ClubCountOutputTypeCountHomeworkCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkCompletionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model School
   */

  export type AggregateSchool = {
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  export type SchoolAvgAggregateOutputType = {
    minYearGroup: number | null
    maxYearGroup: number | null
  }

  export type SchoolSumAggregateOutputType = {
    minYearGroup: number | null
    maxYearGroup: number | null
  }

  export type SchoolMinAggregateOutputType = {
    id: string | null
    name: string | null
    urn: string | null
    dfeNumber: string | null
    address: string | null
    postcode: string | null
    phone: string | null
    email: string | null
    website: string | null
    schoolType: $Enums.SchoolType | null
    minYearGroup: number | null
    maxYearGroup: number | null
    isActive: boolean | null
    logoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolMaxAggregateOutputType = {
    id: string | null
    name: string | null
    urn: string | null
    dfeNumber: string | null
    address: string | null
    postcode: string | null
    phone: string | null
    email: string | null
    website: string | null
    schoolType: $Enums.SchoolType | null
    minYearGroup: number | null
    maxYearGroup: number | null
    isActive: boolean | null
    logoUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolCountAggregateOutputType = {
    id: number
    name: number
    urn: number
    dfeNumber: number
    address: number
    postcode: number
    phone: number
    email: number
    website: number
    schoolType: number
    minYearGroup: number
    maxYearGroup: number
    isActive: number
    logoUrl: number
    settings: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SchoolAvgAggregateInputType = {
    minYearGroup?: true
    maxYearGroup?: true
  }

  export type SchoolSumAggregateInputType = {
    minYearGroup?: true
    maxYearGroup?: true
  }

  export type SchoolMinAggregateInputType = {
    id?: true
    name?: true
    urn?: true
    dfeNumber?: true
    address?: true
    postcode?: true
    phone?: true
    email?: true
    website?: true
    schoolType?: true
    minYearGroup?: true
    maxYearGroup?: true
    isActive?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolMaxAggregateInputType = {
    id?: true
    name?: true
    urn?: true
    dfeNumber?: true
    address?: true
    postcode?: true
    phone?: true
    email?: true
    website?: true
    schoolType?: true
    minYearGroup?: true
    maxYearGroup?: true
    isActive?: true
    logoUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolCountAggregateInputType = {
    id?: true
    name?: true
    urn?: true
    dfeNumber?: true
    address?: true
    postcode?: true
    phone?: true
    email?: true
    website?: true
    schoolType?: true
    minYearGroup?: true
    maxYearGroup?: true
    isActive?: true
    logoUrl?: true
    settings?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SchoolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which School to aggregate.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schools
    **/
    _count?: true | SchoolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolMaxAggregateInputType
  }

  export type GetSchoolAggregateType<T extends SchoolAggregateArgs> = {
        [P in keyof T & keyof AggregateSchool]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchool[P]>
      : GetScalarType<T[P], AggregateSchool[P]>
  }




  export type SchoolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolWhereInput
    orderBy?: SchoolOrderByWithAggregationInput | SchoolOrderByWithAggregationInput[]
    by: SchoolScalarFieldEnum[] | SchoolScalarFieldEnum
    having?: SchoolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolCountAggregateInputType | true
    _avg?: SchoolAvgAggregateInputType
    _sum?: SchoolSumAggregateInputType
    _min?: SchoolMinAggregateInputType
    _max?: SchoolMaxAggregateInputType
  }

  export type SchoolGroupByOutputType = {
    id: string
    name: string
    urn: string | null
    dfeNumber: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website: string | null
    schoolType: $Enums.SchoolType
    minYearGroup: number
    maxYearGroup: number
    isActive: boolean
    logoUrl: string | null
    settings: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: SchoolCountAggregateOutputType | null
    _avg: SchoolAvgAggregateOutputType | null
    _sum: SchoolSumAggregateOutputType | null
    _min: SchoolMinAggregateOutputType | null
    _max: SchoolMaxAggregateOutputType | null
  }

  type GetSchoolGroupByPayload<T extends SchoolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolGroupByOutputType[P]>
        }
      >
    >


  export type SchoolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    urn?: boolean
    dfeNumber?: boolean
    address?: boolean
    postcode?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    schoolType?: boolean
    minYearGroup?: boolean
    maxYearGroup?: boolean
    isActive?: boolean
    logoUrl?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | School$usersArgs<ExtArgs>
    teachers?: boolean | School$teachersArgs<ExtArgs>
    students?: boolean | School$studentsArgs<ExtArgs>
    parents?: boolean | School$parentsArgs<ExtArgs>
    schoolAdmins?: boolean | School$schoolAdminsArgs<ExtArgs>
    classes?: boolean | School$classesArgs<ExtArgs>
    clubs?: boolean | School$clubsArgs<ExtArgs>
    parentStudents?: boolean | School$parentStudentsArgs<ExtArgs>
    teacherClasses?: boolean | School$teacherClassesArgs<ExtArgs>
    roles?: boolean | School$rolesArgs<ExtArgs>
    userRoles?: boolean | School$userRolesArgs<ExtArgs>
    homeworkCompletions?: boolean | School$homeworkCompletionsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    urn?: boolean
    dfeNumber?: boolean
    address?: boolean
    postcode?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    schoolType?: boolean
    minYearGroup?: boolean
    maxYearGroup?: boolean
    isActive?: boolean
    logoUrl?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["school"]>

  export type SchoolSelectScalar = {
    id?: boolean
    name?: boolean
    urn?: boolean
    dfeNumber?: boolean
    address?: boolean
    postcode?: boolean
    phone?: boolean
    email?: boolean
    website?: boolean
    schoolType?: boolean
    minYearGroup?: boolean
    maxYearGroup?: boolean
    isActive?: boolean
    logoUrl?: boolean
    settings?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SchoolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | School$usersArgs<ExtArgs>
    teachers?: boolean | School$teachersArgs<ExtArgs>
    students?: boolean | School$studentsArgs<ExtArgs>
    parents?: boolean | School$parentsArgs<ExtArgs>
    schoolAdmins?: boolean | School$schoolAdminsArgs<ExtArgs>
    classes?: boolean | School$classesArgs<ExtArgs>
    clubs?: boolean | School$clubsArgs<ExtArgs>
    parentStudents?: boolean | School$parentStudentsArgs<ExtArgs>
    teacherClasses?: boolean | School$teacherClassesArgs<ExtArgs>
    roles?: boolean | School$rolesArgs<ExtArgs>
    userRoles?: boolean | School$userRolesArgs<ExtArgs>
    homeworkCompletions?: boolean | School$homeworkCompletionsArgs<ExtArgs>
    _count?: boolean | SchoolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SchoolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SchoolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "School"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      teachers: Prisma.$TeacherPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
      parents: Prisma.$ParentPayload<ExtArgs>[]
      schoolAdmins: Prisma.$SchoolAdminPayload<ExtArgs>[]
      classes: Prisma.$ClassPayload<ExtArgs>[]
      clubs: Prisma.$ClubPayload<ExtArgs>[]
      parentStudents: Prisma.$ParentStudentPayload<ExtArgs>[]
      teacherClasses: Prisma.$TeacherClassPayload<ExtArgs>[]
      roles: Prisma.$RolePayload<ExtArgs>[]
      userRoles: Prisma.$UserRolePayload<ExtArgs>[]
      homeworkCompletions: Prisma.$HomeworkCompletionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      urn: string | null
      dfeNumber: string | null
      address: string
      postcode: string
      phone: string
      email: string
      website: string | null
      schoolType: $Enums.SchoolType
      minYearGroup: number
      maxYearGroup: number
      isActive: boolean
      logoUrl: string | null
      settings: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["school"]>
    composites: {}
  }

  type SchoolGetPayload<S extends boolean | null | undefined | SchoolDefaultArgs> = $Result.GetResult<Prisma.$SchoolPayload, S>

  type SchoolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchoolCountAggregateInputType | true
    }

  export interface SchoolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['School'], meta: { name: 'School' } }
    /**
     * Find zero or one School that matches the filter.
     * @param {SchoolFindUniqueArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolFindUniqueArgs>(args: SelectSubset<T, SchoolFindUniqueArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one School that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SchoolFindUniqueOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first School that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolFindFirstArgs>(args?: SelectSubset<T, SchoolFindFirstArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first School that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindFirstOrThrowArgs} args - Arguments to find a School
     * @example
     * // Get one School
     * const school = await prisma.school.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Schools that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schools
     * const schools = await prisma.school.findMany()
     * 
     * // Get first 10 Schools
     * const schools = await prisma.school.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolWithIdOnly = await prisma.school.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolFindManyArgs>(args?: SelectSubset<T, SchoolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a School.
     * @param {SchoolCreateArgs} args - Arguments to create a School.
     * @example
     * // Create one School
     * const School = await prisma.school.create({
     *   data: {
     *     // ... data to create a School
     *   }
     * })
     * 
     */
    create<T extends SchoolCreateArgs>(args: SelectSubset<T, SchoolCreateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Schools.
     * @param {SchoolCreateManyArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolCreateManyArgs>(args?: SelectSubset<T, SchoolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schools and returns the data saved in the database.
     * @param {SchoolCreateManyAndReturnArgs} args - Arguments to create many Schools.
     * @example
     * // Create many Schools
     * const school = await prisma.school.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schools and only return the `id`
     * const schoolWithIdOnly = await prisma.school.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a School.
     * @param {SchoolDeleteArgs} args - Arguments to delete one School.
     * @example
     * // Delete one School
     * const School = await prisma.school.delete({
     *   where: {
     *     // ... filter to delete one School
     *   }
     * })
     * 
     */
    delete<T extends SchoolDeleteArgs>(args: SelectSubset<T, SchoolDeleteArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one School.
     * @param {SchoolUpdateArgs} args - Arguments to update one School.
     * @example
     * // Update one School
     * const school = await prisma.school.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolUpdateArgs>(args: SelectSubset<T, SchoolUpdateArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Schools.
     * @param {SchoolDeleteManyArgs} args - Arguments to filter Schools to delete.
     * @example
     * // Delete a few Schools
     * const { count } = await prisma.school.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolDeleteManyArgs>(args?: SelectSubset<T, SchoolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schools
     * const school = await prisma.school.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolUpdateManyArgs>(args: SelectSubset<T, SchoolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one School.
     * @param {SchoolUpsertArgs} args - Arguments to update or create a School.
     * @example
     * // Update or create a School
     * const school = await prisma.school.upsert({
     *   create: {
     *     // ... data to create a School
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the School we want to update
     *   }
     * })
     */
    upsert<T extends SchoolUpsertArgs>(args: SelectSubset<T, SchoolUpsertArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Schools.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolCountArgs} args - Arguments to filter Schools to count.
     * @example
     * // Count the number of Schools
     * const count = await prisma.school.count({
     *   where: {
     *     // ... the filter for the Schools we want to count
     *   }
     * })
    **/
    count<T extends SchoolCountArgs>(
      args?: Subset<T, SchoolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAggregateArgs>(args: Subset<T, SchoolAggregateArgs>): Prisma.PrismaPromise<GetSchoolAggregateType<T>>

    /**
     * Group by School.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolGroupByArgs['orderBy'] }
        : { orderBy?: SchoolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the School model
   */
  readonly fields: SchoolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for School.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends School$usersArgs<ExtArgs> = {}>(args?: Subset<T, School$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    teachers<T extends School$teachersArgs<ExtArgs> = {}>(args?: Subset<T, School$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany"> | Null>
    students<T extends School$studentsArgs<ExtArgs> = {}>(args?: Subset<T, School$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany"> | Null>
    parents<T extends School$parentsArgs<ExtArgs> = {}>(args?: Subset<T, School$parentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findMany"> | Null>
    schoolAdmins<T extends School$schoolAdminsArgs<ExtArgs> = {}>(args?: Subset<T, School$schoolAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "findMany"> | Null>
    classes<T extends School$classesArgs<ExtArgs> = {}>(args?: Subset<T, School$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany"> | Null>
    clubs<T extends School$clubsArgs<ExtArgs> = {}>(args?: Subset<T, School$clubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany"> | Null>
    parentStudents<T extends School$parentStudentsArgs<ExtArgs> = {}>(args?: Subset<T, School$parentStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findMany"> | Null>
    teacherClasses<T extends School$teacherClassesArgs<ExtArgs> = {}>(args?: Subset<T, School$teacherClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findMany"> | Null>
    roles<T extends School$rolesArgs<ExtArgs> = {}>(args?: Subset<T, School$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany"> | Null>
    userRoles<T extends School$userRolesArgs<ExtArgs> = {}>(args?: Subset<T, School$userRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    homeworkCompletions<T extends School$homeworkCompletionsArgs<ExtArgs> = {}>(args?: Subset<T, School$homeworkCompletionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the School model
   */ 
  interface SchoolFieldRefs {
    readonly id: FieldRef<"School", 'String'>
    readonly name: FieldRef<"School", 'String'>
    readonly urn: FieldRef<"School", 'String'>
    readonly dfeNumber: FieldRef<"School", 'String'>
    readonly address: FieldRef<"School", 'String'>
    readonly postcode: FieldRef<"School", 'String'>
    readonly phone: FieldRef<"School", 'String'>
    readonly email: FieldRef<"School", 'String'>
    readonly website: FieldRef<"School", 'String'>
    readonly schoolType: FieldRef<"School", 'SchoolType'>
    readonly minYearGroup: FieldRef<"School", 'Int'>
    readonly maxYearGroup: FieldRef<"School", 'Int'>
    readonly isActive: FieldRef<"School", 'Boolean'>
    readonly logoUrl: FieldRef<"School", 'String'>
    readonly settings: FieldRef<"School", 'Json'>
    readonly createdAt: FieldRef<"School", 'DateTime'>
    readonly updatedAt: FieldRef<"School", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * School findUnique
   */
  export type SchoolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findUniqueOrThrow
   */
  export type SchoolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School findFirst
   */
  export type SchoolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findFirstOrThrow
   */
  export type SchoolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which School to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schools.
     */
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School findMany
   */
  export type SchoolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter, which Schools to fetch.
     */
    where?: SchoolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schools to fetch.
     */
    orderBy?: SchoolOrderByWithRelationInput | SchoolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schools.
     */
    cursor?: SchoolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schools from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schools.
     */
    skip?: number
    distinct?: SchoolScalarFieldEnum | SchoolScalarFieldEnum[]
  }

  /**
   * School create
   */
  export type SchoolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to create a School.
     */
    data: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
  }

  /**
   * School createMany
   */
  export type SchoolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School createManyAndReturn
   */
  export type SchoolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Schools.
     */
    data: SchoolCreateManyInput | SchoolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * School update
   */
  export type SchoolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The data needed to update a School.
     */
    data: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
    /**
     * Choose, which School to update.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School updateMany
   */
  export type SchoolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schools.
     */
    data: XOR<SchoolUpdateManyMutationInput, SchoolUncheckedUpdateManyInput>
    /**
     * Filter which Schools to update
     */
    where?: SchoolWhereInput
  }

  /**
   * School upsert
   */
  export type SchoolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * The filter to search for the School to update in case it exists.
     */
    where: SchoolWhereUniqueInput
    /**
     * In case the School found by the `where` argument doesn't exist, create a new School with this data.
     */
    create: XOR<SchoolCreateInput, SchoolUncheckedCreateInput>
    /**
     * In case the School was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolUpdateInput, SchoolUncheckedUpdateInput>
  }

  /**
   * School delete
   */
  export type SchoolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    /**
     * Filter which School to delete.
     */
    where: SchoolWhereUniqueInput
  }

  /**
   * School deleteMany
   */
  export type SchoolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schools to delete
     */
    where?: SchoolWhereInput
  }

  /**
   * School.users
   */
  export type School$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * School.teachers
   */
  export type School$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * School.students
   */
  export type School$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * School.parents
   */
  export type School$parentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    where?: ParentWhereInput
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    cursor?: ParentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * School.schoolAdmins
   */
  export type School$schoolAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    where?: SchoolAdminWhereInput
    orderBy?: SchoolAdminOrderByWithRelationInput | SchoolAdminOrderByWithRelationInput[]
    cursor?: SchoolAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolAdminScalarFieldEnum | SchoolAdminScalarFieldEnum[]
  }

  /**
   * School.classes
   */
  export type School$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * School.clubs
   */
  export type School$clubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    cursor?: ClubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * School.parentStudents
   */
  export type School$parentStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    where?: ParentStudentWhereInput
    orderBy?: ParentStudentOrderByWithRelationInput | ParentStudentOrderByWithRelationInput[]
    cursor?: ParentStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParentStudentScalarFieldEnum | ParentStudentScalarFieldEnum[]
  }

  /**
   * School.teacherClasses
   */
  export type School$teacherClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    where?: TeacherClassWhereInput
    orderBy?: TeacherClassOrderByWithRelationInput | TeacherClassOrderByWithRelationInput[]
    cursor?: TeacherClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherClassScalarFieldEnum | TeacherClassScalarFieldEnum[]
  }

  /**
   * School.roles
   */
  export type School$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * School.userRoles
   */
  export type School$userRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * School.homeworkCompletions
   */
  export type School$homeworkCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    where?: HomeworkCompletionWhereInput
    orderBy?: HomeworkCompletionOrderByWithRelationInput | HomeworkCompletionOrderByWithRelationInput[]
    cursor?: HomeworkCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkCompletionScalarFieldEnum | HomeworkCompletionScalarFieldEnum[]
  }

  /**
   * School without action
   */
  export type SchoolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    loginAttempts: number | null
  }

  export type UserSumAggregateOutputType = {
    loginAttempts: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    email: string | null
    emailVerified: Date | null
    passwordHash: string | null
    isActive: boolean | null
    lastLoginAt: Date | null
    loginAttempts: number | null
    lockedUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    email: string | null
    emailVerified: Date | null
    passwordHash: string | null
    isActive: boolean | null
    lastLoginAt: Date | null
    loginAttempts: number | null
    lockedUntil: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    schoolId: number
    email: number
    emailVerified: number
    passwordHash: number
    isActive: number
    lastLoginAt: number
    loginAttempts: number
    lockedUntil: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    loginAttempts?: true
  }

  export type UserSumAggregateInputType = {
    loginAttempts?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    schoolId?: true
    email?: true
    emailVerified?: true
    passwordHash?: true
    isActive?: true
    lastLoginAt?: true
    loginAttempts?: true
    lockedUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    schoolId?: true
    email?: true
    emailVerified?: true
    passwordHash?: true
    isActive?: true
    lastLoginAt?: true
    loginAttempts?: true
    lockedUntil?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    schoolId?: true
    email?: true
    emailVerified?: true
    passwordHash?: true
    isActive?: true
    lastLoginAt?: true
    loginAttempts?: true
    lockedUntil?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    schoolId: string
    email: string
    emailVerified: Date | null
    passwordHash: string | null
    isActive: boolean
    lastLoginAt: Date | null
    loginAttempts: number
    lockedUntil: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    email?: boolean
    emailVerified?: boolean
    passwordHash?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    loginAttempts?: boolean
    lockedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacher?: boolean | User$teacherArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    parent?: boolean | User$parentArgs<ExtArgs>
    schoolAdmin?: boolean | User$schoolAdminArgs<ExtArgs>
    userRoles?: boolean | User$userRolesArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    email?: boolean
    emailVerified?: boolean
    passwordHash?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    loginAttempts?: boolean
    lockedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    schoolId?: boolean
    email?: boolean
    emailVerified?: boolean
    passwordHash?: boolean
    isActive?: boolean
    lastLoginAt?: boolean
    loginAttempts?: boolean
    lockedUntil?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | User$teacherArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    parent?: boolean | User$parentArgs<ExtArgs>
    schoolAdmin?: boolean | User$schoolAdminArgs<ExtArgs>
    userRoles?: boolean | User$userRolesArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      teacher: Prisma.$TeacherPayload<ExtArgs> | null
      student: Prisma.$StudentPayload<ExtArgs> | null
      parent: Prisma.$ParentPayload<ExtArgs> | null
      schoolAdmin: Prisma.$SchoolAdminPayload<ExtArgs> | null
      userRoles: Prisma.$UserRolePayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      school: Prisma.$SchoolPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      email: string
      emailVerified: Date | null
      passwordHash: string | null
      isActive: boolean
      lastLoginAt: Date | null
      loginAttempts: number
      lockedUntil: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends User$teacherArgs<ExtArgs> = {}>(args?: Subset<T, User$teacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    student<T extends User$studentArgs<ExtArgs> = {}>(args?: Subset<T, User$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    parent<T extends User$parentArgs<ExtArgs> = {}>(args?: Subset<T, User$parentArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    schoolAdmin<T extends User$schoolAdminArgs<ExtArgs> = {}>(args?: Subset<T, User$schoolAdminArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    userRoles<T extends User$userRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$userRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly schoolId: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
    readonly loginAttempts: FieldRef<"User", 'Int'>
    readonly lockedUntil: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.teacher
   */
  export type User$teacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * User.student
   */
  export type User$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * User.parent
   */
  export type User$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    where?: ParentWhereInput
  }

  /**
   * User.schoolAdmin
   */
  export type User$schoolAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    where?: SchoolAdminWhereInput
  }

  /**
   * User.userRoles
   */
  export type User$userRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }


  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({ 
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    yearGroups: number | null
  }

  export type TeacherSumAggregateOutputType = {
    yearGroups: number[]
  }

  export type TeacherMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    employeeId: string | null
    title: string | null
    firstName: string | null
    lastName: string | null
    displayName: string | null
    teacherType: $Enums.TeacherType | null
    isHeadTeacher: boolean | null
    isSenCo: boolean | null
    isDSL: boolean | null
    isDeputyHead: boolean | null
    startDate: Date | null
    endDate: Date | null
    contractType: $Enums.ContractType | null
    schoolEmail: string | null
    phoneExtension: string | null
    dbsCheckDate: Date | null
    dbsCheckNumber: string | null
    safeguardingTraining: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    employeeId: string | null
    title: string | null
    firstName: string | null
    lastName: string | null
    displayName: string | null
    teacherType: $Enums.TeacherType | null
    isHeadTeacher: boolean | null
    isSenCo: boolean | null
    isDSL: boolean | null
    isDeputyHead: boolean | null
    startDate: Date | null
    endDate: Date | null
    contractType: $Enums.ContractType | null
    schoolEmail: string | null
    phoneExtension: string | null
    dbsCheckDate: Date | null
    dbsCheckNumber: string | null
    safeguardingTraining: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    schoolId: number
    userId: number
    employeeId: number
    title: number
    firstName: number
    lastName: number
    displayName: number
    teacherType: number
    isHeadTeacher: number
    isSenCo: number
    isDSL: number
    isDeputyHead: number
    subjects: number
    yearGroups: number
    qualifications: number
    startDate: number
    endDate: number
    contractType: number
    schoolEmail: number
    phoneExtension: number
    dbsCheckDate: number
    dbsCheckNumber: number
    safeguardingTraining: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    yearGroups?: true
  }

  export type TeacherSumAggregateInputType = {
    yearGroups?: true
  }

  export type TeacherMinAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    employeeId?: true
    title?: true
    firstName?: true
    lastName?: true
    displayName?: true
    teacherType?: true
    isHeadTeacher?: true
    isSenCo?: true
    isDSL?: true
    isDeputyHead?: true
    startDate?: true
    endDate?: true
    contractType?: true
    schoolEmail?: true
    phoneExtension?: true
    dbsCheckDate?: true
    dbsCheckNumber?: true
    safeguardingTraining?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    employeeId?: true
    title?: true
    firstName?: true
    lastName?: true
    displayName?: true
    teacherType?: true
    isHeadTeacher?: true
    isSenCo?: true
    isDSL?: true
    isDeputyHead?: true
    startDate?: true
    endDate?: true
    contractType?: true
    schoolEmail?: true
    phoneExtension?: true
    dbsCheckDate?: true
    dbsCheckNumber?: true
    safeguardingTraining?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    employeeId?: true
    title?: true
    firstName?: true
    lastName?: true
    displayName?: true
    teacherType?: true
    isHeadTeacher?: true
    isSenCo?: true
    isDSL?: true
    isDeputyHead?: true
    subjects?: true
    yearGroups?: true
    qualifications?: true
    startDate?: true
    endDate?: true
    contractType?: true
    schoolEmail?: true
    phoneExtension?: true
    dbsCheckDate?: true
    dbsCheckNumber?: true
    safeguardingTraining?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: string
    schoolId: string
    userId: string
    employeeId: string | null
    title: string
    firstName: string
    lastName: string
    displayName: string | null
    teacherType: $Enums.TeacherType
    isHeadTeacher: boolean
    isSenCo: boolean
    isDSL: boolean
    isDeputyHead: boolean
    subjects: string[]
    yearGroups: number[]
    qualifications: JsonValue | null
    startDate: Date
    endDate: Date | null
    contractType: $Enums.ContractType
    schoolEmail: string | null
    phoneExtension: string | null
    dbsCheckDate: Date | null
    dbsCheckNumber: string | null
    safeguardingTraining: Date | null
    createdAt: Date
    updatedAt: Date
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    employeeId?: boolean
    title?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    teacherType?: boolean
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: boolean
    yearGroups?: boolean
    qualifications?: boolean
    startDate?: boolean
    endDate?: boolean
    contractType?: boolean
    schoolEmail?: boolean
    phoneExtension?: boolean
    dbsCheckDate?: boolean
    dbsCheckNumber?: boolean
    safeguardingTraining?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacherClasses?: boolean | Teacher$teacherClassesArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    employeeId?: boolean
    title?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    teacherType?: boolean
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: boolean
    yearGroups?: boolean
    qualifications?: boolean
    startDate?: boolean
    endDate?: boolean
    contractType?: boolean
    schoolEmail?: boolean
    phoneExtension?: boolean
    dbsCheckDate?: boolean
    dbsCheckNumber?: boolean
    safeguardingTraining?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    employeeId?: boolean
    title?: boolean
    firstName?: boolean
    lastName?: boolean
    displayName?: boolean
    teacherType?: boolean
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: boolean
    yearGroups?: boolean
    qualifications?: boolean
    startDate?: boolean
    endDate?: boolean
    contractType?: boolean
    schoolEmail?: boolean
    phoneExtension?: boolean
    dbsCheckDate?: boolean
    dbsCheckNumber?: boolean
    safeguardingTraining?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherClasses?: boolean | Teacher$teacherClassesArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      teacherClasses: Prisma.$TeacherClassPayload<ExtArgs>[]
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      userId: string
      employeeId: string | null
      title: string
      firstName: string
      lastName: string
      displayName: string | null
      teacherType: $Enums.TeacherType
      isHeadTeacher: boolean
      isSenCo: boolean
      isDSL: boolean
      isDeputyHead: boolean
      subjects: string[]
      yearGroups: number[]
      qualifications: Prisma.JsonValue | null
      startDate: Date
      endDate: Date | null
      contractType: $Enums.ContractType
      schoolEmail: string | null
      phoneExtension: string | null
      dbsCheckDate: Date | null
      dbsCheckNumber: string | null
      safeguardingTraining: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacherClasses<T extends Teacher$teacherClassesArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$teacherClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findMany"> | Null>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */ 
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'String'>
    readonly schoolId: FieldRef<"Teacher", 'String'>
    readonly userId: FieldRef<"Teacher", 'String'>
    readonly employeeId: FieldRef<"Teacher", 'String'>
    readonly title: FieldRef<"Teacher", 'String'>
    readonly firstName: FieldRef<"Teacher", 'String'>
    readonly lastName: FieldRef<"Teacher", 'String'>
    readonly displayName: FieldRef<"Teacher", 'String'>
    readonly teacherType: FieldRef<"Teacher", 'TeacherType'>
    readonly isHeadTeacher: FieldRef<"Teacher", 'Boolean'>
    readonly isSenCo: FieldRef<"Teacher", 'Boolean'>
    readonly isDSL: FieldRef<"Teacher", 'Boolean'>
    readonly isDeputyHead: FieldRef<"Teacher", 'Boolean'>
    readonly subjects: FieldRef<"Teacher", 'String[]'>
    readonly yearGroups: FieldRef<"Teacher", 'Int[]'>
    readonly qualifications: FieldRef<"Teacher", 'Json'>
    readonly startDate: FieldRef<"Teacher", 'DateTime'>
    readonly endDate: FieldRef<"Teacher", 'DateTime'>
    readonly contractType: FieldRef<"Teacher", 'ContractType'>
    readonly schoolEmail: FieldRef<"Teacher", 'String'>
    readonly phoneExtension: FieldRef<"Teacher", 'String'>
    readonly dbsCheckDate: FieldRef<"Teacher", 'DateTime'>
    readonly dbsCheckNumber: FieldRef<"Teacher", 'String'>
    readonly safeguardingTraining: FieldRef<"Teacher", 'DateTime'>
    readonly createdAt: FieldRef<"Teacher", 'DateTime'>
    readonly updatedAt: FieldRef<"Teacher", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher.teacherClasses
   */
  export type Teacher$teacherClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    where?: TeacherClassWhereInput
    orderBy?: TeacherClassOrderByWithRelationInput | TeacherClassOrderByWithRelationInput[]
    cursor?: TeacherClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherClassScalarFieldEnum | TeacherClassScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    yearGroup: number | null
  }

  export type StudentSumAggregateOutputType = {
    yearGroup: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    preferredName: string | null
    dateOfBirth: Date | null
    pupilId: string | null
    admissionNumber: string | null
    yearGroup: number | null
    classId: string | null
    admissionDate: Date | null
    leavingDate: Date | null
    uln: string | null
    upn: string | null
    sen: boolean | null
    senCategory: string | null
    pupilPremium: boolean | null
    freeschoolMeals: boolean | null
    englishAsAdditional: boolean | null
    houseGroup: string | null
    dataRetentionUntil: Date | null
    consentGiven: boolean | null
    consentGivenBy: string | null
    consentDate: Date | null
    consentWithdrawn: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    preferredName: string | null
    dateOfBirth: Date | null
    pupilId: string | null
    admissionNumber: string | null
    yearGroup: number | null
    classId: string | null
    admissionDate: Date | null
    leavingDate: Date | null
    uln: string | null
    upn: string | null
    sen: boolean | null
    senCategory: string | null
    pupilPremium: boolean | null
    freeschoolMeals: boolean | null
    englishAsAdditional: boolean | null
    houseGroup: string | null
    dataRetentionUntil: Date | null
    consentGiven: boolean | null
    consentGivenBy: string | null
    consentDate: Date | null
    consentWithdrawn: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    schoolId: number
    userId: number
    firstName: number
    lastName: number
    preferredName: number
    dateOfBirth: number
    pupilId: number
    admissionNumber: number
    yearGroup: number
    classId: number
    admissionDate: number
    leavingDate: number
    uln: number
    upn: number
    sen: number
    senCategory: number
    senSupport: number
    pupilPremium: number
    freeschoolMeals: number
    englishAsAdditional: number
    medicalConditions: number
    dietaryRequirements: number
    houseGroup: number
    dataRetentionUntil: number
    consentGiven: number
    consentGivenBy: number
    consentDate: number
    consentWithdrawn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    yearGroup?: true
  }

  export type StudentSumAggregateInputType = {
    yearGroup?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    firstName?: true
    lastName?: true
    preferredName?: true
    dateOfBirth?: true
    pupilId?: true
    admissionNumber?: true
    yearGroup?: true
    classId?: true
    admissionDate?: true
    leavingDate?: true
    uln?: true
    upn?: true
    sen?: true
    senCategory?: true
    pupilPremium?: true
    freeschoolMeals?: true
    englishAsAdditional?: true
    houseGroup?: true
    dataRetentionUntil?: true
    consentGiven?: true
    consentGivenBy?: true
    consentDate?: true
    consentWithdrawn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    firstName?: true
    lastName?: true
    preferredName?: true
    dateOfBirth?: true
    pupilId?: true
    admissionNumber?: true
    yearGroup?: true
    classId?: true
    admissionDate?: true
    leavingDate?: true
    uln?: true
    upn?: true
    sen?: true
    senCategory?: true
    pupilPremium?: true
    freeschoolMeals?: true
    englishAsAdditional?: true
    houseGroup?: true
    dataRetentionUntil?: true
    consentGiven?: true
    consentGivenBy?: true
    consentDate?: true
    consentWithdrawn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    firstName?: true
    lastName?: true
    preferredName?: true
    dateOfBirth?: true
    pupilId?: true
    admissionNumber?: true
    yearGroup?: true
    classId?: true
    admissionDate?: true
    leavingDate?: true
    uln?: true
    upn?: true
    sen?: true
    senCategory?: true
    senSupport?: true
    pupilPremium?: true
    freeschoolMeals?: true
    englishAsAdditional?: true
    medicalConditions?: true
    dietaryRequirements?: true
    houseGroup?: true
    dataRetentionUntil?: true
    consentGiven?: true
    consentGivenBy?: true
    consentDate?: true
    consentWithdrawn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _avg?: StudentAvgAggregateInputType
    _sum?: StudentSumAggregateInputType
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    id: string
    schoolId: string
    userId: string | null
    firstName: string
    lastName: string
    preferredName: string | null
    dateOfBirth: Date
    pupilId: string
    admissionNumber: string | null
    yearGroup: number
    classId: string
    admissionDate: Date
    leavingDate: Date | null
    uln: string | null
    upn: string | null
    sen: boolean
    senCategory: string | null
    senSupport: JsonValue | null
    pupilPremium: boolean
    freeschoolMeals: boolean
    englishAsAdditional: boolean
    medicalConditions: JsonValue | null
    dietaryRequirements: JsonValue | null
    houseGroup: string | null
    dataRetentionUntil: Date
    consentGiven: boolean
    consentGivenBy: string | null
    consentDate: Date | null
    consentWithdrawn: boolean
    createdAt: Date
    updatedAt: Date
    _count: StudentCountAggregateOutputType | null
    _avg: StudentAvgAggregateOutputType | null
    _sum: StudentSumAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    preferredName?: boolean
    dateOfBirth?: boolean
    pupilId?: boolean
    admissionNumber?: boolean
    yearGroup?: boolean
    classId?: boolean
    admissionDate?: boolean
    leavingDate?: boolean
    uln?: boolean
    upn?: boolean
    sen?: boolean
    senCategory?: boolean
    senSupport?: boolean
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: boolean
    dietaryRequirements?: boolean
    houseGroup?: boolean
    dataRetentionUntil?: boolean
    consentGiven?: boolean
    consentGivenBy?: boolean
    consentDate?: boolean
    consentWithdrawn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentStudents?: boolean | Student$parentStudentsArgs<ExtArgs>
    homeworkCompletions?: boolean | Student$homeworkCompletionsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Student$userArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    preferredName?: boolean
    dateOfBirth?: boolean
    pupilId?: boolean
    admissionNumber?: boolean
    yearGroup?: boolean
    classId?: boolean
    admissionDate?: boolean
    leavingDate?: boolean
    uln?: boolean
    upn?: boolean
    sen?: boolean
    senCategory?: boolean
    senSupport?: boolean
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: boolean
    dietaryRequirements?: boolean
    houseGroup?: boolean
    dataRetentionUntil?: boolean
    consentGiven?: boolean
    consentGivenBy?: boolean
    consentDate?: boolean
    consentWithdrawn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Student$userArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    preferredName?: boolean
    dateOfBirth?: boolean
    pupilId?: boolean
    admissionNumber?: boolean
    yearGroup?: boolean
    classId?: boolean
    admissionDate?: boolean
    leavingDate?: boolean
    uln?: boolean
    upn?: boolean
    sen?: boolean
    senCategory?: boolean
    senSupport?: boolean
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: boolean
    dietaryRequirements?: boolean
    houseGroup?: boolean
    dataRetentionUntil?: boolean
    consentGiven?: boolean
    consentGivenBy?: boolean
    consentDate?: boolean
    consentWithdrawn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentStudents?: boolean | Student$parentStudentsArgs<ExtArgs>
    homeworkCompletions?: boolean | Student$homeworkCompletionsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Student$userArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | Student$userArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      parentStudents: Prisma.$ParentStudentPayload<ExtArgs>[]
      homeworkCompletions: Prisma.$HomeworkCompletionPayload<ExtArgs>[]
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      userId: string | null
      firstName: string
      lastName: string
      preferredName: string | null
      dateOfBirth: Date
      pupilId: string
      admissionNumber: string | null
      yearGroup: number
      classId: string
      admissionDate: Date
      leavingDate: Date | null
      uln: string | null
      upn: string | null
      sen: boolean
      senCategory: string | null
      senSupport: Prisma.JsonValue | null
      pupilPremium: boolean
      freeschoolMeals: boolean
      englishAsAdditional: boolean
      medicalConditions: Prisma.JsonValue | null
      dietaryRequirements: Prisma.JsonValue | null
      houseGroup: string | null
      dataRetentionUntil: Date
      consentGiven: boolean
      consentGivenBy: string | null
      consentDate: Date | null
      consentWithdrawn: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentWithIdOnly = await prisma.student.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parentStudents<T extends Student$parentStudentsArgs<ExtArgs> = {}>(args?: Subset<T, Student$parentStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findMany"> | Null>
    homeworkCompletions<T extends Student$homeworkCompletionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$homeworkCompletionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findMany"> | Null>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends Student$userArgs<ExtArgs> = {}>(args?: Subset<T, Student$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly id: FieldRef<"Student", 'String'>
    readonly schoolId: FieldRef<"Student", 'String'>
    readonly userId: FieldRef<"Student", 'String'>
    readonly firstName: FieldRef<"Student", 'String'>
    readonly lastName: FieldRef<"Student", 'String'>
    readonly preferredName: FieldRef<"Student", 'String'>
    readonly dateOfBirth: FieldRef<"Student", 'DateTime'>
    readonly pupilId: FieldRef<"Student", 'String'>
    readonly admissionNumber: FieldRef<"Student", 'String'>
    readonly yearGroup: FieldRef<"Student", 'Int'>
    readonly classId: FieldRef<"Student", 'String'>
    readonly admissionDate: FieldRef<"Student", 'DateTime'>
    readonly leavingDate: FieldRef<"Student", 'DateTime'>
    readonly uln: FieldRef<"Student", 'String'>
    readonly upn: FieldRef<"Student", 'String'>
    readonly sen: FieldRef<"Student", 'Boolean'>
    readonly senCategory: FieldRef<"Student", 'String'>
    readonly senSupport: FieldRef<"Student", 'Json'>
    readonly pupilPremium: FieldRef<"Student", 'Boolean'>
    readonly freeschoolMeals: FieldRef<"Student", 'Boolean'>
    readonly englishAsAdditional: FieldRef<"Student", 'Boolean'>
    readonly medicalConditions: FieldRef<"Student", 'Json'>
    readonly dietaryRequirements: FieldRef<"Student", 'Json'>
    readonly houseGroup: FieldRef<"Student", 'String'>
    readonly dataRetentionUntil: FieldRef<"Student", 'DateTime'>
    readonly consentGiven: FieldRef<"Student", 'Boolean'>
    readonly consentGivenBy: FieldRef<"Student", 'String'>
    readonly consentDate: FieldRef<"Student", 'DateTime'>
    readonly consentWithdrawn: FieldRef<"Student", 'Boolean'>
    readonly createdAt: FieldRef<"Student", 'DateTime'>
    readonly updatedAt: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }

  /**
   * Student.parentStudents
   */
  export type Student$parentStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    where?: ParentStudentWhereInput
    orderBy?: ParentStudentOrderByWithRelationInput | ParentStudentOrderByWithRelationInput[]
    cursor?: ParentStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParentStudentScalarFieldEnum | ParentStudentScalarFieldEnum[]
  }

  /**
   * Student.homeworkCompletions
   */
  export type Student$homeworkCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    where?: HomeworkCompletionWhereInput
    orderBy?: HomeworkCompletionOrderByWithRelationInput | HomeworkCompletionOrderByWithRelationInput[]
    cursor?: HomeworkCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkCompletionScalarFieldEnum | HomeworkCompletionScalarFieldEnum[]
  }

  /**
   * Student.user
   */
  export type Student$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Parent
   */

  export type AggregateParent = {
    _count: ParentCountAggregateOutputType | null
    _avg: ParentAvgAggregateOutputType | null
    _sum: ParentSumAggregateOutputType | null
    _min: ParentMinAggregateOutputType | null
    _max: ParentMaxAggregateOutputType | null
  }

  export type ParentAvgAggregateOutputType = {
    priority: number | null
  }

  export type ParentSumAggregateOutputType = {
    priority: number | null
  }

  export type ParentMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    title: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    alternativeEmail: string | null
    mobilePhone: string | null
    homePhone: string | null
    workPhone: string | null
    addressLine1: string | null
    addressLine2: string | null
    town: string | null
    county: string | null
    postcode: string | null
    isEmergencyContact: boolean | null
    priority: number | null
    preferredContact: $Enums.ContactMethod | null
    canReceiveSMS: boolean | null
    canReceiveEmail: boolean | null
    canReceivePhoneCalls: boolean | null
    canCollectChild: boolean | null
    canConsentToTrips: boolean | null
    canAccessOnlineInfo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    title: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    alternativeEmail: string | null
    mobilePhone: string | null
    homePhone: string | null
    workPhone: string | null
    addressLine1: string | null
    addressLine2: string | null
    town: string | null
    county: string | null
    postcode: string | null
    isEmergencyContact: boolean | null
    priority: number | null
    preferredContact: $Enums.ContactMethod | null
    canReceiveSMS: boolean | null
    canReceiveEmail: boolean | null
    canReceivePhoneCalls: boolean | null
    canCollectChild: boolean | null
    canConsentToTrips: boolean | null
    canAccessOnlineInfo: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentCountAggregateOutputType = {
    id: number
    schoolId: number
    userId: number
    title: number
    firstName: number
    lastName: number
    email: number
    alternativeEmail: number
    mobilePhone: number
    homePhone: number
    workPhone: number
    addressLine1: number
    addressLine2: number
    town: number
    county: number
    postcode: number
    isEmergencyContact: number
    priority: number
    preferredContact: number
    canReceiveSMS: number
    canReceiveEmail: number
    canReceivePhoneCalls: number
    canCollectChild: number
    canConsentToTrips: number
    canAccessOnlineInfo: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParentAvgAggregateInputType = {
    priority?: true
  }

  export type ParentSumAggregateInputType = {
    priority?: true
  }

  export type ParentMinAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    title?: true
    firstName?: true
    lastName?: true
    email?: true
    alternativeEmail?: true
    mobilePhone?: true
    homePhone?: true
    workPhone?: true
    addressLine1?: true
    addressLine2?: true
    town?: true
    county?: true
    postcode?: true
    isEmergencyContact?: true
    priority?: true
    preferredContact?: true
    canReceiveSMS?: true
    canReceiveEmail?: true
    canReceivePhoneCalls?: true
    canCollectChild?: true
    canConsentToTrips?: true
    canAccessOnlineInfo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentMaxAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    title?: true
    firstName?: true
    lastName?: true
    email?: true
    alternativeEmail?: true
    mobilePhone?: true
    homePhone?: true
    workPhone?: true
    addressLine1?: true
    addressLine2?: true
    town?: true
    county?: true
    postcode?: true
    isEmergencyContact?: true
    priority?: true
    preferredContact?: true
    canReceiveSMS?: true
    canReceiveEmail?: true
    canReceivePhoneCalls?: true
    canCollectChild?: true
    canConsentToTrips?: true
    canAccessOnlineInfo?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentCountAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    title?: true
    firstName?: true
    lastName?: true
    email?: true
    alternativeEmail?: true
    mobilePhone?: true
    homePhone?: true
    workPhone?: true
    addressLine1?: true
    addressLine2?: true
    town?: true
    county?: true
    postcode?: true
    isEmergencyContact?: true
    priority?: true
    preferredContact?: true
    canReceiveSMS?: true
    canReceiveEmail?: true
    canReceivePhoneCalls?: true
    canCollectChild?: true
    canConsentToTrips?: true
    canAccessOnlineInfo?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parent to aggregate.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Parents
    **/
    _count?: true | ParentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParentMaxAggregateInputType
  }

  export type GetParentAggregateType<T extends ParentAggregateArgs> = {
        [P in keyof T & keyof AggregateParent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParent[P]>
      : GetScalarType<T[P], AggregateParent[P]>
  }




  export type ParentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentWhereInput
    orderBy?: ParentOrderByWithAggregationInput | ParentOrderByWithAggregationInput[]
    by: ParentScalarFieldEnum[] | ParentScalarFieldEnum
    having?: ParentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParentCountAggregateInputType | true
    _avg?: ParentAvgAggregateInputType
    _sum?: ParentSumAggregateInputType
    _min?: ParentMinAggregateInputType
    _max?: ParentMaxAggregateInputType
  }

  export type ParentGroupByOutputType = {
    id: string
    schoolId: string
    userId: string
    title: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail: string | null
    mobilePhone: string | null
    homePhone: string | null
    workPhone: string | null
    addressLine1: string | null
    addressLine2: string | null
    town: string | null
    county: string | null
    postcode: string | null
    isEmergencyContact: boolean
    priority: number | null
    preferredContact: $Enums.ContactMethod
    canReceiveSMS: boolean
    canReceiveEmail: boolean
    canReceivePhoneCalls: boolean
    canCollectChild: boolean
    canConsentToTrips: boolean
    canAccessOnlineInfo: boolean
    createdAt: Date
    updatedAt: Date
    _count: ParentCountAggregateOutputType | null
    _avg: ParentAvgAggregateOutputType | null
    _sum: ParentSumAggregateOutputType | null
    _min: ParentMinAggregateOutputType | null
    _max: ParentMaxAggregateOutputType | null
  }

  type GetParentGroupByPayload<T extends ParentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParentGroupByOutputType[P]>
            : GetScalarType<T[P], ParentGroupByOutputType[P]>
        }
      >
    >


  export type ParentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    title?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    alternativeEmail?: boolean
    mobilePhone?: boolean
    homePhone?: boolean
    workPhone?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    town?: boolean
    county?: boolean
    postcode?: boolean
    isEmergencyContact?: boolean
    priority?: boolean
    preferredContact?: boolean
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parentStudents?: boolean | Parent$parentStudentsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ParentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parent"]>

  export type ParentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    title?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    alternativeEmail?: boolean
    mobilePhone?: boolean
    homePhone?: boolean
    workPhone?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    town?: boolean
    county?: boolean
    postcode?: boolean
    isEmergencyContact?: boolean
    priority?: boolean
    preferredContact?: boolean
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parent"]>

  export type ParentSelectScalar = {
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    title?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    alternativeEmail?: boolean
    mobilePhone?: boolean
    homePhone?: boolean
    workPhone?: boolean
    addressLine1?: boolean
    addressLine2?: boolean
    town?: boolean
    county?: boolean
    postcode?: boolean
    isEmergencyContact?: boolean
    priority?: boolean
    preferredContact?: boolean
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parentStudents?: boolean | Parent$parentStudentsArgs<ExtArgs>
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ParentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ParentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ParentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Parent"
    objects: {
      parentStudents: Prisma.$ParentStudentPayload<ExtArgs>[]
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      userId: string
      title: string | null
      firstName: string
      lastName: string
      email: string
      alternativeEmail: string | null
      mobilePhone: string | null
      homePhone: string | null
      workPhone: string | null
      addressLine1: string | null
      addressLine2: string | null
      town: string | null
      county: string | null
      postcode: string | null
      isEmergencyContact: boolean
      priority: number | null
      preferredContact: $Enums.ContactMethod
      canReceiveSMS: boolean
      canReceiveEmail: boolean
      canReceivePhoneCalls: boolean
      canCollectChild: boolean
      canConsentToTrips: boolean
      canAccessOnlineInfo: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["parent"]>
    composites: {}
  }

  type ParentGetPayload<S extends boolean | null | undefined | ParentDefaultArgs> = $Result.GetResult<Prisma.$ParentPayload, S>

  type ParentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParentCountAggregateInputType | true
    }

  export interface ParentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Parent'], meta: { name: 'Parent' } }
    /**
     * Find zero or one Parent that matches the filter.
     * @param {ParentFindUniqueArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParentFindUniqueArgs>(args: SelectSubset<T, ParentFindUniqueArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Parent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParentFindUniqueOrThrowArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParentFindUniqueOrThrowArgs>(args: SelectSubset<T, ParentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Parent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindFirstArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParentFindFirstArgs>(args?: SelectSubset<T, ParentFindFirstArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Parent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindFirstOrThrowArgs} args - Arguments to find a Parent
     * @example
     * // Get one Parent
     * const parent = await prisma.parent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParentFindFirstOrThrowArgs>(args?: SelectSubset<T, ParentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Parents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Parents
     * const parents = await prisma.parent.findMany()
     * 
     * // Get first 10 Parents
     * const parents = await prisma.parent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parentWithIdOnly = await prisma.parent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParentFindManyArgs>(args?: SelectSubset<T, ParentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Parent.
     * @param {ParentCreateArgs} args - Arguments to create a Parent.
     * @example
     * // Create one Parent
     * const Parent = await prisma.parent.create({
     *   data: {
     *     // ... data to create a Parent
     *   }
     * })
     * 
     */
    create<T extends ParentCreateArgs>(args: SelectSubset<T, ParentCreateArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Parents.
     * @param {ParentCreateManyArgs} args - Arguments to create many Parents.
     * @example
     * // Create many Parents
     * const parent = await prisma.parent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParentCreateManyArgs>(args?: SelectSubset<T, ParentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Parents and returns the data saved in the database.
     * @param {ParentCreateManyAndReturnArgs} args - Arguments to create many Parents.
     * @example
     * // Create many Parents
     * const parent = await prisma.parent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Parents and only return the `id`
     * const parentWithIdOnly = await prisma.parent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParentCreateManyAndReturnArgs>(args?: SelectSubset<T, ParentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Parent.
     * @param {ParentDeleteArgs} args - Arguments to delete one Parent.
     * @example
     * // Delete one Parent
     * const Parent = await prisma.parent.delete({
     *   where: {
     *     // ... filter to delete one Parent
     *   }
     * })
     * 
     */
    delete<T extends ParentDeleteArgs>(args: SelectSubset<T, ParentDeleteArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Parent.
     * @param {ParentUpdateArgs} args - Arguments to update one Parent.
     * @example
     * // Update one Parent
     * const parent = await prisma.parent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParentUpdateArgs>(args: SelectSubset<T, ParentUpdateArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Parents.
     * @param {ParentDeleteManyArgs} args - Arguments to filter Parents to delete.
     * @example
     * // Delete a few Parents
     * const { count } = await prisma.parent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParentDeleteManyArgs>(args?: SelectSubset<T, ParentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Parents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Parents
     * const parent = await prisma.parent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParentUpdateManyArgs>(args: SelectSubset<T, ParentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Parent.
     * @param {ParentUpsertArgs} args - Arguments to update or create a Parent.
     * @example
     * // Update or create a Parent
     * const parent = await prisma.parent.upsert({
     *   create: {
     *     // ... data to create a Parent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Parent we want to update
     *   }
     * })
     */
    upsert<T extends ParentUpsertArgs>(args: SelectSubset<T, ParentUpsertArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Parents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentCountArgs} args - Arguments to filter Parents to count.
     * @example
     * // Count the number of Parents
     * const count = await prisma.parent.count({
     *   where: {
     *     // ... the filter for the Parents we want to count
     *   }
     * })
    **/
    count<T extends ParentCountArgs>(
      args?: Subset<T, ParentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Parent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParentAggregateArgs>(args: Subset<T, ParentAggregateArgs>): Prisma.PrismaPromise<GetParentAggregateType<T>>

    /**
     * Group by Parent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParentGroupByArgs['orderBy'] }
        : { orderBy?: ParentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Parent model
   */
  readonly fields: ParentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Parent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parentStudents<T extends Parent$parentStudentsArgs<ExtArgs> = {}>(args?: Subset<T, Parent$parentStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findMany"> | Null>
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Parent model
   */ 
  interface ParentFieldRefs {
    readonly id: FieldRef<"Parent", 'String'>
    readonly schoolId: FieldRef<"Parent", 'String'>
    readonly userId: FieldRef<"Parent", 'String'>
    readonly title: FieldRef<"Parent", 'String'>
    readonly firstName: FieldRef<"Parent", 'String'>
    readonly lastName: FieldRef<"Parent", 'String'>
    readonly email: FieldRef<"Parent", 'String'>
    readonly alternativeEmail: FieldRef<"Parent", 'String'>
    readonly mobilePhone: FieldRef<"Parent", 'String'>
    readonly homePhone: FieldRef<"Parent", 'String'>
    readonly workPhone: FieldRef<"Parent", 'String'>
    readonly addressLine1: FieldRef<"Parent", 'String'>
    readonly addressLine2: FieldRef<"Parent", 'String'>
    readonly town: FieldRef<"Parent", 'String'>
    readonly county: FieldRef<"Parent", 'String'>
    readonly postcode: FieldRef<"Parent", 'String'>
    readonly isEmergencyContact: FieldRef<"Parent", 'Boolean'>
    readonly priority: FieldRef<"Parent", 'Int'>
    readonly preferredContact: FieldRef<"Parent", 'ContactMethod'>
    readonly canReceiveSMS: FieldRef<"Parent", 'Boolean'>
    readonly canReceiveEmail: FieldRef<"Parent", 'Boolean'>
    readonly canReceivePhoneCalls: FieldRef<"Parent", 'Boolean'>
    readonly canCollectChild: FieldRef<"Parent", 'Boolean'>
    readonly canConsentToTrips: FieldRef<"Parent", 'Boolean'>
    readonly canAccessOnlineInfo: FieldRef<"Parent", 'Boolean'>
    readonly createdAt: FieldRef<"Parent", 'DateTime'>
    readonly updatedAt: FieldRef<"Parent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Parent findUnique
   */
  export type ParentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent findUniqueOrThrow
   */
  export type ParentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent findFirst
   */
  export type ParentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parents.
     */
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent findFirstOrThrow
   */
  export type ParentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parent to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Parents.
     */
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent findMany
   */
  export type ParentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter, which Parents to fetch.
     */
    where?: ParentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Parents to fetch.
     */
    orderBy?: ParentOrderByWithRelationInput | ParentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Parents.
     */
    cursor?: ParentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Parents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Parents.
     */
    skip?: number
    distinct?: ParentScalarFieldEnum | ParentScalarFieldEnum[]
  }

  /**
   * Parent create
   */
  export type ParentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The data needed to create a Parent.
     */
    data: XOR<ParentCreateInput, ParentUncheckedCreateInput>
  }

  /**
   * Parent createMany
   */
  export type ParentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Parents.
     */
    data: ParentCreateManyInput | ParentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Parent createManyAndReturn
   */
  export type ParentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Parents.
     */
    data: ParentCreateManyInput | ParentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Parent update
   */
  export type ParentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The data needed to update a Parent.
     */
    data: XOR<ParentUpdateInput, ParentUncheckedUpdateInput>
    /**
     * Choose, which Parent to update.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent updateMany
   */
  export type ParentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Parents.
     */
    data: XOR<ParentUpdateManyMutationInput, ParentUncheckedUpdateManyInput>
    /**
     * Filter which Parents to update
     */
    where?: ParentWhereInput
  }

  /**
   * Parent upsert
   */
  export type ParentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * The filter to search for the Parent to update in case it exists.
     */
    where: ParentWhereUniqueInput
    /**
     * In case the Parent found by the `where` argument doesn't exist, create a new Parent with this data.
     */
    create: XOR<ParentCreateInput, ParentUncheckedCreateInput>
    /**
     * In case the Parent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParentUpdateInput, ParentUncheckedUpdateInput>
  }

  /**
   * Parent delete
   */
  export type ParentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
    /**
     * Filter which Parent to delete.
     */
    where: ParentWhereUniqueInput
  }

  /**
   * Parent deleteMany
   */
  export type ParentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Parents to delete
     */
    where?: ParentWhereInput
  }

  /**
   * Parent.parentStudents
   */
  export type Parent$parentStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    where?: ParentStudentWhereInput
    orderBy?: ParentStudentOrderByWithRelationInput | ParentStudentOrderByWithRelationInput[]
    cursor?: ParentStudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ParentStudentScalarFieldEnum | ParentStudentScalarFieldEnum[]
  }

  /**
   * Parent without action
   */
  export type ParentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Parent
     */
    select?: ParentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentInclude<ExtArgs> | null
  }


  /**
   * Model SchoolAdmin
   */

  export type AggregateSchoolAdmin = {
    _count: SchoolAdminCountAggregateOutputType | null
    _min: SchoolAdminMinAggregateOutputType | null
    _max: SchoolAdminMaxAggregateOutputType | null
  }

  export type SchoolAdminMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    jobTitle: string | null
    adminLevel: $Enums.AdminLevel | null
    canManageUsers: boolean | null
    canManageClasses: boolean | null
    canManageClubs: boolean | null
    canViewAnalytics: boolean | null
    canManageSettings: boolean | null
    canExportData: boolean | null
    canAccessAllClasses: boolean | null
    canViewAllStudents: boolean | null
    canModifyHomework: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolAdminMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    jobTitle: string | null
    adminLevel: $Enums.AdminLevel | null
    canManageUsers: boolean | null
    canManageClasses: boolean | null
    canManageClubs: boolean | null
    canViewAnalytics: boolean | null
    canManageSettings: boolean | null
    canExportData: boolean | null
    canAccessAllClasses: boolean | null
    canViewAllStudents: boolean | null
    canModifyHomework: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SchoolAdminCountAggregateOutputType = {
    id: number
    schoolId: number
    userId: number
    firstName: number
    lastName: number
    jobTitle: number
    adminLevel: number
    canManageUsers: number
    canManageClasses: number
    canManageClubs: number
    canViewAnalytics: number
    canManageSettings: number
    canExportData: number
    canAccessAllClasses: number
    canViewAllStudents: number
    canModifyHomework: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SchoolAdminMinAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    adminLevel?: true
    canManageUsers?: true
    canManageClasses?: true
    canManageClubs?: true
    canViewAnalytics?: true
    canManageSettings?: true
    canExportData?: true
    canAccessAllClasses?: true
    canViewAllStudents?: true
    canModifyHomework?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolAdminMaxAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    adminLevel?: true
    canManageUsers?: true
    canManageClasses?: true
    canManageClubs?: true
    canViewAnalytics?: true
    canManageSettings?: true
    canExportData?: true
    canAccessAllClasses?: true
    canViewAllStudents?: true
    canModifyHomework?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SchoolAdminCountAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    firstName?: true
    lastName?: true
    jobTitle?: true
    adminLevel?: true
    canManageUsers?: true
    canManageClasses?: true
    canManageClubs?: true
    canViewAnalytics?: true
    canManageSettings?: true
    canExportData?: true
    canAccessAllClasses?: true
    canViewAllStudents?: true
    canModifyHomework?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SchoolAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolAdmin to aggregate.
     */
    where?: SchoolAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolAdmins to fetch.
     */
    orderBy?: SchoolAdminOrderByWithRelationInput | SchoolAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolAdmins
    **/
    _count?: true | SchoolAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolAdminMaxAggregateInputType
  }

  export type GetSchoolAdminAggregateType<T extends SchoolAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolAdmin[P]>
      : GetScalarType<T[P], AggregateSchoolAdmin[P]>
  }




  export type SchoolAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolAdminWhereInput
    orderBy?: SchoolAdminOrderByWithAggregationInput | SchoolAdminOrderByWithAggregationInput[]
    by: SchoolAdminScalarFieldEnum[] | SchoolAdminScalarFieldEnum
    having?: SchoolAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolAdminCountAggregateInputType | true
    _min?: SchoolAdminMinAggregateInputType
    _max?: SchoolAdminMaxAggregateInputType
  }

  export type SchoolAdminGroupByOutputType = {
    id: string
    schoolId: string
    userId: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel: $Enums.AdminLevel
    canManageUsers: boolean
    canManageClasses: boolean
    canManageClubs: boolean
    canViewAnalytics: boolean
    canManageSettings: boolean
    canExportData: boolean
    canAccessAllClasses: boolean
    canViewAllStudents: boolean
    canModifyHomework: boolean
    createdAt: Date
    updatedAt: Date
    _count: SchoolAdminCountAggregateOutputType | null
    _min: SchoolAdminMinAggregateOutputType | null
    _max: SchoolAdminMaxAggregateOutputType | null
  }

  type GetSchoolAdminGroupByPayload<T extends SchoolAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolAdminGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolAdminGroupByOutputType[P]>
        }
      >
    >


  export type SchoolAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    adminLevel?: boolean
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolAdmin"]>

  export type SchoolAdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    adminLevel?: boolean
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolAdmin"]>

  export type SchoolAdminSelectScalar = {
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    jobTitle?: boolean
    adminLevel?: boolean
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SchoolAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SchoolAdminIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SchoolAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchoolAdmin"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      userId: string
      firstName: string
      lastName: string
      jobTitle: string
      adminLevel: $Enums.AdminLevel
      canManageUsers: boolean
      canManageClasses: boolean
      canManageClubs: boolean
      canViewAnalytics: boolean
      canManageSettings: boolean
      canExportData: boolean
      canAccessAllClasses: boolean
      canViewAllStudents: boolean
      canModifyHomework: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schoolAdmin"]>
    composites: {}
  }

  type SchoolAdminGetPayload<S extends boolean | null | undefined | SchoolAdminDefaultArgs> = $Result.GetResult<Prisma.$SchoolAdminPayload, S>

  type SchoolAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SchoolAdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SchoolAdminCountAggregateInputType | true
    }

  export interface SchoolAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolAdmin'], meta: { name: 'SchoolAdmin' } }
    /**
     * Find zero or one SchoolAdmin that matches the filter.
     * @param {SchoolAdminFindUniqueArgs} args - Arguments to find a SchoolAdmin
     * @example
     * // Get one SchoolAdmin
     * const schoolAdmin = await prisma.schoolAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolAdminFindUniqueArgs>(args: SelectSubset<T, SchoolAdminFindUniqueArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SchoolAdmin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SchoolAdminFindUniqueOrThrowArgs} args - Arguments to find a SchoolAdmin
     * @example
     * // Get one SchoolAdmin
     * const schoolAdmin = await prisma.schoolAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SchoolAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAdminFindFirstArgs} args - Arguments to find a SchoolAdmin
     * @example
     * // Get one SchoolAdmin
     * const schoolAdmin = await prisma.schoolAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolAdminFindFirstArgs>(args?: SelectSubset<T, SchoolAdminFindFirstArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SchoolAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAdminFindFirstOrThrowArgs} args - Arguments to find a SchoolAdmin
     * @example
     * // Get one SchoolAdmin
     * const schoolAdmin = await prisma.schoolAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SchoolAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolAdmins
     * const schoolAdmins = await prisma.schoolAdmin.findMany()
     * 
     * // Get first 10 SchoolAdmins
     * const schoolAdmins = await prisma.schoolAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolAdminWithIdOnly = await prisma.schoolAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolAdminFindManyArgs>(args?: SelectSubset<T, SchoolAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SchoolAdmin.
     * @param {SchoolAdminCreateArgs} args - Arguments to create a SchoolAdmin.
     * @example
     * // Create one SchoolAdmin
     * const SchoolAdmin = await prisma.schoolAdmin.create({
     *   data: {
     *     // ... data to create a SchoolAdmin
     *   }
     * })
     * 
     */
    create<T extends SchoolAdminCreateArgs>(args: SelectSubset<T, SchoolAdminCreateArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SchoolAdmins.
     * @param {SchoolAdminCreateManyArgs} args - Arguments to create many SchoolAdmins.
     * @example
     * // Create many SchoolAdmins
     * const schoolAdmin = await prisma.schoolAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolAdminCreateManyArgs>(args?: SelectSubset<T, SchoolAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SchoolAdmins and returns the data saved in the database.
     * @param {SchoolAdminCreateManyAndReturnArgs} args - Arguments to create many SchoolAdmins.
     * @example
     * // Create many SchoolAdmins
     * const schoolAdmin = await prisma.schoolAdmin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SchoolAdmins and only return the `id`
     * const schoolAdminWithIdOnly = await prisma.schoolAdmin.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolAdminCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolAdminCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SchoolAdmin.
     * @param {SchoolAdminDeleteArgs} args - Arguments to delete one SchoolAdmin.
     * @example
     * // Delete one SchoolAdmin
     * const SchoolAdmin = await prisma.schoolAdmin.delete({
     *   where: {
     *     // ... filter to delete one SchoolAdmin
     *   }
     * })
     * 
     */
    delete<T extends SchoolAdminDeleteArgs>(args: SelectSubset<T, SchoolAdminDeleteArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SchoolAdmin.
     * @param {SchoolAdminUpdateArgs} args - Arguments to update one SchoolAdmin.
     * @example
     * // Update one SchoolAdmin
     * const schoolAdmin = await prisma.schoolAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolAdminUpdateArgs>(args: SelectSubset<T, SchoolAdminUpdateArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SchoolAdmins.
     * @param {SchoolAdminDeleteManyArgs} args - Arguments to filter SchoolAdmins to delete.
     * @example
     * // Delete a few SchoolAdmins
     * const { count } = await prisma.schoolAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolAdminDeleteManyArgs>(args?: SelectSubset<T, SchoolAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolAdmins
     * const schoolAdmin = await prisma.schoolAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolAdminUpdateManyArgs>(args: SelectSubset<T, SchoolAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SchoolAdmin.
     * @param {SchoolAdminUpsertArgs} args - Arguments to update or create a SchoolAdmin.
     * @example
     * // Update or create a SchoolAdmin
     * const schoolAdmin = await prisma.schoolAdmin.upsert({
     *   create: {
     *     // ... data to create a SchoolAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolAdmin we want to update
     *   }
     * })
     */
    upsert<T extends SchoolAdminUpsertArgs>(args: SelectSubset<T, SchoolAdminUpsertArgs<ExtArgs>>): Prisma__SchoolAdminClient<$Result.GetResult<Prisma.$SchoolAdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SchoolAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAdminCountArgs} args - Arguments to filter SchoolAdmins to count.
     * @example
     * // Count the number of SchoolAdmins
     * const count = await prisma.schoolAdmin.count({
     *   where: {
     *     // ... the filter for the SchoolAdmins we want to count
     *   }
     * })
    **/
    count<T extends SchoolAdminCountArgs>(
      args?: Subset<T, SchoolAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolAdminAggregateArgs>(args: Subset<T, SchoolAdminAggregateArgs>): Prisma.PrismaPromise<GetSchoolAdminAggregateType<T>>

    /**
     * Group by SchoolAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolAdminGroupByArgs['orderBy'] }
        : { orderBy?: SchoolAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchoolAdmin model
   */
  readonly fields: SchoolAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SchoolAdmin model
   */ 
  interface SchoolAdminFieldRefs {
    readonly id: FieldRef<"SchoolAdmin", 'String'>
    readonly schoolId: FieldRef<"SchoolAdmin", 'String'>
    readonly userId: FieldRef<"SchoolAdmin", 'String'>
    readonly firstName: FieldRef<"SchoolAdmin", 'String'>
    readonly lastName: FieldRef<"SchoolAdmin", 'String'>
    readonly jobTitle: FieldRef<"SchoolAdmin", 'String'>
    readonly adminLevel: FieldRef<"SchoolAdmin", 'AdminLevel'>
    readonly canManageUsers: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canManageClasses: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canManageClubs: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canViewAnalytics: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canManageSettings: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canExportData: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canAccessAllClasses: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canViewAllStudents: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly canModifyHomework: FieldRef<"SchoolAdmin", 'Boolean'>
    readonly createdAt: FieldRef<"SchoolAdmin", 'DateTime'>
    readonly updatedAt: FieldRef<"SchoolAdmin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SchoolAdmin findUnique
   */
  export type SchoolAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * Filter, which SchoolAdmin to fetch.
     */
    where: SchoolAdminWhereUniqueInput
  }

  /**
   * SchoolAdmin findUniqueOrThrow
   */
  export type SchoolAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * Filter, which SchoolAdmin to fetch.
     */
    where: SchoolAdminWhereUniqueInput
  }

  /**
   * SchoolAdmin findFirst
   */
  export type SchoolAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * Filter, which SchoolAdmin to fetch.
     */
    where?: SchoolAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolAdmins to fetch.
     */
    orderBy?: SchoolAdminOrderByWithRelationInput | SchoolAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolAdmins.
     */
    cursor?: SchoolAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolAdmins.
     */
    distinct?: SchoolAdminScalarFieldEnum | SchoolAdminScalarFieldEnum[]
  }

  /**
   * SchoolAdmin findFirstOrThrow
   */
  export type SchoolAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * Filter, which SchoolAdmin to fetch.
     */
    where?: SchoolAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolAdmins to fetch.
     */
    orderBy?: SchoolAdminOrderByWithRelationInput | SchoolAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolAdmins.
     */
    cursor?: SchoolAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolAdmins.
     */
    distinct?: SchoolAdminScalarFieldEnum | SchoolAdminScalarFieldEnum[]
  }

  /**
   * SchoolAdmin findMany
   */
  export type SchoolAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * Filter, which SchoolAdmins to fetch.
     */
    where?: SchoolAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolAdmins to fetch.
     */
    orderBy?: SchoolAdminOrderByWithRelationInput | SchoolAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolAdmins.
     */
    cursor?: SchoolAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolAdmins.
     */
    skip?: number
    distinct?: SchoolAdminScalarFieldEnum | SchoolAdminScalarFieldEnum[]
  }

  /**
   * SchoolAdmin create
   */
  export type SchoolAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a SchoolAdmin.
     */
    data: XOR<SchoolAdminCreateInput, SchoolAdminUncheckedCreateInput>
  }

  /**
   * SchoolAdmin createMany
   */
  export type SchoolAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchoolAdmins.
     */
    data: SchoolAdminCreateManyInput | SchoolAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SchoolAdmin createManyAndReturn
   */
  export type SchoolAdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SchoolAdmins.
     */
    data: SchoolAdminCreateManyInput | SchoolAdminCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchoolAdmin update
   */
  export type SchoolAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a SchoolAdmin.
     */
    data: XOR<SchoolAdminUpdateInput, SchoolAdminUncheckedUpdateInput>
    /**
     * Choose, which SchoolAdmin to update.
     */
    where: SchoolAdminWhereUniqueInput
  }

  /**
   * SchoolAdmin updateMany
   */
  export type SchoolAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchoolAdmins.
     */
    data: XOR<SchoolAdminUpdateManyMutationInput, SchoolAdminUncheckedUpdateManyInput>
    /**
     * Filter which SchoolAdmins to update
     */
    where?: SchoolAdminWhereInput
  }

  /**
   * SchoolAdmin upsert
   */
  export type SchoolAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the SchoolAdmin to update in case it exists.
     */
    where: SchoolAdminWhereUniqueInput
    /**
     * In case the SchoolAdmin found by the `where` argument doesn't exist, create a new SchoolAdmin with this data.
     */
    create: XOR<SchoolAdminCreateInput, SchoolAdminUncheckedCreateInput>
    /**
     * In case the SchoolAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolAdminUpdateInput, SchoolAdminUncheckedUpdateInput>
  }

  /**
   * SchoolAdmin delete
   */
  export type SchoolAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
    /**
     * Filter which SchoolAdmin to delete.
     */
    where: SchoolAdminWhereUniqueInput
  }

  /**
   * SchoolAdmin deleteMany
   */
  export type SchoolAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolAdmins to delete
     */
    where?: SchoolAdminWhereInput
  }

  /**
   * SchoolAdmin without action
   */
  export type SchoolAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolAdmin
     */
    select?: SchoolAdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolAdminInclude<ExtArgs> | null
  }


  /**
   * Model ParentStudent
   */

  export type AggregateParentStudent = {
    _count: ParentStudentCountAggregateOutputType | null
    _min: ParentStudentMinAggregateOutputType | null
    _max: ParentStudentMaxAggregateOutputType | null
  }

  export type ParentStudentMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    parentId: string | null
    studentId: string | null
    relationshipType: $Enums.ParentType | null
    isPrimaryContact: boolean | null
    isEmergencyContact: boolean | null
    hasParentalResponsibility: boolean | null
    canGiveConsent: boolean | null
    canCollectChild: boolean | null
    canAccessRecords: boolean | null
    receivesReports: boolean | null
    receivesNotifications: boolean | null
    canContactTeachers: boolean | null
    custodyArrangement: string | null
    restrictedAccess: boolean | null
    accessNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentStudentMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    parentId: string | null
    studentId: string | null
    relationshipType: $Enums.ParentType | null
    isPrimaryContact: boolean | null
    isEmergencyContact: boolean | null
    hasParentalResponsibility: boolean | null
    canGiveConsent: boolean | null
    canCollectChild: boolean | null
    canAccessRecords: boolean | null
    receivesReports: boolean | null
    receivesNotifications: boolean | null
    canContactTeachers: boolean | null
    custodyArrangement: string | null
    restrictedAccess: boolean | null
    accessNotes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ParentStudentCountAggregateOutputType = {
    id: number
    schoolId: number
    parentId: number
    studentId: number
    relationshipType: number
    isPrimaryContact: number
    isEmergencyContact: number
    hasParentalResponsibility: number
    canGiveConsent: number
    canCollectChild: number
    canAccessRecords: number
    receivesReports: number
    receivesNotifications: number
    canContactTeachers: number
    custodyArrangement: number
    restrictedAccess: number
    accessNotes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ParentStudentMinAggregateInputType = {
    id?: true
    schoolId?: true
    parentId?: true
    studentId?: true
    relationshipType?: true
    isPrimaryContact?: true
    isEmergencyContact?: true
    hasParentalResponsibility?: true
    canGiveConsent?: true
    canCollectChild?: true
    canAccessRecords?: true
    receivesReports?: true
    receivesNotifications?: true
    canContactTeachers?: true
    custodyArrangement?: true
    restrictedAccess?: true
    accessNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentStudentMaxAggregateInputType = {
    id?: true
    schoolId?: true
    parentId?: true
    studentId?: true
    relationshipType?: true
    isPrimaryContact?: true
    isEmergencyContact?: true
    hasParentalResponsibility?: true
    canGiveConsent?: true
    canCollectChild?: true
    canAccessRecords?: true
    receivesReports?: true
    receivesNotifications?: true
    canContactTeachers?: true
    custodyArrangement?: true
    restrictedAccess?: true
    accessNotes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ParentStudentCountAggregateInputType = {
    id?: true
    schoolId?: true
    parentId?: true
    studentId?: true
    relationshipType?: true
    isPrimaryContact?: true
    isEmergencyContact?: true
    hasParentalResponsibility?: true
    canGiveConsent?: true
    canCollectChild?: true
    canAccessRecords?: true
    receivesReports?: true
    receivesNotifications?: true
    canContactTeachers?: true
    custodyArrangement?: true
    restrictedAccess?: true
    accessNotes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ParentStudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParentStudent to aggregate.
     */
    where?: ParentStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudents to fetch.
     */
    orderBy?: ParentStudentOrderByWithRelationInput | ParentStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ParentStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ParentStudents
    **/
    _count?: true | ParentStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParentStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParentStudentMaxAggregateInputType
  }

  export type GetParentStudentAggregateType<T extends ParentStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateParentStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParentStudent[P]>
      : GetScalarType<T[P], AggregateParentStudent[P]>
  }




  export type ParentStudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ParentStudentWhereInput
    orderBy?: ParentStudentOrderByWithAggregationInput | ParentStudentOrderByWithAggregationInput[]
    by: ParentStudentScalarFieldEnum[] | ParentStudentScalarFieldEnum
    having?: ParentStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParentStudentCountAggregateInputType | true
    _min?: ParentStudentMinAggregateInputType
    _max?: ParentStudentMaxAggregateInputType
  }

  export type ParentStudentGroupByOutputType = {
    id: string
    schoolId: string
    parentId: string
    studentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact: boolean
    isEmergencyContact: boolean
    hasParentalResponsibility: boolean
    canGiveConsent: boolean
    canCollectChild: boolean
    canAccessRecords: boolean
    receivesReports: boolean
    receivesNotifications: boolean
    canContactTeachers: boolean
    custodyArrangement: string | null
    restrictedAccess: boolean
    accessNotes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ParentStudentCountAggregateOutputType | null
    _min: ParentStudentMinAggregateOutputType | null
    _max: ParentStudentMaxAggregateOutputType | null
  }

  type GetParentStudentGroupByPayload<T extends ParentStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ParentStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParentStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParentStudentGroupByOutputType[P]>
            : GetScalarType<T[P], ParentStudentGroupByOutputType[P]>
        }
      >
    >


  export type ParentStudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    parentId?: boolean
    studentId?: boolean
    relationshipType?: boolean
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: boolean
    restrictedAccess?: boolean
    accessNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parentStudent"]>

  export type ParentStudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    parentId?: boolean
    studentId?: boolean
    relationshipType?: boolean
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: boolean
    restrictedAccess?: boolean
    accessNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["parentStudent"]>

  export type ParentStudentSelectScalar = {
    id?: boolean
    schoolId?: boolean
    parentId?: boolean
    studentId?: boolean
    relationshipType?: boolean
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: boolean
    restrictedAccess?: boolean
    accessNotes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ParentStudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type ParentStudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    parent?: boolean | ParentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $ParentStudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ParentStudent"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      parent: Prisma.$ParentPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      parentId: string
      studentId: string
      relationshipType: $Enums.ParentType
      isPrimaryContact: boolean
      isEmergencyContact: boolean
      hasParentalResponsibility: boolean
      canGiveConsent: boolean
      canCollectChild: boolean
      canAccessRecords: boolean
      receivesReports: boolean
      receivesNotifications: boolean
      canContactTeachers: boolean
      custodyArrangement: string | null
      restrictedAccess: boolean
      accessNotes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["parentStudent"]>
    composites: {}
  }

  type ParentStudentGetPayload<S extends boolean | null | undefined | ParentStudentDefaultArgs> = $Result.GetResult<Prisma.$ParentStudentPayload, S>

  type ParentStudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ParentStudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ParentStudentCountAggregateInputType | true
    }

  export interface ParentStudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ParentStudent'], meta: { name: 'ParentStudent' } }
    /**
     * Find zero or one ParentStudent that matches the filter.
     * @param {ParentStudentFindUniqueArgs} args - Arguments to find a ParentStudent
     * @example
     * // Get one ParentStudent
     * const parentStudent = await prisma.parentStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ParentStudentFindUniqueArgs>(args: SelectSubset<T, ParentStudentFindUniqueArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ParentStudent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ParentStudentFindUniqueOrThrowArgs} args - Arguments to find a ParentStudent
     * @example
     * // Get one ParentStudent
     * const parentStudent = await prisma.parentStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ParentStudentFindUniqueOrThrowArgs>(args: SelectSubset<T, ParentStudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ParentStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentFindFirstArgs} args - Arguments to find a ParentStudent
     * @example
     * // Get one ParentStudent
     * const parentStudent = await prisma.parentStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ParentStudentFindFirstArgs>(args?: SelectSubset<T, ParentStudentFindFirstArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ParentStudent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentFindFirstOrThrowArgs} args - Arguments to find a ParentStudent
     * @example
     * // Get one ParentStudent
     * const parentStudent = await prisma.parentStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ParentStudentFindFirstOrThrowArgs>(args?: SelectSubset<T, ParentStudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ParentStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ParentStudents
     * const parentStudents = await prisma.parentStudent.findMany()
     * 
     * // Get first 10 ParentStudents
     * const parentStudents = await prisma.parentStudent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const parentStudentWithIdOnly = await prisma.parentStudent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ParentStudentFindManyArgs>(args?: SelectSubset<T, ParentStudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ParentStudent.
     * @param {ParentStudentCreateArgs} args - Arguments to create a ParentStudent.
     * @example
     * // Create one ParentStudent
     * const ParentStudent = await prisma.parentStudent.create({
     *   data: {
     *     // ... data to create a ParentStudent
     *   }
     * })
     * 
     */
    create<T extends ParentStudentCreateArgs>(args: SelectSubset<T, ParentStudentCreateArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ParentStudents.
     * @param {ParentStudentCreateManyArgs} args - Arguments to create many ParentStudents.
     * @example
     * // Create many ParentStudents
     * const parentStudent = await prisma.parentStudent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ParentStudentCreateManyArgs>(args?: SelectSubset<T, ParentStudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ParentStudents and returns the data saved in the database.
     * @param {ParentStudentCreateManyAndReturnArgs} args - Arguments to create many ParentStudents.
     * @example
     * // Create many ParentStudents
     * const parentStudent = await prisma.parentStudent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ParentStudents and only return the `id`
     * const parentStudentWithIdOnly = await prisma.parentStudent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ParentStudentCreateManyAndReturnArgs>(args?: SelectSubset<T, ParentStudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ParentStudent.
     * @param {ParentStudentDeleteArgs} args - Arguments to delete one ParentStudent.
     * @example
     * // Delete one ParentStudent
     * const ParentStudent = await prisma.parentStudent.delete({
     *   where: {
     *     // ... filter to delete one ParentStudent
     *   }
     * })
     * 
     */
    delete<T extends ParentStudentDeleteArgs>(args: SelectSubset<T, ParentStudentDeleteArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ParentStudent.
     * @param {ParentStudentUpdateArgs} args - Arguments to update one ParentStudent.
     * @example
     * // Update one ParentStudent
     * const parentStudent = await prisma.parentStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ParentStudentUpdateArgs>(args: SelectSubset<T, ParentStudentUpdateArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ParentStudents.
     * @param {ParentStudentDeleteManyArgs} args - Arguments to filter ParentStudents to delete.
     * @example
     * // Delete a few ParentStudents
     * const { count } = await prisma.parentStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ParentStudentDeleteManyArgs>(args?: SelectSubset<T, ParentStudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ParentStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ParentStudents
     * const parentStudent = await prisma.parentStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ParentStudentUpdateManyArgs>(args: SelectSubset<T, ParentStudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ParentStudent.
     * @param {ParentStudentUpsertArgs} args - Arguments to update or create a ParentStudent.
     * @example
     * // Update or create a ParentStudent
     * const parentStudent = await prisma.parentStudent.upsert({
     *   create: {
     *     // ... data to create a ParentStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ParentStudent we want to update
     *   }
     * })
     */
    upsert<T extends ParentStudentUpsertArgs>(args: SelectSubset<T, ParentStudentUpsertArgs<ExtArgs>>): Prisma__ParentStudentClient<$Result.GetResult<Prisma.$ParentStudentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ParentStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentCountArgs} args - Arguments to filter ParentStudents to count.
     * @example
     * // Count the number of ParentStudents
     * const count = await prisma.parentStudent.count({
     *   where: {
     *     // ... the filter for the ParentStudents we want to count
     *   }
     * })
    **/
    count<T extends ParentStudentCountArgs>(
      args?: Subset<T, ParentStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParentStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ParentStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParentStudentAggregateArgs>(args: Subset<T, ParentStudentAggregateArgs>): Prisma.PrismaPromise<GetParentStudentAggregateType<T>>

    /**
     * Group by ParentStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParentStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParentStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParentStudentGroupByArgs['orderBy'] }
        : { orderBy?: ParentStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParentStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParentStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ParentStudent model
   */
  readonly fields: ParentStudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ParentStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ParentStudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    parent<T extends ParentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ParentDefaultArgs<ExtArgs>>): Prisma__ParentClient<$Result.GetResult<Prisma.$ParentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ParentStudent model
   */ 
  interface ParentStudentFieldRefs {
    readonly id: FieldRef<"ParentStudent", 'String'>
    readonly schoolId: FieldRef<"ParentStudent", 'String'>
    readonly parentId: FieldRef<"ParentStudent", 'String'>
    readonly studentId: FieldRef<"ParentStudent", 'String'>
    readonly relationshipType: FieldRef<"ParentStudent", 'ParentType'>
    readonly isPrimaryContact: FieldRef<"ParentStudent", 'Boolean'>
    readonly isEmergencyContact: FieldRef<"ParentStudent", 'Boolean'>
    readonly hasParentalResponsibility: FieldRef<"ParentStudent", 'Boolean'>
    readonly canGiveConsent: FieldRef<"ParentStudent", 'Boolean'>
    readonly canCollectChild: FieldRef<"ParentStudent", 'Boolean'>
    readonly canAccessRecords: FieldRef<"ParentStudent", 'Boolean'>
    readonly receivesReports: FieldRef<"ParentStudent", 'Boolean'>
    readonly receivesNotifications: FieldRef<"ParentStudent", 'Boolean'>
    readonly canContactTeachers: FieldRef<"ParentStudent", 'Boolean'>
    readonly custodyArrangement: FieldRef<"ParentStudent", 'String'>
    readonly restrictedAccess: FieldRef<"ParentStudent", 'Boolean'>
    readonly accessNotes: FieldRef<"ParentStudent", 'String'>
    readonly createdAt: FieldRef<"ParentStudent", 'DateTime'>
    readonly updatedAt: FieldRef<"ParentStudent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ParentStudent findUnique
   */
  export type ParentStudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudent to fetch.
     */
    where: ParentStudentWhereUniqueInput
  }

  /**
   * ParentStudent findUniqueOrThrow
   */
  export type ParentStudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudent to fetch.
     */
    where: ParentStudentWhereUniqueInput
  }

  /**
   * ParentStudent findFirst
   */
  export type ParentStudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudent to fetch.
     */
    where?: ParentStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudents to fetch.
     */
    orderBy?: ParentStudentOrderByWithRelationInput | ParentStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParentStudents.
     */
    cursor?: ParentStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParentStudents.
     */
    distinct?: ParentStudentScalarFieldEnum | ParentStudentScalarFieldEnum[]
  }

  /**
   * ParentStudent findFirstOrThrow
   */
  export type ParentStudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudent to fetch.
     */
    where?: ParentStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudents to fetch.
     */
    orderBy?: ParentStudentOrderByWithRelationInput | ParentStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ParentStudents.
     */
    cursor?: ParentStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ParentStudents.
     */
    distinct?: ParentStudentScalarFieldEnum | ParentStudentScalarFieldEnum[]
  }

  /**
   * ParentStudent findMany
   */
  export type ParentStudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * Filter, which ParentStudents to fetch.
     */
    where?: ParentStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ParentStudents to fetch.
     */
    orderBy?: ParentStudentOrderByWithRelationInput | ParentStudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ParentStudents.
     */
    cursor?: ParentStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ParentStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ParentStudents.
     */
    skip?: number
    distinct?: ParentStudentScalarFieldEnum | ParentStudentScalarFieldEnum[]
  }

  /**
   * ParentStudent create
   */
  export type ParentStudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * The data needed to create a ParentStudent.
     */
    data: XOR<ParentStudentCreateInput, ParentStudentUncheckedCreateInput>
  }

  /**
   * ParentStudent createMany
   */
  export type ParentStudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ParentStudents.
     */
    data: ParentStudentCreateManyInput | ParentStudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ParentStudent createManyAndReturn
   */
  export type ParentStudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ParentStudents.
     */
    data: ParentStudentCreateManyInput | ParentStudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ParentStudent update
   */
  export type ParentStudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * The data needed to update a ParentStudent.
     */
    data: XOR<ParentStudentUpdateInput, ParentStudentUncheckedUpdateInput>
    /**
     * Choose, which ParentStudent to update.
     */
    where: ParentStudentWhereUniqueInput
  }

  /**
   * ParentStudent updateMany
   */
  export type ParentStudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ParentStudents.
     */
    data: XOR<ParentStudentUpdateManyMutationInput, ParentStudentUncheckedUpdateManyInput>
    /**
     * Filter which ParentStudents to update
     */
    where?: ParentStudentWhereInput
  }

  /**
   * ParentStudent upsert
   */
  export type ParentStudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * The filter to search for the ParentStudent to update in case it exists.
     */
    where: ParentStudentWhereUniqueInput
    /**
     * In case the ParentStudent found by the `where` argument doesn't exist, create a new ParentStudent with this data.
     */
    create: XOR<ParentStudentCreateInput, ParentStudentUncheckedCreateInput>
    /**
     * In case the ParentStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ParentStudentUpdateInput, ParentStudentUncheckedUpdateInput>
  }

  /**
   * ParentStudent delete
   */
  export type ParentStudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
    /**
     * Filter which ParentStudent to delete.
     */
    where: ParentStudentWhereUniqueInput
  }

  /**
   * ParentStudent deleteMany
   */
  export type ParentStudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ParentStudents to delete
     */
    where?: ParentStudentWhereInput
  }

  /**
   * ParentStudent without action
   */
  export type ParentStudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ParentStudent
     */
    select?: ParentStudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ParentStudentInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    priority: number | null
  }

  export type RoleSumAggregateOutputType = {
    priority: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    description: string | null
    isDefault: boolean | null
    isCustom: boolean | null
    isActive: boolean | null
    priority: number | null
    scope: $Enums.RoleScope | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    description: string | null
    isDefault: boolean | null
    isCustom: boolean | null
    isActive: boolean | null
    priority: number | null
    scope: $Enums.RoleScope | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    schoolId: number
    name: number
    description: number
    isDefault: number
    isCustom: number
    isActive: number
    priority: number
    scope: number
    applicableUserTypes: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    priority?: true
  }

  export type RoleSumAggregateInputType = {
    priority?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    description?: true
    isDefault?: true
    isCustom?: true
    isActive?: true
    priority?: true
    scope?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    description?: true
    isDefault?: true
    isCustom?: true
    isActive?: true
    priority?: true
    scope?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    description?: true
    isDefault?: true
    isCustom?: true
    isActive?: true
    priority?: true
    scope?: true
    applicableUserTypes?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    schoolId: string | null
    name: string
    description: string | null
    isDefault: boolean
    isCustom: boolean
    isActive: boolean
    priority: number
    scope: $Enums.RoleScope
    applicableUserTypes: $Enums.UserType[]
    createdBy: string | null
    createdAt: Date
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: boolean
    scope?: boolean
    applicableUserTypes?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    userRoles?: boolean | Role$userRolesArgs<ExtArgs>
    school?: boolean | Role$schoolArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: boolean
    scope?: boolean
    applicableUserTypes?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | Role$schoolArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    schoolId?: boolean
    name?: boolean
    description?: boolean
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: boolean
    scope?: boolean
    applicableUserTypes?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    userRoles?: boolean | Role$userRolesArgs<ExtArgs>
    school?: boolean | Role$schoolArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | Role$schoolArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      permissions: Prisma.$RolePermissionPayload<ExtArgs>[]
      userRoles: Prisma.$UserRolePayload<ExtArgs>[]
      school: Prisma.$SchoolPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string | null
      name: string
      description: string | null
      isDefault: boolean
      isCustom: boolean
      isActive: boolean
      priority: number
      scope: $Enums.RoleScope
      applicableUserTypes: $Enums.UserType[]
      createdBy: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    userRoles<T extends Role$userRolesArgs<ExtArgs> = {}>(args?: Subset<T, Role$userRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    school<T extends Role$schoolArgs<ExtArgs> = {}>(args?: Subset<T, Role$schoolArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly schoolId: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly description: FieldRef<"Role", 'String'>
    readonly isDefault: FieldRef<"Role", 'Boolean'>
    readonly isCustom: FieldRef<"Role", 'Boolean'>
    readonly isActive: FieldRef<"Role", 'Boolean'>
    readonly priority: FieldRef<"Role", 'Int'>
    readonly scope: FieldRef<"Role", 'RoleScope'>
    readonly applicableUserTypes: FieldRef<"Role", 'UserType[]'>
    readonly createdBy: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role.userRoles
   */
  export type Role$userRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role.school
   */
  export type Role$schoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the School
     */
    select?: SchoolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolInclude<ExtArgs> | null
    where?: SchoolWhereInput
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    resource: string | null
    action: string | null
    scope: string | null
    isDefault: boolean | null
    isActive: boolean | null
    category: $Enums.PermissionCategory | null
    riskLevel: $Enums.RiskLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    resource: string | null
    action: string | null
    scope: string | null
    isDefault: boolean | null
    isActive: boolean | null
    category: $Enums.PermissionCategory | null
    riskLevel: $Enums.RiskLevel | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    resource: number
    action: number
    scope: number
    isDefault: number
    isActive: number
    category: number
    riskLevel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    resource?: true
    action?: true
    scope?: true
    isDefault?: true
    isActive?: true
    category?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    resource?: true
    action?: true
    scope?: true
    isDefault?: true
    isActive?: true
    category?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    resource?: true
    action?: true
    scope?: true
    isDefault?: true
    isActive?: true
    category?: true
    riskLevel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: string
    description: string | null
    resource: string
    action: string
    scope: string
    isDefault: boolean
    isActive: boolean
    category: $Enums.PermissionCategory
    riskLevel: $Enums.RiskLevel
    createdAt: Date
    updatedAt: Date
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    resource?: boolean
    action?: boolean
    scope?: boolean
    isDefault?: boolean
    isActive?: boolean
    category?: boolean
    riskLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    resource?: boolean
    action?: boolean
    scope?: boolean
    isDefault?: boolean
    isActive?: boolean
    category?: boolean
    riskLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    resource?: boolean
    action?: boolean
    scope?: boolean
    isDefault?: boolean
    isActive?: boolean
    category?: boolean
    riskLevel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      rolePermissions: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      resource: string
      action: string
      scope: string
      isDefault: boolean
      isActive: boolean
      category: $Enums.PermissionCategory
      riskLevel: $Enums.RiskLevel
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rolePermissions<T extends Permission$rolePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly resource: FieldRef<"Permission", 'String'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly scope: FieldRef<"Permission", 'String'>
    readonly isDefault: FieldRef<"Permission", 'Boolean'>
    readonly isActive: FieldRef<"Permission", 'Boolean'>
    readonly category: FieldRef<"Permission", 'PermissionCategory'>
    readonly riskLevel: FieldRef<"Permission", 'RiskLevel'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.rolePermissions
   */
  export type Permission$rolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    grantedBy: string | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    id: string | null
    roleId: string | null
    permissionId: string | null
    grantedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    grantedBy: string | null
  }

  export type RolePermissionCountAggregateOutputType = {
    id: number
    roleId: number
    permissionId: number
    conditions: number
    limitations: number
    grantedAt: number
    expiresAt: number
    isActive: number
    grantedBy: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    grantedBy?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    grantedBy?: true
  }

  export type RolePermissionCountAggregateInputType = {
    id?: true
    roleId?: true
    permissionId?: true
    conditions?: true
    limitations?: true
    grantedAt?: true
    expiresAt?: true
    isActive?: true
    grantedBy?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    id: string
    roleId: string
    permissionId: string
    conditions: JsonValue | null
    limitations: JsonValue | null
    grantedAt: Date
    expiresAt: Date | null
    isActive: boolean
    grantedBy: string | null
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    conditions?: boolean
    limitations?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    grantedBy?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    conditions?: boolean
    limitations?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    grantedBy?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectScalar = {
    id?: boolean
    roleId?: boolean
    permissionId?: boolean
    conditions?: boolean
    limitations?: boolean
    grantedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    grantedBy?: boolean
  }

  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type RolePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      roleId: string
      permissionId: string
      conditions: Prisma.JsonValue | null
      limitations: Prisma.JsonValue | null
      grantedAt: Date
      expiresAt: Date | null
      isActive: boolean
      grantedBy: string | null
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RolePermissions and returns the data saved in the database.
     * @param {RolePermissionCreateManyAndReturnArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RolePermissions and only return the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, RolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */ 
  interface RolePermissionFieldRefs {
    readonly id: FieldRef<"RolePermission", 'String'>
    readonly roleId: FieldRef<"RolePermission", 'String'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
    readonly conditions: FieldRef<"RolePermission", 'Json'>
    readonly limitations: FieldRef<"RolePermission", 'Json'>
    readonly grantedAt: FieldRef<"RolePermission", 'DateTime'>
    readonly expiresAt: FieldRef<"RolePermission", 'DateTime'>
    readonly isActive: FieldRef<"RolePermission", 'Boolean'>
    readonly grantedBy: FieldRef<"RolePermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission createManyAndReturn
   */
  export type RolePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleAvgAggregateOutputType = {
    yearGroups: number | null
  }

  export type UserRoleSumAggregateOutputType = {
    yearGroups: number[]
  }

  export type UserRoleMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    roleId: string | null
    assignedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    assignedBy: string | null
    assignmentReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRoleMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    userId: string | null
    roleId: string | null
    assignedAt: Date | null
    expiresAt: Date | null
    isActive: boolean | null
    assignedBy: string | null
    assignmentReason: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserRoleCountAggregateOutputType = {
    id: number
    schoolId: number
    userId: number
    roleId: number
    classIds: number
    yearGroups: number
    subjects: number
    studentIds: number
    assignedAt: number
    expiresAt: number
    isActive: number
    assignedBy: number
    assignmentReason: number
    additionalPermissions: number
    restrictedPermissions: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserRoleAvgAggregateInputType = {
    yearGroups?: true
  }

  export type UserRoleSumAggregateInputType = {
    yearGroups?: true
  }

  export type UserRoleMinAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    roleId?: true
    assignedAt?: true
    expiresAt?: true
    isActive?: true
    assignedBy?: true
    assignmentReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRoleMaxAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    roleId?: true
    assignedAt?: true
    expiresAt?: true
    isActive?: true
    assignedBy?: true
    assignmentReason?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserRoleCountAggregateInputType = {
    id?: true
    schoolId?: true
    userId?: true
    roleId?: true
    classIds?: true
    yearGroups?: true
    subjects?: true
    studentIds?: true
    assignedAt?: true
    expiresAt?: true
    isActive?: true
    assignedBy?: true
    assignmentReason?: true
    additionalPermissions?: true
    restrictedPermissions?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _avg?: UserRoleAvgAggregateInputType
    _sum?: UserRoleSumAggregateInputType
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    id: string
    schoolId: string
    userId: string
    roleId: string
    classIds: string[]
    yearGroups: number[]
    subjects: string[]
    studentIds: string[]
    assignedAt: Date
    expiresAt: Date | null
    isActive: boolean
    assignedBy: string | null
    assignmentReason: string | null
    additionalPermissions: JsonValue | null
    restrictedPermissions: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: UserRoleCountAggregateOutputType | null
    _avg: UserRoleAvgAggregateOutputType | null
    _sum: UserRoleSumAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    roleId?: boolean
    classIds?: boolean
    yearGroups?: boolean
    subjects?: boolean
    studentIds?: boolean
    assignedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    assignedBy?: boolean
    assignmentReason?: boolean
    additionalPermissions?: boolean
    restrictedPermissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    roleId?: boolean
    classIds?: boolean
    yearGroups?: boolean
    subjects?: boolean
    studentIds?: boolean
    assignedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    assignedBy?: boolean
    assignmentReason?: boolean
    additionalPermissions?: boolean
    restrictedPermissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>

  export type UserRoleSelectScalar = {
    id?: boolean
    schoolId?: boolean
    userId?: boolean
    roleId?: boolean
    classIds?: boolean
    yearGroups?: boolean
    subjects?: boolean
    studentIds?: boolean
    assignedAt?: boolean
    expiresAt?: boolean
    isActive?: boolean
    assignedBy?: boolean
    assignmentReason?: boolean
    additionalPermissions?: boolean
    restrictedPermissions?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserRoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      userId: string
      roleId: string
      classIds: string[]
      yearGroups: number[]
      subjects: string[]
      studentIds: string[]
      assignedAt: Date
      expiresAt: Date | null
      isActive: boolean
      assignedBy: string | null
      assignmentReason: string | null
      additionalPermissions: Prisma.JsonValue | null
      restrictedPermissions: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRoleWithIdOnly = await prisma.userRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserRoles and returns the data saved in the database.
     * @param {UserRoleCreateManyAndReturnArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserRoles and only return the `id`
     * const userRoleWithIdOnly = await prisma.userRole.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserRoleCreateManyAndReturnArgs>(args?: SelectSubset<T, UserRoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */ 
  interface UserRoleFieldRefs {
    readonly id: FieldRef<"UserRole", 'String'>
    readonly schoolId: FieldRef<"UserRole", 'String'>
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'String'>
    readonly classIds: FieldRef<"UserRole", 'String[]'>
    readonly yearGroups: FieldRef<"UserRole", 'Int[]'>
    readonly subjects: FieldRef<"UserRole", 'String[]'>
    readonly studentIds: FieldRef<"UserRole", 'String[]'>
    readonly assignedAt: FieldRef<"UserRole", 'DateTime'>
    readonly expiresAt: FieldRef<"UserRole", 'DateTime'>
    readonly isActive: FieldRef<"UserRole", 'Boolean'>
    readonly assignedBy: FieldRef<"UserRole", 'String'>
    readonly assignmentReason: FieldRef<"UserRole", 'String'>
    readonly additionalPermissions: FieldRef<"UserRole", 'Json'>
    readonly restrictedPermissions: FieldRef<"UserRole", 'Json'>
    readonly createdAt: FieldRef<"UserRole", 'DateTime'>
    readonly updatedAt: FieldRef<"UserRole", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole createManyAndReturn
   */
  export type UserRoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    yearGroups: number | null
    capacity: number | null
  }

  export type ClassSumAggregateOutputType = {
    yearGroups: number[]
    capacity: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    displayName: string | null
    classType: $Enums.ClassType | null
    subject: string | null
    setLevel: string | null
    academicYear: string | null
    houseGroup: string | null
    houseColor: string | null
    capacity: number | null
    isActive: boolean | null
    classroom: string | null
    clubsEnabled: boolean | null
    leaderboardEnabled: boolean | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    displayName: string | null
    classType: $Enums.ClassType | null
    subject: string | null
    setLevel: string | null
    academicYear: string | null
    houseGroup: string | null
    houseColor: string | null
    capacity: number | null
    isActive: boolean | null
    classroom: string | null
    clubsEnabled: boolean | null
    leaderboardEnabled: boolean | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    schoolId: number
    name: number
    displayName: number
    yearGroups: number
    keyStages: number
    classType: number
    subject: number
    setLevel: number
    academicYear: number
    houseGroup: number
    houseColor: number
    capacity: number
    isActive: number
    classroom: number
    clubsEnabled: number
    leaderboardEnabled: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    yearGroups?: true
    capacity?: true
  }

  export type ClassSumAggregateInputType = {
    yearGroups?: true
    capacity?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    displayName?: true
    classType?: true
    subject?: true
    setLevel?: true
    academicYear?: true
    houseGroup?: true
    houseColor?: true
    capacity?: true
    isActive?: true
    classroom?: true
    clubsEnabled?: true
    leaderboardEnabled?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    displayName?: true
    classType?: true
    subject?: true
    setLevel?: true
    academicYear?: true
    houseGroup?: true
    houseColor?: true
    capacity?: true
    isActive?: true
    classroom?: true
    clubsEnabled?: true
    leaderboardEnabled?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    displayName?: true
    yearGroups?: true
    keyStages?: true
    classType?: true
    subject?: true
    setLevel?: true
    academicYear?: true
    houseGroup?: true
    houseColor?: true
    capacity?: true
    isActive?: true
    classroom?: true
    clubsEnabled?: true
    leaderboardEnabled?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: string
    schoolId: string
    name: string
    displayName: string | null
    yearGroups: number[]
    keyStages: $Enums.KeyStage[]
    classType: $Enums.ClassType
    subject: string | null
    setLevel: string | null
    academicYear: string
    houseGroup: string | null
    houseColor: string | null
    capacity: number | null
    isActive: boolean
    classroom: string | null
    clubsEnabled: boolean
    leaderboardEnabled: boolean
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    displayName?: boolean
    yearGroups?: boolean
    keyStages?: boolean
    classType?: boolean
    subject?: boolean
    setLevel?: boolean
    academicYear?: boolean
    houseGroup?: boolean
    houseColor?: boolean
    capacity?: boolean
    isActive?: boolean
    classroom?: boolean
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teacherClasses?: boolean | Class$teacherClassesArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    displayName?: boolean
    yearGroups?: boolean
    keyStages?: boolean
    classType?: boolean
    subject?: boolean
    setLevel?: boolean
    academicYear?: boolean
    houseGroup?: boolean
    houseColor?: boolean
    capacity?: boolean
    isActive?: boolean
    classroom?: boolean
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    schoolId?: boolean
    name?: boolean
    displayName?: boolean
    yearGroups?: boolean
    keyStages?: boolean
    classType?: boolean
    subject?: boolean
    setLevel?: boolean
    academicYear?: boolean
    houseGroup?: boolean
    houseColor?: boolean
    capacity?: boolean
    isActive?: boolean
    classroom?: boolean
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
  }

  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teacherClasses?: boolean | Class$teacherClassesArgs<ExtArgs>
    students?: boolean | Class$studentsArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      teacherClasses: Prisma.$TeacherClassPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      name: string
      displayName: string | null
      yearGroups: number[]
      keyStages: $Enums.KeyStage[]
      classType: $Enums.ClassType
      subject: string | null
      setLevel: string | null
      academicYear: string
      houseGroup: string | null
      houseColor: string | null
      capacity: number | null
      isActive: boolean
      classroom: string | null
      clubsEnabled: boolean
      leaderboardEnabled: boolean
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    teacherClasses<T extends Class$teacherClassesArgs<ExtArgs> = {}>(args?: Subset<T, Class$teacherClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findMany"> | Null>
    students<T extends Class$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */ 
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'String'>
    readonly schoolId: FieldRef<"Class", 'String'>
    readonly name: FieldRef<"Class", 'String'>
    readonly displayName: FieldRef<"Class", 'String'>
    readonly yearGroups: FieldRef<"Class", 'Int[]'>
    readonly keyStages: FieldRef<"Class", 'KeyStage[]'>
    readonly classType: FieldRef<"Class", 'ClassType'>
    readonly subject: FieldRef<"Class", 'String'>
    readonly setLevel: FieldRef<"Class", 'String'>
    readonly academicYear: FieldRef<"Class", 'String'>
    readonly houseGroup: FieldRef<"Class", 'String'>
    readonly houseColor: FieldRef<"Class", 'String'>
    readonly capacity: FieldRef<"Class", 'Int'>
    readonly isActive: FieldRef<"Class", 'Boolean'>
    readonly classroom: FieldRef<"Class", 'String'>
    readonly clubsEnabled: FieldRef<"Class", 'Boolean'>
    readonly leaderboardEnabled: FieldRef<"Class", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
  }

  /**
   * Class.teacherClasses
   */
  export type Class$teacherClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    where?: TeacherClassWhereInput
    orderBy?: TeacherClassOrderByWithRelationInput | TeacherClassOrderByWithRelationInput[]
    cursor?: TeacherClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherClassScalarFieldEnum | TeacherClassScalarFieldEnum[]
  }

  /**
   * Class.students
   */
  export type Class$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model TeacherClass
   */

  export type AggregateTeacherClass = {
    _count: TeacherClassCountAggregateOutputType | null
    _avg: TeacherClassAvgAggregateOutputType | null
    _sum: TeacherClassSumAggregateOutputType | null
    _min: TeacherClassMinAggregateOutputType | null
    _max: TeacherClassMaxAggregateOutputType | null
  }

  export type TeacherClassAvgAggregateOutputType = {
    timeAllocation: number | null
  }

  export type TeacherClassSumAggregateOutputType = {
    timeAllocation: number | null
  }

  export type TeacherClassMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    teacherId: string | null
    classId: string | null
    role: $Enums.ClassRole | null
    isPrimaryTeacher: boolean | null
    timeAllocation: number | null
    canMarkHomework: boolean | null
    canAssignClubs: boolean | null
    canViewProgress: boolean | null
    canContactParents: boolean | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeacherClassMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    teacherId: string | null
    classId: string | null
    role: $Enums.ClassRole | null
    isPrimaryTeacher: boolean | null
    timeAllocation: number | null
    canMarkHomework: boolean | null
    canAssignClubs: boolean | null
    canViewProgress: boolean | null
    canContactParents: boolean | null
    startDate: Date | null
    endDate: Date | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeacherClassCountAggregateOutputType = {
    id: number
    schoolId: number
    teacherId: number
    classId: number
    role: number
    isPrimaryTeacher: number
    subjects: number
    timeAllocation: number
    timetableSlots: number
    canMarkHomework: number
    canAssignClubs: number
    canViewProgress: number
    canContactParents: number
    startDate: number
    endDate: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeacherClassAvgAggregateInputType = {
    timeAllocation?: true
  }

  export type TeacherClassSumAggregateInputType = {
    timeAllocation?: true
  }

  export type TeacherClassMinAggregateInputType = {
    id?: true
    schoolId?: true
    teacherId?: true
    classId?: true
    role?: true
    isPrimaryTeacher?: true
    timeAllocation?: true
    canMarkHomework?: true
    canAssignClubs?: true
    canViewProgress?: true
    canContactParents?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeacherClassMaxAggregateInputType = {
    id?: true
    schoolId?: true
    teacherId?: true
    classId?: true
    role?: true
    isPrimaryTeacher?: true
    timeAllocation?: true
    canMarkHomework?: true
    canAssignClubs?: true
    canViewProgress?: true
    canContactParents?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeacherClassCountAggregateInputType = {
    id?: true
    schoolId?: true
    teacherId?: true
    classId?: true
    role?: true
    isPrimaryTeacher?: true
    subjects?: true
    timeAllocation?: true
    timetableSlots?: true
    canMarkHomework?: true
    canAssignClubs?: true
    canViewProgress?: true
    canContactParents?: true
    startDate?: true
    endDate?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeacherClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherClass to aggregate.
     */
    where?: TeacherClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClasses to fetch.
     */
    orderBy?: TeacherClassOrderByWithRelationInput | TeacherClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeacherClasses
    **/
    _count?: true | TeacherClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherClassMaxAggregateInputType
  }

  export type GetTeacherClassAggregateType<T extends TeacherClassAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacherClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacherClass[P]>
      : GetScalarType<T[P], AggregateTeacherClass[P]>
  }




  export type TeacherClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherClassWhereInput
    orderBy?: TeacherClassOrderByWithAggregationInput | TeacherClassOrderByWithAggregationInput[]
    by: TeacherClassScalarFieldEnum[] | TeacherClassScalarFieldEnum
    having?: TeacherClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherClassCountAggregateInputType | true
    _avg?: TeacherClassAvgAggregateInputType
    _sum?: TeacherClassSumAggregateInputType
    _min?: TeacherClassMinAggregateInputType
    _max?: TeacherClassMaxAggregateInputType
  }

  export type TeacherClassGroupByOutputType = {
    id: string
    schoolId: string
    teacherId: string
    classId: string
    role: $Enums.ClassRole
    isPrimaryTeacher: boolean
    subjects: string[]
    timeAllocation: number | null
    timetableSlots: JsonValue | null
    canMarkHomework: boolean
    canAssignClubs: boolean
    canViewProgress: boolean
    canContactParents: boolean
    startDate: Date
    endDate: Date | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: TeacherClassCountAggregateOutputType | null
    _avg: TeacherClassAvgAggregateOutputType | null
    _sum: TeacherClassSumAggregateOutputType | null
    _min: TeacherClassMinAggregateOutputType | null
    _max: TeacherClassMaxAggregateOutputType | null
  }

  type GetTeacherClassGroupByPayload<T extends TeacherClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherClassGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherClassGroupByOutputType[P]>
        }
      >
    >


  export type TeacherClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    teacherId?: boolean
    classId?: boolean
    role?: boolean
    isPrimaryTeacher?: boolean
    subjects?: boolean
    timeAllocation?: boolean
    timetableSlots?: boolean
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherClass"]>

  export type TeacherClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    teacherId?: boolean
    classId?: boolean
    role?: boolean
    isPrimaryTeacher?: boolean
    subjects?: boolean
    timeAllocation?: boolean
    timetableSlots?: boolean
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherClass"]>

  export type TeacherClassSelectScalar = {
    id?: boolean
    schoolId?: boolean
    teacherId?: boolean
    classId?: boolean
    role?: boolean
    isPrimaryTeacher?: boolean
    subjects?: boolean
    timeAllocation?: boolean
    timetableSlots?: boolean
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: boolean
    endDate?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeacherClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type TeacherClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $TeacherClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeacherClass"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      teacher: Prisma.$TeacherPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      teacherId: string
      classId: string
      role: $Enums.ClassRole
      isPrimaryTeacher: boolean
      subjects: string[]
      timeAllocation: number | null
      timetableSlots: Prisma.JsonValue | null
      canMarkHomework: boolean
      canAssignClubs: boolean
      canViewProgress: boolean
      canContactParents: boolean
      startDate: Date
      endDate: Date | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["teacherClass"]>
    composites: {}
  }

  type TeacherClassGetPayload<S extends boolean | null | undefined | TeacherClassDefaultArgs> = $Result.GetResult<Prisma.$TeacherClassPayload, S>

  type TeacherClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeacherClassFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeacherClassCountAggregateInputType | true
    }

  export interface TeacherClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherClass'], meta: { name: 'TeacherClass' } }
    /**
     * Find zero or one TeacherClass that matches the filter.
     * @param {TeacherClassFindUniqueArgs} args - Arguments to find a TeacherClass
     * @example
     * // Get one TeacherClass
     * const teacherClass = await prisma.teacherClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherClassFindUniqueArgs>(args: SelectSubset<T, TeacherClassFindUniqueArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TeacherClass that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeacherClassFindUniqueOrThrowArgs} args - Arguments to find a TeacherClass
     * @example
     * // Get one TeacherClass
     * const teacherClass = await prisma.teacherClass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherClassFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TeacherClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClassFindFirstArgs} args - Arguments to find a TeacherClass
     * @example
     * // Get one TeacherClass
     * const teacherClass = await prisma.teacherClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherClassFindFirstArgs>(args?: SelectSubset<T, TeacherClassFindFirstArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TeacherClass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClassFindFirstOrThrowArgs} args - Arguments to find a TeacherClass
     * @example
     * // Get one TeacherClass
     * const teacherClass = await prisma.teacherClass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherClassFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TeacherClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeacherClasses
     * const teacherClasses = await prisma.teacherClass.findMany()
     * 
     * // Get first 10 TeacherClasses
     * const teacherClasses = await prisma.teacherClass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherClassWithIdOnly = await prisma.teacherClass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherClassFindManyArgs>(args?: SelectSubset<T, TeacherClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TeacherClass.
     * @param {TeacherClassCreateArgs} args - Arguments to create a TeacherClass.
     * @example
     * // Create one TeacherClass
     * const TeacherClass = await prisma.teacherClass.create({
     *   data: {
     *     // ... data to create a TeacherClass
     *   }
     * })
     * 
     */
    create<T extends TeacherClassCreateArgs>(args: SelectSubset<T, TeacherClassCreateArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TeacherClasses.
     * @param {TeacherClassCreateManyArgs} args - Arguments to create many TeacherClasses.
     * @example
     * // Create many TeacherClasses
     * const teacherClass = await prisma.teacherClass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherClassCreateManyArgs>(args?: SelectSubset<T, TeacherClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeacherClasses and returns the data saved in the database.
     * @param {TeacherClassCreateManyAndReturnArgs} args - Arguments to create many TeacherClasses.
     * @example
     * // Create many TeacherClasses
     * const teacherClass = await prisma.teacherClass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeacherClasses and only return the `id`
     * const teacherClassWithIdOnly = await prisma.teacherClass.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherClassCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TeacherClass.
     * @param {TeacherClassDeleteArgs} args - Arguments to delete one TeacherClass.
     * @example
     * // Delete one TeacherClass
     * const TeacherClass = await prisma.teacherClass.delete({
     *   where: {
     *     // ... filter to delete one TeacherClass
     *   }
     * })
     * 
     */
    delete<T extends TeacherClassDeleteArgs>(args: SelectSubset<T, TeacherClassDeleteArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TeacherClass.
     * @param {TeacherClassUpdateArgs} args - Arguments to update one TeacherClass.
     * @example
     * // Update one TeacherClass
     * const teacherClass = await prisma.teacherClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherClassUpdateArgs>(args: SelectSubset<T, TeacherClassUpdateArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TeacherClasses.
     * @param {TeacherClassDeleteManyArgs} args - Arguments to filter TeacherClasses to delete.
     * @example
     * // Delete a few TeacherClasses
     * const { count } = await prisma.teacherClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherClassDeleteManyArgs>(args?: SelectSubset<T, TeacherClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeacherClasses
     * const teacherClass = await prisma.teacherClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherClassUpdateManyArgs>(args: SelectSubset<T, TeacherClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeacherClass.
     * @param {TeacherClassUpsertArgs} args - Arguments to update or create a TeacherClass.
     * @example
     * // Update or create a TeacherClass
     * const teacherClass = await prisma.teacherClass.upsert({
     *   create: {
     *     // ... data to create a TeacherClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeacherClass we want to update
     *   }
     * })
     */
    upsert<T extends TeacherClassUpsertArgs>(args: SelectSubset<T, TeacherClassUpsertArgs<ExtArgs>>): Prisma__TeacherClassClient<$Result.GetResult<Prisma.$TeacherClassPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TeacherClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClassCountArgs} args - Arguments to filter TeacherClasses to count.
     * @example
     * // Count the number of TeacherClasses
     * const count = await prisma.teacherClass.count({
     *   where: {
     *     // ... the filter for the TeacherClasses we want to count
     *   }
     * })
    **/
    count<T extends TeacherClassCountArgs>(
      args?: Subset<T, TeacherClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeacherClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherClassAggregateArgs>(args: Subset<T, TeacherClassAggregateArgs>): Prisma.PrismaPromise<GetTeacherClassAggregateType<T>>

    /**
     * Group by TeacherClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherClassGroupByArgs['orderBy'] }
        : { orderBy?: TeacherClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeacherClass model
   */
  readonly fields: TeacherClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeacherClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeacherClass model
   */ 
  interface TeacherClassFieldRefs {
    readonly id: FieldRef<"TeacherClass", 'String'>
    readonly schoolId: FieldRef<"TeacherClass", 'String'>
    readonly teacherId: FieldRef<"TeacherClass", 'String'>
    readonly classId: FieldRef<"TeacherClass", 'String'>
    readonly role: FieldRef<"TeacherClass", 'ClassRole'>
    readonly isPrimaryTeacher: FieldRef<"TeacherClass", 'Boolean'>
    readonly subjects: FieldRef<"TeacherClass", 'String[]'>
    readonly timeAllocation: FieldRef<"TeacherClass", 'Int'>
    readonly timetableSlots: FieldRef<"TeacherClass", 'Json'>
    readonly canMarkHomework: FieldRef<"TeacherClass", 'Boolean'>
    readonly canAssignClubs: FieldRef<"TeacherClass", 'Boolean'>
    readonly canViewProgress: FieldRef<"TeacherClass", 'Boolean'>
    readonly canContactParents: FieldRef<"TeacherClass", 'Boolean'>
    readonly startDate: FieldRef<"TeacherClass", 'DateTime'>
    readonly endDate: FieldRef<"TeacherClass", 'DateTime'>
    readonly isActive: FieldRef<"TeacherClass", 'Boolean'>
    readonly createdAt: FieldRef<"TeacherClass", 'DateTime'>
    readonly updatedAt: FieldRef<"TeacherClass", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TeacherClass findUnique
   */
  export type TeacherClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClass to fetch.
     */
    where: TeacherClassWhereUniqueInput
  }

  /**
   * TeacherClass findUniqueOrThrow
   */
  export type TeacherClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClass to fetch.
     */
    where: TeacherClassWhereUniqueInput
  }

  /**
   * TeacherClass findFirst
   */
  export type TeacherClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClass to fetch.
     */
    where?: TeacherClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClasses to fetch.
     */
    orderBy?: TeacherClassOrderByWithRelationInput | TeacherClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherClasses.
     */
    cursor?: TeacherClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherClasses.
     */
    distinct?: TeacherClassScalarFieldEnum | TeacherClassScalarFieldEnum[]
  }

  /**
   * TeacherClass findFirstOrThrow
   */
  export type TeacherClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClass to fetch.
     */
    where?: TeacherClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClasses to fetch.
     */
    orderBy?: TeacherClassOrderByWithRelationInput | TeacherClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherClasses.
     */
    cursor?: TeacherClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherClasses.
     */
    distinct?: TeacherClassScalarFieldEnum | TeacherClassScalarFieldEnum[]
  }

  /**
   * TeacherClass findMany
   */
  export type TeacherClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * Filter, which TeacherClasses to fetch.
     */
    where?: TeacherClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherClasses to fetch.
     */
    orderBy?: TeacherClassOrderByWithRelationInput | TeacherClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeacherClasses.
     */
    cursor?: TeacherClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherClasses.
     */
    skip?: number
    distinct?: TeacherClassScalarFieldEnum | TeacherClassScalarFieldEnum[]
  }

  /**
   * TeacherClass create
   */
  export type TeacherClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * The data needed to create a TeacherClass.
     */
    data: XOR<TeacherClassCreateInput, TeacherClassUncheckedCreateInput>
  }

  /**
   * TeacherClass createMany
   */
  export type TeacherClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeacherClasses.
     */
    data: TeacherClassCreateManyInput | TeacherClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeacherClass createManyAndReturn
   */
  export type TeacherClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TeacherClasses.
     */
    data: TeacherClassCreateManyInput | TeacherClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherClass update
   */
  export type TeacherClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * The data needed to update a TeacherClass.
     */
    data: XOR<TeacherClassUpdateInput, TeacherClassUncheckedUpdateInput>
    /**
     * Choose, which TeacherClass to update.
     */
    where: TeacherClassWhereUniqueInput
  }

  /**
   * TeacherClass updateMany
   */
  export type TeacherClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeacherClasses.
     */
    data: XOR<TeacherClassUpdateManyMutationInput, TeacherClassUncheckedUpdateManyInput>
    /**
     * Filter which TeacherClasses to update
     */
    where?: TeacherClassWhereInput
  }

  /**
   * TeacherClass upsert
   */
  export type TeacherClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * The filter to search for the TeacherClass to update in case it exists.
     */
    where: TeacherClassWhereUniqueInput
    /**
     * In case the TeacherClass found by the `where` argument doesn't exist, create a new TeacherClass with this data.
     */
    create: XOR<TeacherClassCreateInput, TeacherClassUncheckedCreateInput>
    /**
     * In case the TeacherClass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherClassUpdateInput, TeacherClassUncheckedUpdateInput>
  }

  /**
   * TeacherClass delete
   */
  export type TeacherClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
    /**
     * Filter which TeacherClass to delete.
     */
    where: TeacherClassWhereUniqueInput
  }

  /**
   * TeacherClass deleteMany
   */
  export type TeacherClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherClasses to delete
     */
    where?: TeacherClassWhereInput
  }

  /**
   * TeacherClass without action
   */
  export type TeacherClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherClass
     */
    select?: TeacherClassSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherClassInclude<ExtArgs> | null
  }


  /**
   * Model Club
   */

  export type AggregateClub = {
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  export type ClubAvgAggregateOutputType = {
    ageGroups: number | null
    maxBuddyMembers: number | null
    xpPerCompletion: number | null
  }

  export type ClubSumAggregateOutputType = {
    ageGroups: number[]
    maxBuddyMembers: number | null
    xpPerCompletion: number | null
  }

  export type ClubMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    description: string | null
    clubType: $Enums.ClubType | null
    subject: string | null
    isActive: boolean | null
    hasLevels: boolean | null
    levelNaming: string | null
    customLevels: boolean | null
    evidenceType: $Enums.ClubEvidenceType | null
    logbookRequired: boolean | null
    parentInvolvement: boolean | null
    maxBuddyMembers: number | null
    buddyGroupsEnabled: boolean | null
    xpPerCompletion: number | null
    streakEnabled: boolean | null
    iconUrl: string | null
    color: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    name: string | null
    description: string | null
    clubType: $Enums.ClubType | null
    subject: string | null
    isActive: boolean | null
    hasLevels: boolean | null
    levelNaming: string | null
    customLevels: boolean | null
    evidenceType: $Enums.ClubEvidenceType | null
    logbookRequired: boolean | null
    parentInvolvement: boolean | null
    maxBuddyMembers: number | null
    buddyGroupsEnabled: boolean | null
    xpPerCompletion: number | null
    streakEnabled: boolean | null
    iconUrl: string | null
    color: string | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClubCountAggregateOutputType = {
    id: number
    schoolId: number
    name: number
    description: number
    clubType: number
    subject: number
    isActive: number
    ageGroups: number
    keyStages: number
    hasLevels: number
    levelNaming: number
    customLevels: number
    evidenceType: number
    logbookRequired: number
    parentInvolvement: number
    maxBuddyMembers: number
    buddyGroupsEnabled: number
    xpPerCompletion: number
    streakEnabled: number
    iconUrl: number
    color: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClubAvgAggregateInputType = {
    ageGroups?: true
    maxBuddyMembers?: true
    xpPerCompletion?: true
  }

  export type ClubSumAggregateInputType = {
    ageGroups?: true
    maxBuddyMembers?: true
    xpPerCompletion?: true
  }

  export type ClubMinAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    description?: true
    clubType?: true
    subject?: true
    isActive?: true
    hasLevels?: true
    levelNaming?: true
    customLevels?: true
    evidenceType?: true
    logbookRequired?: true
    parentInvolvement?: true
    maxBuddyMembers?: true
    buddyGroupsEnabled?: true
    xpPerCompletion?: true
    streakEnabled?: true
    iconUrl?: true
    color?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubMaxAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    description?: true
    clubType?: true
    subject?: true
    isActive?: true
    hasLevels?: true
    levelNaming?: true
    customLevels?: true
    evidenceType?: true
    logbookRequired?: true
    parentInvolvement?: true
    maxBuddyMembers?: true
    buddyGroupsEnabled?: true
    xpPerCompletion?: true
    streakEnabled?: true
    iconUrl?: true
    color?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClubCountAggregateInputType = {
    id?: true
    schoolId?: true
    name?: true
    description?: true
    clubType?: true
    subject?: true
    isActive?: true
    ageGroups?: true
    keyStages?: true
    hasLevels?: true
    levelNaming?: true
    customLevels?: true
    evidenceType?: true
    logbookRequired?: true
    parentInvolvement?: true
    maxBuddyMembers?: true
    buddyGroupsEnabled?: true
    xpPerCompletion?: true
    streakEnabled?: true
    iconUrl?: true
    color?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Club to aggregate.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clubs
    **/
    _count?: true | ClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClubAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClubSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClubMaxAggregateInputType
  }

  export type GetClubAggregateType<T extends ClubAggregateArgs> = {
        [P in keyof T & keyof AggregateClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClub[P]>
      : GetScalarType<T[P], AggregateClub[P]>
  }




  export type ClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClubWhereInput
    orderBy?: ClubOrderByWithAggregationInput | ClubOrderByWithAggregationInput[]
    by: ClubScalarFieldEnum[] | ClubScalarFieldEnum
    having?: ClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClubCountAggregateInputType | true
    _avg?: ClubAvgAggregateInputType
    _sum?: ClubSumAggregateInputType
    _min?: ClubMinAggregateInputType
    _max?: ClubMaxAggregateInputType
  }

  export type ClubGroupByOutputType = {
    id: string
    schoolId: string
    name: string
    description: string | null
    clubType: $Enums.ClubType
    subject: string
    isActive: boolean
    ageGroups: number[]
    keyStages: $Enums.KeyStage[]
    hasLevels: boolean
    levelNaming: string | null
    customLevels: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired: boolean
    parentInvolvement: boolean
    maxBuddyMembers: number
    buddyGroupsEnabled: boolean
    xpPerCompletion: number
    streakEnabled: boolean
    iconUrl: string | null
    color: string
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: ClubCountAggregateOutputType | null
    _avg: ClubAvgAggregateOutputType | null
    _sum: ClubSumAggregateOutputType | null
    _min: ClubMinAggregateOutputType | null
    _max: ClubMaxAggregateOutputType | null
  }

  type GetClubGroupByPayload<T extends ClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClubGroupByOutputType[P]>
            : GetScalarType<T[P], ClubGroupByOutputType[P]>
        }
      >
    >


  export type ClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    description?: boolean
    clubType?: boolean
    subject?: boolean
    isActive?: boolean
    ageGroups?: boolean
    keyStages?: boolean
    hasLevels?: boolean
    levelNaming?: boolean
    customLevels?: boolean
    evidenceType?: boolean
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: boolean
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: boolean
    streakEnabled?: boolean
    iconUrl?: boolean
    color?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    homeworkCompletions?: boolean | Club$homeworkCompletionsArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>

  export type ClubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    name?: boolean
    description?: boolean
    clubType?: boolean
    subject?: boolean
    isActive?: boolean
    ageGroups?: boolean
    keyStages?: boolean
    hasLevels?: boolean
    levelNaming?: boolean
    customLevels?: boolean
    evidenceType?: boolean
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: boolean
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: boolean
    streakEnabled?: boolean
    iconUrl?: boolean
    color?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["club"]>

  export type ClubSelectScalar = {
    id?: boolean
    schoolId?: boolean
    name?: boolean
    description?: boolean
    clubType?: boolean
    subject?: boolean
    isActive?: boolean
    ageGroups?: boolean
    keyStages?: boolean
    hasLevels?: boolean
    levelNaming?: boolean
    customLevels?: boolean
    evidenceType?: boolean
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: boolean
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: boolean
    streakEnabled?: boolean
    iconUrl?: boolean
    color?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    homeworkCompletions?: boolean | Club$homeworkCompletionsArgs<ExtArgs>
    _count?: boolean | ClubCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
  }

  export type $ClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Club"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      homeworkCompletions: Prisma.$HomeworkCompletionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      name: string
      description: string | null
      clubType: $Enums.ClubType
      subject: string
      isActive: boolean
      ageGroups: number[]
      keyStages: $Enums.KeyStage[]
      hasLevels: boolean
      levelNaming: string | null
      customLevels: boolean
      evidenceType: $Enums.ClubEvidenceType
      logbookRequired: boolean
      parentInvolvement: boolean
      maxBuddyMembers: number
      buddyGroupsEnabled: boolean
      xpPerCompletion: number
      streakEnabled: boolean
      iconUrl: string | null
      color: string
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["club"]>
    composites: {}
  }

  type ClubGetPayload<S extends boolean | null | undefined | ClubDefaultArgs> = $Result.GetResult<Prisma.$ClubPayload, S>

  type ClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClubFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClubCountAggregateInputType | true
    }

  export interface ClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Club'], meta: { name: 'Club' } }
    /**
     * Find zero or one Club that matches the filter.
     * @param {ClubFindUniqueArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClubFindUniqueArgs>(args: SelectSubset<T, ClubFindUniqueArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Club that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClubFindUniqueOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClubFindUniqueOrThrowArgs>(args: SelectSubset<T, ClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Club that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClubFindFirstArgs>(args?: SelectSubset<T, ClubFindFirstArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Club that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindFirstOrThrowArgs} args - Arguments to find a Club
     * @example
     * // Get one Club
     * const club = await prisma.club.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClubFindFirstOrThrowArgs>(args?: SelectSubset<T, ClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Clubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clubs
     * const clubs = await prisma.club.findMany()
     * 
     * // Get first 10 Clubs
     * const clubs = await prisma.club.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clubWithIdOnly = await prisma.club.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClubFindManyArgs>(args?: SelectSubset<T, ClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Club.
     * @param {ClubCreateArgs} args - Arguments to create a Club.
     * @example
     * // Create one Club
     * const Club = await prisma.club.create({
     *   data: {
     *     // ... data to create a Club
     *   }
     * })
     * 
     */
    create<T extends ClubCreateArgs>(args: SelectSubset<T, ClubCreateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Clubs.
     * @param {ClubCreateManyArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClubCreateManyArgs>(args?: SelectSubset<T, ClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Clubs and returns the data saved in the database.
     * @param {ClubCreateManyAndReturnArgs} args - Arguments to create many Clubs.
     * @example
     * // Create many Clubs
     * const club = await prisma.club.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Clubs and only return the `id`
     * const clubWithIdOnly = await prisma.club.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClubCreateManyAndReturnArgs>(args?: SelectSubset<T, ClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Club.
     * @param {ClubDeleteArgs} args - Arguments to delete one Club.
     * @example
     * // Delete one Club
     * const Club = await prisma.club.delete({
     *   where: {
     *     // ... filter to delete one Club
     *   }
     * })
     * 
     */
    delete<T extends ClubDeleteArgs>(args: SelectSubset<T, ClubDeleteArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Club.
     * @param {ClubUpdateArgs} args - Arguments to update one Club.
     * @example
     * // Update one Club
     * const club = await prisma.club.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClubUpdateArgs>(args: SelectSubset<T, ClubUpdateArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Clubs.
     * @param {ClubDeleteManyArgs} args - Arguments to filter Clubs to delete.
     * @example
     * // Delete a few Clubs
     * const { count } = await prisma.club.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClubDeleteManyArgs>(args?: SelectSubset<T, ClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clubs
     * const club = await prisma.club.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClubUpdateManyArgs>(args: SelectSubset<T, ClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Club.
     * @param {ClubUpsertArgs} args - Arguments to update or create a Club.
     * @example
     * // Update or create a Club
     * const club = await prisma.club.upsert({
     *   create: {
     *     // ... data to create a Club
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Club we want to update
     *   }
     * })
     */
    upsert<T extends ClubUpsertArgs>(args: SelectSubset<T, ClubUpsertArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Clubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubCountArgs} args - Arguments to filter Clubs to count.
     * @example
     * // Count the number of Clubs
     * const count = await prisma.club.count({
     *   where: {
     *     // ... the filter for the Clubs we want to count
     *   }
     * })
    **/
    count<T extends ClubCountArgs>(
      args?: Subset<T, ClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClubAggregateArgs>(args: Subset<T, ClubAggregateArgs>): Prisma.PrismaPromise<GetClubAggregateType<T>>

    /**
     * Group by Club.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClubGroupByArgs['orderBy'] }
        : { orderBy?: ClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Club model
   */
  readonly fields: ClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Club.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    homeworkCompletions<T extends Club$homeworkCompletionsArgs<ExtArgs> = {}>(args?: Subset<T, Club$homeworkCompletionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Club model
   */ 
  interface ClubFieldRefs {
    readonly id: FieldRef<"Club", 'String'>
    readonly schoolId: FieldRef<"Club", 'String'>
    readonly name: FieldRef<"Club", 'String'>
    readonly description: FieldRef<"Club", 'String'>
    readonly clubType: FieldRef<"Club", 'ClubType'>
    readonly subject: FieldRef<"Club", 'String'>
    readonly isActive: FieldRef<"Club", 'Boolean'>
    readonly ageGroups: FieldRef<"Club", 'Int[]'>
    readonly keyStages: FieldRef<"Club", 'KeyStage[]'>
    readonly hasLevels: FieldRef<"Club", 'Boolean'>
    readonly levelNaming: FieldRef<"Club", 'String'>
    readonly customLevels: FieldRef<"Club", 'Boolean'>
    readonly evidenceType: FieldRef<"Club", 'ClubEvidenceType'>
    readonly logbookRequired: FieldRef<"Club", 'Boolean'>
    readonly parentInvolvement: FieldRef<"Club", 'Boolean'>
    readonly maxBuddyMembers: FieldRef<"Club", 'Int'>
    readonly buddyGroupsEnabled: FieldRef<"Club", 'Boolean'>
    readonly xpPerCompletion: FieldRef<"Club", 'Int'>
    readonly streakEnabled: FieldRef<"Club", 'Boolean'>
    readonly iconUrl: FieldRef<"Club", 'String'>
    readonly color: FieldRef<"Club", 'String'>
    readonly createdBy: FieldRef<"Club", 'String'>
    readonly createdAt: FieldRef<"Club", 'DateTime'>
    readonly updatedAt: FieldRef<"Club", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Club findUnique
   */
  export type ClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findUniqueOrThrow
   */
  export type ClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club findFirst
   */
  export type ClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findFirstOrThrow
   */
  export type ClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Club to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clubs.
     */
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club findMany
   */
  export type ClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter, which Clubs to fetch.
     */
    where?: ClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clubs to fetch.
     */
    orderBy?: ClubOrderByWithRelationInput | ClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clubs.
     */
    cursor?: ClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clubs.
     */
    skip?: number
    distinct?: ClubScalarFieldEnum | ClubScalarFieldEnum[]
  }

  /**
   * Club create
   */
  export type ClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to create a Club.
     */
    data: XOR<ClubCreateInput, ClubUncheckedCreateInput>
  }

  /**
   * Club createMany
   */
  export type ClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Club createManyAndReturn
   */
  export type ClubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Clubs.
     */
    data: ClubCreateManyInput | ClubCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Club update
   */
  export type ClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The data needed to update a Club.
     */
    data: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
    /**
     * Choose, which Club to update.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club updateMany
   */
  export type ClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Clubs.
     */
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyInput>
    /**
     * Filter which Clubs to update
     */
    where?: ClubWhereInput
  }

  /**
   * Club upsert
   */
  export type ClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * The filter to search for the Club to update in case it exists.
     */
    where: ClubWhereUniqueInput
    /**
     * In case the Club found by the `where` argument doesn't exist, create a new Club with this data.
     */
    create: XOR<ClubCreateInput, ClubUncheckedCreateInput>
    /**
     * In case the Club was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClubUpdateInput, ClubUncheckedUpdateInput>
  }

  /**
   * Club delete
   */
  export type ClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    /**
     * Filter which Club to delete.
     */
    where: ClubWhereUniqueInput
  }

  /**
   * Club deleteMany
   */
  export type ClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Clubs to delete
     */
    where?: ClubWhereInput
  }

  /**
   * Club.homeworkCompletions
   */
  export type Club$homeworkCompletionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    where?: HomeworkCompletionWhereInput
    orderBy?: HomeworkCompletionOrderByWithRelationInput | HomeworkCompletionOrderByWithRelationInput[]
    cursor?: HomeworkCompletionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HomeworkCompletionScalarFieldEnum | HomeworkCompletionScalarFieldEnum[]
  }

  /**
   * Club without action
   */
  export type ClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
  }


  /**
   * Model HomeworkCompletion
   */

  export type AggregateHomeworkCompletion = {
    _count: HomeworkCompletionCountAggregateOutputType | null
    _avg: HomeworkCompletionAvgAggregateOutputType | null
    _sum: HomeworkCompletionSumAggregateOutputType | null
    _min: HomeworkCompletionMinAggregateOutputType | null
    _max: HomeworkCompletionMaxAggregateOutputType | null
  }

  export type HomeworkCompletionAvgAggregateOutputType = {
    timeSpentMinutes: number | null
  }

  export type HomeworkCompletionSumAggregateOutputType = {
    timeSpentMinutes: number | null
  }

  export type HomeworkCompletionMinAggregateOutputType = {
    id: string | null
    schoolId: string | null
    studentId: string | null
    clubId: string | null
    completionDate: Date | null
    evidenceType: $Enums.ClubEvidenceType | null
    evidenceUrl: string | null
    notes: string | null
    parentNotes: string | null
    timeSpentMinutes: number | null
    wasLate: boolean | null
    verifiedBy: string | null
    verifiedAt: Date | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HomeworkCompletionMaxAggregateOutputType = {
    id: string | null
    schoolId: string | null
    studentId: string | null
    clubId: string | null
    completionDate: Date | null
    evidenceType: $Enums.ClubEvidenceType | null
    evidenceUrl: string | null
    notes: string | null
    parentNotes: string | null
    timeSpentMinutes: number | null
    wasLate: boolean | null
    verifiedBy: string | null
    verifiedAt: Date | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HomeworkCompletionCountAggregateOutputType = {
    id: number
    schoolId: number
    studentId: number
    clubId: number
    completionDate: number
    evidenceType: number
    evidenceUrl: number
    notes: number
    parentNotes: number
    timeSpentMinutes: number
    wasLate: number
    verifiedBy: number
    verifiedAt: number
    isVerified: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HomeworkCompletionAvgAggregateInputType = {
    timeSpentMinutes?: true
  }

  export type HomeworkCompletionSumAggregateInputType = {
    timeSpentMinutes?: true
  }

  export type HomeworkCompletionMinAggregateInputType = {
    id?: true
    schoolId?: true
    studentId?: true
    clubId?: true
    completionDate?: true
    evidenceType?: true
    evidenceUrl?: true
    notes?: true
    parentNotes?: true
    timeSpentMinutes?: true
    wasLate?: true
    verifiedBy?: true
    verifiedAt?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HomeworkCompletionMaxAggregateInputType = {
    id?: true
    schoolId?: true
    studentId?: true
    clubId?: true
    completionDate?: true
    evidenceType?: true
    evidenceUrl?: true
    notes?: true
    parentNotes?: true
    timeSpentMinutes?: true
    wasLate?: true
    verifiedBy?: true
    verifiedAt?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HomeworkCompletionCountAggregateInputType = {
    id?: true
    schoolId?: true
    studentId?: true
    clubId?: true
    completionDate?: true
    evidenceType?: true
    evidenceUrl?: true
    notes?: true
    parentNotes?: true
    timeSpentMinutes?: true
    wasLate?: true
    verifiedBy?: true
    verifiedAt?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HomeworkCompletionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HomeworkCompletion to aggregate.
     */
    where?: HomeworkCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkCompletions to fetch.
     */
    orderBy?: HomeworkCompletionOrderByWithRelationInput | HomeworkCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HomeworkCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HomeworkCompletions
    **/
    _count?: true | HomeworkCompletionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HomeworkCompletionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HomeworkCompletionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HomeworkCompletionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HomeworkCompletionMaxAggregateInputType
  }

  export type GetHomeworkCompletionAggregateType<T extends HomeworkCompletionAggregateArgs> = {
        [P in keyof T & keyof AggregateHomeworkCompletion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHomeworkCompletion[P]>
      : GetScalarType<T[P], AggregateHomeworkCompletion[P]>
  }




  export type HomeworkCompletionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HomeworkCompletionWhereInput
    orderBy?: HomeworkCompletionOrderByWithAggregationInput | HomeworkCompletionOrderByWithAggregationInput[]
    by: HomeworkCompletionScalarFieldEnum[] | HomeworkCompletionScalarFieldEnum
    having?: HomeworkCompletionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HomeworkCompletionCountAggregateInputType | true
    _avg?: HomeworkCompletionAvgAggregateInputType
    _sum?: HomeworkCompletionSumAggregateInputType
    _min?: HomeworkCompletionMinAggregateInputType
    _max?: HomeworkCompletionMaxAggregateInputType
  }

  export type HomeworkCompletionGroupByOutputType = {
    id: string
    schoolId: string
    studentId: string
    clubId: string | null
    completionDate: Date
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl: string | null
    notes: string | null
    parentNotes: string | null
    timeSpentMinutes: number | null
    wasLate: boolean
    verifiedBy: string | null
    verifiedAt: Date | null
    isVerified: boolean
    createdAt: Date
    updatedAt: Date
    _count: HomeworkCompletionCountAggregateOutputType | null
    _avg: HomeworkCompletionAvgAggregateOutputType | null
    _sum: HomeworkCompletionSumAggregateOutputType | null
    _min: HomeworkCompletionMinAggregateOutputType | null
    _max: HomeworkCompletionMaxAggregateOutputType | null
  }

  type GetHomeworkCompletionGroupByPayload<T extends HomeworkCompletionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HomeworkCompletionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HomeworkCompletionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HomeworkCompletionGroupByOutputType[P]>
            : GetScalarType<T[P], HomeworkCompletionGroupByOutputType[P]>
        }
      >
    >


  export type HomeworkCompletionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    studentId?: boolean
    clubId?: boolean
    completionDate?: boolean
    evidenceType?: boolean
    evidenceUrl?: boolean
    notes?: boolean
    parentNotes?: boolean
    timeSpentMinutes?: boolean
    wasLate?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    club?: boolean | HomeworkCompletion$clubArgs<ExtArgs>
  }, ExtArgs["result"]["homeworkCompletion"]>

  export type HomeworkCompletionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    schoolId?: boolean
    studentId?: boolean
    clubId?: boolean
    completionDate?: boolean
    evidenceType?: boolean
    evidenceUrl?: boolean
    notes?: boolean
    parentNotes?: boolean
    timeSpentMinutes?: boolean
    wasLate?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    club?: boolean | HomeworkCompletion$clubArgs<ExtArgs>
  }, ExtArgs["result"]["homeworkCompletion"]>

  export type HomeworkCompletionSelectScalar = {
    id?: boolean
    schoolId?: boolean
    studentId?: boolean
    clubId?: boolean
    completionDate?: boolean
    evidenceType?: boolean
    evidenceUrl?: boolean
    notes?: boolean
    parentNotes?: boolean
    timeSpentMinutes?: boolean
    wasLate?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HomeworkCompletionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    club?: boolean | HomeworkCompletion$clubArgs<ExtArgs>
  }
  export type HomeworkCompletionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school?: boolean | SchoolDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
    club?: boolean | HomeworkCompletion$clubArgs<ExtArgs>
  }

  export type $HomeworkCompletionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HomeworkCompletion"
    objects: {
      school: Prisma.$SchoolPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
      club: Prisma.$ClubPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      schoolId: string
      studentId: string
      clubId: string | null
      completionDate: Date
      evidenceType: $Enums.ClubEvidenceType
      evidenceUrl: string | null
      notes: string | null
      parentNotes: string | null
      timeSpentMinutes: number | null
      wasLate: boolean
      verifiedBy: string | null
      verifiedAt: Date | null
      isVerified: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["homeworkCompletion"]>
    composites: {}
  }

  type HomeworkCompletionGetPayload<S extends boolean | null | undefined | HomeworkCompletionDefaultArgs> = $Result.GetResult<Prisma.$HomeworkCompletionPayload, S>

  type HomeworkCompletionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HomeworkCompletionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HomeworkCompletionCountAggregateInputType | true
    }

  export interface HomeworkCompletionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HomeworkCompletion'], meta: { name: 'HomeworkCompletion' } }
    /**
     * Find zero or one HomeworkCompletion that matches the filter.
     * @param {HomeworkCompletionFindUniqueArgs} args - Arguments to find a HomeworkCompletion
     * @example
     * // Get one HomeworkCompletion
     * const homeworkCompletion = await prisma.homeworkCompletion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HomeworkCompletionFindUniqueArgs>(args: SelectSubset<T, HomeworkCompletionFindUniqueArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HomeworkCompletion that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HomeworkCompletionFindUniqueOrThrowArgs} args - Arguments to find a HomeworkCompletion
     * @example
     * // Get one HomeworkCompletion
     * const homeworkCompletion = await prisma.homeworkCompletion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HomeworkCompletionFindUniqueOrThrowArgs>(args: SelectSubset<T, HomeworkCompletionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HomeworkCompletion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCompletionFindFirstArgs} args - Arguments to find a HomeworkCompletion
     * @example
     * // Get one HomeworkCompletion
     * const homeworkCompletion = await prisma.homeworkCompletion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HomeworkCompletionFindFirstArgs>(args?: SelectSubset<T, HomeworkCompletionFindFirstArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HomeworkCompletion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCompletionFindFirstOrThrowArgs} args - Arguments to find a HomeworkCompletion
     * @example
     * // Get one HomeworkCompletion
     * const homeworkCompletion = await prisma.homeworkCompletion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HomeworkCompletionFindFirstOrThrowArgs>(args?: SelectSubset<T, HomeworkCompletionFindFirstOrThrowArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HomeworkCompletions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCompletionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HomeworkCompletions
     * const homeworkCompletions = await prisma.homeworkCompletion.findMany()
     * 
     * // Get first 10 HomeworkCompletions
     * const homeworkCompletions = await prisma.homeworkCompletion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const homeworkCompletionWithIdOnly = await prisma.homeworkCompletion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HomeworkCompletionFindManyArgs>(args?: SelectSubset<T, HomeworkCompletionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HomeworkCompletion.
     * @param {HomeworkCompletionCreateArgs} args - Arguments to create a HomeworkCompletion.
     * @example
     * // Create one HomeworkCompletion
     * const HomeworkCompletion = await prisma.homeworkCompletion.create({
     *   data: {
     *     // ... data to create a HomeworkCompletion
     *   }
     * })
     * 
     */
    create<T extends HomeworkCompletionCreateArgs>(args: SelectSubset<T, HomeworkCompletionCreateArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HomeworkCompletions.
     * @param {HomeworkCompletionCreateManyArgs} args - Arguments to create many HomeworkCompletions.
     * @example
     * // Create many HomeworkCompletions
     * const homeworkCompletion = await prisma.homeworkCompletion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HomeworkCompletionCreateManyArgs>(args?: SelectSubset<T, HomeworkCompletionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HomeworkCompletions and returns the data saved in the database.
     * @param {HomeworkCompletionCreateManyAndReturnArgs} args - Arguments to create many HomeworkCompletions.
     * @example
     * // Create many HomeworkCompletions
     * const homeworkCompletion = await prisma.homeworkCompletion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HomeworkCompletions and only return the `id`
     * const homeworkCompletionWithIdOnly = await prisma.homeworkCompletion.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HomeworkCompletionCreateManyAndReturnArgs>(args?: SelectSubset<T, HomeworkCompletionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HomeworkCompletion.
     * @param {HomeworkCompletionDeleteArgs} args - Arguments to delete one HomeworkCompletion.
     * @example
     * // Delete one HomeworkCompletion
     * const HomeworkCompletion = await prisma.homeworkCompletion.delete({
     *   where: {
     *     // ... filter to delete one HomeworkCompletion
     *   }
     * })
     * 
     */
    delete<T extends HomeworkCompletionDeleteArgs>(args: SelectSubset<T, HomeworkCompletionDeleteArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HomeworkCompletion.
     * @param {HomeworkCompletionUpdateArgs} args - Arguments to update one HomeworkCompletion.
     * @example
     * // Update one HomeworkCompletion
     * const homeworkCompletion = await prisma.homeworkCompletion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HomeworkCompletionUpdateArgs>(args: SelectSubset<T, HomeworkCompletionUpdateArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HomeworkCompletions.
     * @param {HomeworkCompletionDeleteManyArgs} args - Arguments to filter HomeworkCompletions to delete.
     * @example
     * // Delete a few HomeworkCompletions
     * const { count } = await prisma.homeworkCompletion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HomeworkCompletionDeleteManyArgs>(args?: SelectSubset<T, HomeworkCompletionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HomeworkCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCompletionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HomeworkCompletions
     * const homeworkCompletion = await prisma.homeworkCompletion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HomeworkCompletionUpdateManyArgs>(args: SelectSubset<T, HomeworkCompletionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HomeworkCompletion.
     * @param {HomeworkCompletionUpsertArgs} args - Arguments to update or create a HomeworkCompletion.
     * @example
     * // Update or create a HomeworkCompletion
     * const homeworkCompletion = await prisma.homeworkCompletion.upsert({
     *   create: {
     *     // ... data to create a HomeworkCompletion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HomeworkCompletion we want to update
     *   }
     * })
     */
    upsert<T extends HomeworkCompletionUpsertArgs>(args: SelectSubset<T, HomeworkCompletionUpsertArgs<ExtArgs>>): Prisma__HomeworkCompletionClient<$Result.GetResult<Prisma.$HomeworkCompletionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HomeworkCompletions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCompletionCountArgs} args - Arguments to filter HomeworkCompletions to count.
     * @example
     * // Count the number of HomeworkCompletions
     * const count = await prisma.homeworkCompletion.count({
     *   where: {
     *     // ... the filter for the HomeworkCompletions we want to count
     *   }
     * })
    **/
    count<T extends HomeworkCompletionCountArgs>(
      args?: Subset<T, HomeworkCompletionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HomeworkCompletionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HomeworkCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCompletionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HomeworkCompletionAggregateArgs>(args: Subset<T, HomeworkCompletionAggregateArgs>): Prisma.PrismaPromise<GetHomeworkCompletionAggregateType<T>>

    /**
     * Group by HomeworkCompletion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HomeworkCompletionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HomeworkCompletionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HomeworkCompletionGroupByArgs['orderBy'] }
        : { orderBy?: HomeworkCompletionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HomeworkCompletionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHomeworkCompletionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HomeworkCompletion model
   */
  readonly fields: HomeworkCompletionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HomeworkCompletion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HomeworkCompletionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school<T extends SchoolDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDefaultArgs<ExtArgs>>): Prisma__SchoolClient<$Result.GetResult<Prisma.$SchoolPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    club<T extends HomeworkCompletion$clubArgs<ExtArgs> = {}>(args?: Subset<T, HomeworkCompletion$clubArgs<ExtArgs>>): Prisma__ClubClient<$Result.GetResult<Prisma.$ClubPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HomeworkCompletion model
   */ 
  interface HomeworkCompletionFieldRefs {
    readonly id: FieldRef<"HomeworkCompletion", 'String'>
    readonly schoolId: FieldRef<"HomeworkCompletion", 'String'>
    readonly studentId: FieldRef<"HomeworkCompletion", 'String'>
    readonly clubId: FieldRef<"HomeworkCompletion", 'String'>
    readonly completionDate: FieldRef<"HomeworkCompletion", 'DateTime'>
    readonly evidenceType: FieldRef<"HomeworkCompletion", 'ClubEvidenceType'>
    readonly evidenceUrl: FieldRef<"HomeworkCompletion", 'String'>
    readonly notes: FieldRef<"HomeworkCompletion", 'String'>
    readonly parentNotes: FieldRef<"HomeworkCompletion", 'String'>
    readonly timeSpentMinutes: FieldRef<"HomeworkCompletion", 'Int'>
    readonly wasLate: FieldRef<"HomeworkCompletion", 'Boolean'>
    readonly verifiedBy: FieldRef<"HomeworkCompletion", 'String'>
    readonly verifiedAt: FieldRef<"HomeworkCompletion", 'DateTime'>
    readonly isVerified: FieldRef<"HomeworkCompletion", 'Boolean'>
    readonly createdAt: FieldRef<"HomeworkCompletion", 'DateTime'>
    readonly updatedAt: FieldRef<"HomeworkCompletion", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HomeworkCompletion findUnique
   */
  export type HomeworkCompletionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkCompletion to fetch.
     */
    where: HomeworkCompletionWhereUniqueInput
  }

  /**
   * HomeworkCompletion findUniqueOrThrow
   */
  export type HomeworkCompletionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkCompletion to fetch.
     */
    where: HomeworkCompletionWhereUniqueInput
  }

  /**
   * HomeworkCompletion findFirst
   */
  export type HomeworkCompletionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkCompletion to fetch.
     */
    where?: HomeworkCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkCompletions to fetch.
     */
    orderBy?: HomeworkCompletionOrderByWithRelationInput | HomeworkCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HomeworkCompletions.
     */
    cursor?: HomeworkCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HomeworkCompletions.
     */
    distinct?: HomeworkCompletionScalarFieldEnum | HomeworkCompletionScalarFieldEnum[]
  }

  /**
   * HomeworkCompletion findFirstOrThrow
   */
  export type HomeworkCompletionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkCompletion to fetch.
     */
    where?: HomeworkCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkCompletions to fetch.
     */
    orderBy?: HomeworkCompletionOrderByWithRelationInput | HomeworkCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HomeworkCompletions.
     */
    cursor?: HomeworkCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkCompletions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HomeworkCompletions.
     */
    distinct?: HomeworkCompletionScalarFieldEnum | HomeworkCompletionScalarFieldEnum[]
  }

  /**
   * HomeworkCompletion findMany
   */
  export type HomeworkCompletionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * Filter, which HomeworkCompletions to fetch.
     */
    where?: HomeworkCompletionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HomeworkCompletions to fetch.
     */
    orderBy?: HomeworkCompletionOrderByWithRelationInput | HomeworkCompletionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HomeworkCompletions.
     */
    cursor?: HomeworkCompletionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HomeworkCompletions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HomeworkCompletions.
     */
    skip?: number
    distinct?: HomeworkCompletionScalarFieldEnum | HomeworkCompletionScalarFieldEnum[]
  }

  /**
   * HomeworkCompletion create
   */
  export type HomeworkCompletionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * The data needed to create a HomeworkCompletion.
     */
    data: XOR<HomeworkCompletionCreateInput, HomeworkCompletionUncheckedCreateInput>
  }

  /**
   * HomeworkCompletion createMany
   */
  export type HomeworkCompletionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HomeworkCompletions.
     */
    data: HomeworkCompletionCreateManyInput | HomeworkCompletionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HomeworkCompletion createManyAndReturn
   */
  export type HomeworkCompletionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HomeworkCompletions.
     */
    data: HomeworkCompletionCreateManyInput | HomeworkCompletionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HomeworkCompletion update
   */
  export type HomeworkCompletionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * The data needed to update a HomeworkCompletion.
     */
    data: XOR<HomeworkCompletionUpdateInput, HomeworkCompletionUncheckedUpdateInput>
    /**
     * Choose, which HomeworkCompletion to update.
     */
    where: HomeworkCompletionWhereUniqueInput
  }

  /**
   * HomeworkCompletion updateMany
   */
  export type HomeworkCompletionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HomeworkCompletions.
     */
    data: XOR<HomeworkCompletionUpdateManyMutationInput, HomeworkCompletionUncheckedUpdateManyInput>
    /**
     * Filter which HomeworkCompletions to update
     */
    where?: HomeworkCompletionWhereInput
  }

  /**
   * HomeworkCompletion upsert
   */
  export type HomeworkCompletionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * The filter to search for the HomeworkCompletion to update in case it exists.
     */
    where: HomeworkCompletionWhereUniqueInput
    /**
     * In case the HomeworkCompletion found by the `where` argument doesn't exist, create a new HomeworkCompletion with this data.
     */
    create: XOR<HomeworkCompletionCreateInput, HomeworkCompletionUncheckedCreateInput>
    /**
     * In case the HomeworkCompletion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HomeworkCompletionUpdateInput, HomeworkCompletionUncheckedUpdateInput>
  }

  /**
   * HomeworkCompletion delete
   */
  export type HomeworkCompletionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
    /**
     * Filter which HomeworkCompletion to delete.
     */
    where: HomeworkCompletionWhereUniqueInput
  }

  /**
   * HomeworkCompletion deleteMany
   */
  export type HomeworkCompletionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HomeworkCompletions to delete
     */
    where?: HomeworkCompletionWhereInput
  }

  /**
   * HomeworkCompletion.club
   */
  export type HomeworkCompletion$clubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Club
     */
    select?: ClubSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClubInclude<ExtArgs> | null
    where?: ClubWhereInput
  }

  /**
   * HomeworkCompletion without action
   */
  export type HomeworkCompletionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HomeworkCompletion
     */
    select?: HomeworkCompletionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HomeworkCompletionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SchoolScalarFieldEnum: {
    id: 'id',
    name: 'name',
    urn: 'urn',
    dfeNumber: 'dfeNumber',
    address: 'address',
    postcode: 'postcode',
    phone: 'phone',
    email: 'email',
    website: 'website',
    schoolType: 'schoolType',
    minYearGroup: 'minYearGroup',
    maxYearGroup: 'maxYearGroup',
    isActive: 'isActive',
    logoUrl: 'logoUrl',
    settings: 'settings',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SchoolScalarFieldEnum = (typeof SchoolScalarFieldEnum)[keyof typeof SchoolScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    email: 'email',
    emailVerified: 'emailVerified',
    passwordHash: 'passwordHash',
    isActive: 'isActive',
    lastLoginAt: 'lastLoginAt',
    loginAttempts: 'loginAttempts',
    lockedUntil: 'lockedUntil',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    userId: 'userId',
    employeeId: 'employeeId',
    title: 'title',
    firstName: 'firstName',
    lastName: 'lastName',
    displayName: 'displayName',
    teacherType: 'teacherType',
    isHeadTeacher: 'isHeadTeacher',
    isSenCo: 'isSenCo',
    isDSL: 'isDSL',
    isDeputyHead: 'isDeputyHead',
    subjects: 'subjects',
    yearGroups: 'yearGroups',
    qualifications: 'qualifications',
    startDate: 'startDate',
    endDate: 'endDate',
    contractType: 'contractType',
    schoolEmail: 'schoolEmail',
    phoneExtension: 'phoneExtension',
    dbsCheckDate: 'dbsCheckDate',
    dbsCheckNumber: 'dbsCheckNumber',
    safeguardingTraining: 'safeguardingTraining',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    preferredName: 'preferredName',
    dateOfBirth: 'dateOfBirth',
    pupilId: 'pupilId',
    admissionNumber: 'admissionNumber',
    yearGroup: 'yearGroup',
    classId: 'classId',
    admissionDate: 'admissionDate',
    leavingDate: 'leavingDate',
    uln: 'uln',
    upn: 'upn',
    sen: 'sen',
    senCategory: 'senCategory',
    senSupport: 'senSupport',
    pupilPremium: 'pupilPremium',
    freeschoolMeals: 'freeschoolMeals',
    englishAsAdditional: 'englishAsAdditional',
    medicalConditions: 'medicalConditions',
    dietaryRequirements: 'dietaryRequirements',
    houseGroup: 'houseGroup',
    dataRetentionUntil: 'dataRetentionUntil',
    consentGiven: 'consentGiven',
    consentGivenBy: 'consentGivenBy',
    consentDate: 'consentDate',
    consentWithdrawn: 'consentWithdrawn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const ParentScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    userId: 'userId',
    title: 'title',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    alternativeEmail: 'alternativeEmail',
    mobilePhone: 'mobilePhone',
    homePhone: 'homePhone',
    workPhone: 'workPhone',
    addressLine1: 'addressLine1',
    addressLine2: 'addressLine2',
    town: 'town',
    county: 'county',
    postcode: 'postcode',
    isEmergencyContact: 'isEmergencyContact',
    priority: 'priority',
    preferredContact: 'preferredContact',
    canReceiveSMS: 'canReceiveSMS',
    canReceiveEmail: 'canReceiveEmail',
    canReceivePhoneCalls: 'canReceivePhoneCalls',
    canCollectChild: 'canCollectChild',
    canConsentToTrips: 'canConsentToTrips',
    canAccessOnlineInfo: 'canAccessOnlineInfo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParentScalarFieldEnum = (typeof ParentScalarFieldEnum)[keyof typeof ParentScalarFieldEnum]


  export const SchoolAdminScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    jobTitle: 'jobTitle',
    adminLevel: 'adminLevel',
    canManageUsers: 'canManageUsers',
    canManageClasses: 'canManageClasses',
    canManageClubs: 'canManageClubs',
    canViewAnalytics: 'canViewAnalytics',
    canManageSettings: 'canManageSettings',
    canExportData: 'canExportData',
    canAccessAllClasses: 'canAccessAllClasses',
    canViewAllStudents: 'canViewAllStudents',
    canModifyHomework: 'canModifyHomework',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SchoolAdminScalarFieldEnum = (typeof SchoolAdminScalarFieldEnum)[keyof typeof SchoolAdminScalarFieldEnum]


  export const ParentStudentScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    parentId: 'parentId',
    studentId: 'studentId',
    relationshipType: 'relationshipType',
    isPrimaryContact: 'isPrimaryContact',
    isEmergencyContact: 'isEmergencyContact',
    hasParentalResponsibility: 'hasParentalResponsibility',
    canGiveConsent: 'canGiveConsent',
    canCollectChild: 'canCollectChild',
    canAccessRecords: 'canAccessRecords',
    receivesReports: 'receivesReports',
    receivesNotifications: 'receivesNotifications',
    canContactTeachers: 'canContactTeachers',
    custodyArrangement: 'custodyArrangement',
    restrictedAccess: 'restrictedAccess',
    accessNotes: 'accessNotes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ParentStudentScalarFieldEnum = (typeof ParentStudentScalarFieldEnum)[keyof typeof ParentStudentScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    name: 'name',
    description: 'description',
    isDefault: 'isDefault',
    isCustom: 'isCustom',
    isActive: 'isActive',
    priority: 'priority',
    scope: 'scope',
    applicableUserTypes: 'applicableUserTypes',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    resource: 'resource',
    action: 'action',
    scope: 'scope',
    isDefault: 'isDefault',
    isActive: 'isActive',
    category: 'category',
    riskLevel: 'riskLevel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    permissionId: 'permissionId',
    conditions: 'conditions',
    limitations: 'limitations',
    grantedAt: 'grantedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    grantedBy: 'grantedBy'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    userId: 'userId',
    roleId: 'roleId',
    classIds: 'classIds',
    yearGroups: 'yearGroups',
    subjects: 'subjects',
    studentIds: 'studentIds',
    assignedAt: 'assignedAt',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    assignedBy: 'assignedBy',
    assignmentReason: 'assignmentReason',
    additionalPermissions: 'additionalPermissions',
    restrictedPermissions: 'restrictedPermissions',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    name: 'name',
    displayName: 'displayName',
    yearGroups: 'yearGroups',
    keyStages: 'keyStages',
    classType: 'classType',
    subject: 'subject',
    setLevel: 'setLevel',
    academicYear: 'academicYear',
    houseGroup: 'houseGroup',
    houseColor: 'houseColor',
    capacity: 'capacity',
    isActive: 'isActive',
    classroom: 'classroom',
    clubsEnabled: 'clubsEnabled',
    leaderboardEnabled: 'leaderboardEnabled'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const TeacherClassScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    teacherId: 'teacherId',
    classId: 'classId',
    role: 'role',
    isPrimaryTeacher: 'isPrimaryTeacher',
    subjects: 'subjects',
    timeAllocation: 'timeAllocation',
    timetableSlots: 'timetableSlots',
    canMarkHomework: 'canMarkHomework',
    canAssignClubs: 'canAssignClubs',
    canViewProgress: 'canViewProgress',
    canContactParents: 'canContactParents',
    startDate: 'startDate',
    endDate: 'endDate',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeacherClassScalarFieldEnum = (typeof TeacherClassScalarFieldEnum)[keyof typeof TeacherClassScalarFieldEnum]


  export const ClubScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    name: 'name',
    description: 'description',
    clubType: 'clubType',
    subject: 'subject',
    isActive: 'isActive',
    ageGroups: 'ageGroups',
    keyStages: 'keyStages',
    hasLevels: 'hasLevels',
    levelNaming: 'levelNaming',
    customLevels: 'customLevels',
    evidenceType: 'evidenceType',
    logbookRequired: 'logbookRequired',
    parentInvolvement: 'parentInvolvement',
    maxBuddyMembers: 'maxBuddyMembers',
    buddyGroupsEnabled: 'buddyGroupsEnabled',
    xpPerCompletion: 'xpPerCompletion',
    streakEnabled: 'streakEnabled',
    iconUrl: 'iconUrl',
    color: 'color',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClubScalarFieldEnum = (typeof ClubScalarFieldEnum)[keyof typeof ClubScalarFieldEnum]


  export const HomeworkCompletionScalarFieldEnum: {
    id: 'id',
    schoolId: 'schoolId',
    studentId: 'studentId',
    clubId: 'clubId',
    completionDate: 'completionDate',
    evidenceType: 'evidenceType',
    evidenceUrl: 'evidenceUrl',
    notes: 'notes',
    parentNotes: 'parentNotes',
    timeSpentMinutes: 'timeSpentMinutes',
    wasLate: 'wasLate',
    verifiedBy: 'verifiedBy',
    verifiedAt: 'verifiedAt',
    isVerified: 'isVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HomeworkCompletionScalarFieldEnum = (typeof HomeworkCompletionScalarFieldEnum)[keyof typeof HomeworkCompletionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'SchoolType'
   */
  export type EnumSchoolTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SchoolType'>
    


  /**
   * Reference to a field of type 'SchoolType[]'
   */
  export type ListEnumSchoolTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SchoolType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'TeacherType'
   */
  export type EnumTeacherTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeacherType'>
    


  /**
   * Reference to a field of type 'TeacherType[]'
   */
  export type ListEnumTeacherTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeacherType[]'>
    


  /**
   * Reference to a field of type 'ContractType'
   */
  export type EnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType'>
    


  /**
   * Reference to a field of type 'ContractType[]'
   */
  export type ListEnumContractTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContractType[]'>
    


  /**
   * Reference to a field of type 'ContactMethod'
   */
  export type EnumContactMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactMethod'>
    


  /**
   * Reference to a field of type 'ContactMethod[]'
   */
  export type ListEnumContactMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ContactMethod[]'>
    


  /**
   * Reference to a field of type 'AdminLevel'
   */
  export type EnumAdminLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminLevel'>
    


  /**
   * Reference to a field of type 'AdminLevel[]'
   */
  export type ListEnumAdminLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AdminLevel[]'>
    


  /**
   * Reference to a field of type 'ParentType'
   */
  export type EnumParentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParentType'>
    


  /**
   * Reference to a field of type 'ParentType[]'
   */
  export type ListEnumParentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ParentType[]'>
    


  /**
   * Reference to a field of type 'RoleScope'
   */
  export type EnumRoleScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleScope'>
    


  /**
   * Reference to a field of type 'RoleScope[]'
   */
  export type ListEnumRoleScopeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RoleScope[]'>
    


  /**
   * Reference to a field of type 'UserType[]'
   */
  export type ListEnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType[]'>
    


  /**
   * Reference to a field of type 'UserType'
   */
  export type EnumUserTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserType'>
    


  /**
   * Reference to a field of type 'PermissionCategory'
   */
  export type EnumPermissionCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PermissionCategory'>
    


  /**
   * Reference to a field of type 'PermissionCategory[]'
   */
  export type ListEnumPermissionCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PermissionCategory[]'>
    


  /**
   * Reference to a field of type 'RiskLevel'
   */
  export type EnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel'>
    


  /**
   * Reference to a field of type 'RiskLevel[]'
   */
  export type ListEnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel[]'>
    


  /**
   * Reference to a field of type 'KeyStage[]'
   */
  export type ListEnumKeyStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KeyStage[]'>
    


  /**
   * Reference to a field of type 'KeyStage'
   */
  export type EnumKeyStageFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KeyStage'>
    


  /**
   * Reference to a field of type 'ClassType'
   */
  export type EnumClassTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClassType'>
    


  /**
   * Reference to a field of type 'ClassType[]'
   */
  export type ListEnumClassTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClassType[]'>
    


  /**
   * Reference to a field of type 'ClassRole'
   */
  export type EnumClassRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClassRole'>
    


  /**
   * Reference to a field of type 'ClassRole[]'
   */
  export type ListEnumClassRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClassRole[]'>
    


  /**
   * Reference to a field of type 'ClubType'
   */
  export type EnumClubTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubType'>
    


  /**
   * Reference to a field of type 'ClubType[]'
   */
  export type ListEnumClubTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubType[]'>
    


  /**
   * Reference to a field of type 'ClubEvidenceType'
   */
  export type EnumClubEvidenceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubEvidenceType'>
    


  /**
   * Reference to a field of type 'ClubEvidenceType[]'
   */
  export type ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ClubEvidenceType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type SchoolWhereInput = {
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    id?: StringFilter<"School"> | string
    name?: StringFilter<"School"> | string
    urn?: StringNullableFilter<"School"> | string | null
    dfeNumber?: StringNullableFilter<"School"> | string | null
    address?: StringFilter<"School"> | string
    postcode?: StringFilter<"School"> | string
    phone?: StringFilter<"School"> | string
    email?: StringFilter<"School"> | string
    website?: StringNullableFilter<"School"> | string | null
    schoolType?: EnumSchoolTypeFilter<"School"> | $Enums.SchoolType
    minYearGroup?: IntFilter<"School"> | number
    maxYearGroup?: IntFilter<"School"> | number
    isActive?: BoolFilter<"School"> | boolean
    logoUrl?: StringNullableFilter<"School"> | string | null
    settings?: JsonNullableFilter<"School">
    createdAt?: DateTimeFilter<"School"> | Date | string
    updatedAt?: DateTimeFilter<"School"> | Date | string
    users?: UserListRelationFilter
    teachers?: TeacherListRelationFilter
    students?: StudentListRelationFilter
    parents?: ParentListRelationFilter
    schoolAdmins?: SchoolAdminListRelationFilter
    classes?: ClassListRelationFilter
    clubs?: ClubListRelationFilter
    parentStudents?: ParentStudentListRelationFilter
    teacherClasses?: TeacherClassListRelationFilter
    roles?: RoleListRelationFilter
    userRoles?: UserRoleListRelationFilter
    homeworkCompletions?: HomeworkCompletionListRelationFilter
  }

  export type SchoolOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    urn?: SortOrderInput | SortOrder
    dfeNumber?: SortOrderInput | SortOrder
    address?: SortOrder
    postcode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrderInput | SortOrder
    schoolType?: SortOrder
    minYearGroup?: SortOrder
    maxYearGroup?: SortOrder
    isActive?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    teachers?: TeacherOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
    parents?: ParentOrderByRelationAggregateInput
    schoolAdmins?: SchoolAdminOrderByRelationAggregateInput
    classes?: ClassOrderByRelationAggregateInput
    clubs?: ClubOrderByRelationAggregateInput
    parentStudents?: ParentStudentOrderByRelationAggregateInput
    teacherClasses?: TeacherClassOrderByRelationAggregateInput
    roles?: RoleOrderByRelationAggregateInput
    userRoles?: UserRoleOrderByRelationAggregateInput
    homeworkCompletions?: HomeworkCompletionOrderByRelationAggregateInput
  }

  export type SchoolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    urn?: string
    dfeNumber?: string
    email?: string
    AND?: SchoolWhereInput | SchoolWhereInput[]
    OR?: SchoolWhereInput[]
    NOT?: SchoolWhereInput | SchoolWhereInput[]
    name?: StringFilter<"School"> | string
    address?: StringFilter<"School"> | string
    postcode?: StringFilter<"School"> | string
    phone?: StringFilter<"School"> | string
    website?: StringNullableFilter<"School"> | string | null
    schoolType?: EnumSchoolTypeFilter<"School"> | $Enums.SchoolType
    minYearGroup?: IntFilter<"School"> | number
    maxYearGroup?: IntFilter<"School"> | number
    isActive?: BoolFilter<"School"> | boolean
    logoUrl?: StringNullableFilter<"School"> | string | null
    settings?: JsonNullableFilter<"School">
    createdAt?: DateTimeFilter<"School"> | Date | string
    updatedAt?: DateTimeFilter<"School"> | Date | string
    users?: UserListRelationFilter
    teachers?: TeacherListRelationFilter
    students?: StudentListRelationFilter
    parents?: ParentListRelationFilter
    schoolAdmins?: SchoolAdminListRelationFilter
    classes?: ClassListRelationFilter
    clubs?: ClubListRelationFilter
    parentStudents?: ParentStudentListRelationFilter
    teacherClasses?: TeacherClassListRelationFilter
    roles?: RoleListRelationFilter
    userRoles?: UserRoleListRelationFilter
    homeworkCompletions?: HomeworkCompletionListRelationFilter
  }, "id" | "urn" | "dfeNumber" | "email">

  export type SchoolOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    urn?: SortOrderInput | SortOrder
    dfeNumber?: SortOrderInput | SortOrder
    address?: SortOrder
    postcode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrderInput | SortOrder
    schoolType?: SortOrder
    minYearGroup?: SortOrder
    maxYearGroup?: SortOrder
    isActive?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    settings?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SchoolCountOrderByAggregateInput
    _avg?: SchoolAvgOrderByAggregateInput
    _max?: SchoolMaxOrderByAggregateInput
    _min?: SchoolMinOrderByAggregateInput
    _sum?: SchoolSumOrderByAggregateInput
  }

  export type SchoolScalarWhereWithAggregatesInput = {
    AND?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    OR?: SchoolScalarWhereWithAggregatesInput[]
    NOT?: SchoolScalarWhereWithAggregatesInput | SchoolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"School"> | string
    name?: StringWithAggregatesFilter<"School"> | string
    urn?: StringNullableWithAggregatesFilter<"School"> | string | null
    dfeNumber?: StringNullableWithAggregatesFilter<"School"> | string | null
    address?: StringWithAggregatesFilter<"School"> | string
    postcode?: StringWithAggregatesFilter<"School"> | string
    phone?: StringWithAggregatesFilter<"School"> | string
    email?: StringWithAggregatesFilter<"School"> | string
    website?: StringNullableWithAggregatesFilter<"School"> | string | null
    schoolType?: EnumSchoolTypeWithAggregatesFilter<"School"> | $Enums.SchoolType
    minYearGroup?: IntWithAggregatesFilter<"School"> | number
    maxYearGroup?: IntWithAggregatesFilter<"School"> | number
    isActive?: BoolWithAggregatesFilter<"School"> | boolean
    logoUrl?: StringNullableWithAggregatesFilter<"School"> | string | null
    settings?: JsonNullableWithAggregatesFilter<"School">
    createdAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"School"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    schoolId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    loginAttempts?: IntFilter<"User"> | number
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    parent?: XOR<ParentNullableRelationFilter, ParentWhereInput> | null
    schoolAdmin?: XOR<SchoolAdminNullableRelationFilter, SchoolAdminWhereInput> | null
    userRoles?: UserRoleListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    loginAttempts?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teacher?: TeacherOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    parent?: ParentOrderByWithRelationInput
    schoolAdmin?: SchoolAdminOrderByWithRelationInput
    userRoles?: UserRoleOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    school?: SchoolOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    schoolId?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    loginAttempts?: IntFilter<"User"> | number
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    teacher?: XOR<TeacherNullableRelationFilter, TeacherWhereInput> | null
    student?: XOR<StudentNullableRelationFilter, StudentWhereInput> | null
    parent?: XOR<ParentNullableRelationFilter, ParentWhereInput> | null
    schoolAdmin?: XOR<SchoolAdminNullableRelationFilter, SchoolAdminWhereInput> | null
    userRoles?: UserRoleListRelationFilter
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrderInput | SortOrder
    passwordHash?: SortOrderInput | SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    loginAttempts?: SortOrder
    lockedUntil?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    schoolId?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    passwordHash?: StringNullableWithAggregatesFilter<"User"> | string | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    loginAttempts?: IntWithAggregatesFilter<"User"> | number
    lockedUntil?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: StringFilter<"Teacher"> | string
    schoolId?: StringFilter<"Teacher"> | string
    userId?: StringFilter<"Teacher"> | string
    employeeId?: StringNullableFilter<"Teacher"> | string | null
    title?: StringFilter<"Teacher"> | string
    firstName?: StringFilter<"Teacher"> | string
    lastName?: StringFilter<"Teacher"> | string
    displayName?: StringNullableFilter<"Teacher"> | string | null
    teacherType?: EnumTeacherTypeFilter<"Teacher"> | $Enums.TeacherType
    isHeadTeacher?: BoolFilter<"Teacher"> | boolean
    isSenCo?: BoolFilter<"Teacher"> | boolean
    isDSL?: BoolFilter<"Teacher"> | boolean
    isDeputyHead?: BoolFilter<"Teacher"> | boolean
    subjects?: StringNullableListFilter<"Teacher">
    yearGroups?: IntNullableListFilter<"Teacher">
    qualifications?: JsonNullableFilter<"Teacher">
    startDate?: DateTimeFilter<"Teacher"> | Date | string
    endDate?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    contractType?: EnumContractTypeFilter<"Teacher"> | $Enums.ContractType
    schoolEmail?: StringNullableFilter<"Teacher"> | string | null
    phoneExtension?: StringNullableFilter<"Teacher"> | string | null
    dbsCheckDate?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    dbsCheckNumber?: StringNullableFilter<"Teacher"> | string | null
    safeguardingTraining?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    updatedAt?: DateTimeFilter<"Teacher"> | Date | string
    teacherClasses?: TeacherClassListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrderInput | SortOrder
    teacherType?: SortOrder
    isHeadTeacher?: SortOrder
    isSenCo?: SortOrder
    isDSL?: SortOrder
    isDeputyHead?: SortOrder
    subjects?: SortOrder
    yearGroups?: SortOrder
    qualifications?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    contractType?: SortOrder
    schoolEmail?: SortOrderInput | SortOrder
    phoneExtension?: SortOrderInput | SortOrder
    dbsCheckDate?: SortOrderInput | SortOrder
    dbsCheckNumber?: SortOrderInput | SortOrder
    safeguardingTraining?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teacherClasses?: TeacherClassOrderByRelationAggregateInput
    school?: SchoolOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    schoolId?: StringFilter<"Teacher"> | string
    employeeId?: StringNullableFilter<"Teacher"> | string | null
    title?: StringFilter<"Teacher"> | string
    firstName?: StringFilter<"Teacher"> | string
    lastName?: StringFilter<"Teacher"> | string
    displayName?: StringNullableFilter<"Teacher"> | string | null
    teacherType?: EnumTeacherTypeFilter<"Teacher"> | $Enums.TeacherType
    isHeadTeacher?: BoolFilter<"Teacher"> | boolean
    isSenCo?: BoolFilter<"Teacher"> | boolean
    isDSL?: BoolFilter<"Teacher"> | boolean
    isDeputyHead?: BoolFilter<"Teacher"> | boolean
    subjects?: StringNullableListFilter<"Teacher">
    yearGroups?: IntNullableListFilter<"Teacher">
    qualifications?: JsonNullableFilter<"Teacher">
    startDate?: DateTimeFilter<"Teacher"> | Date | string
    endDate?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    contractType?: EnumContractTypeFilter<"Teacher"> | $Enums.ContractType
    schoolEmail?: StringNullableFilter<"Teacher"> | string | null
    phoneExtension?: StringNullableFilter<"Teacher"> | string | null
    dbsCheckDate?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    dbsCheckNumber?: StringNullableFilter<"Teacher"> | string | null
    safeguardingTraining?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    updatedAt?: DateTimeFilter<"Teacher"> | Date | string
    teacherClasses?: TeacherClassListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrderInput | SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrderInput | SortOrder
    teacherType?: SortOrder
    isHeadTeacher?: SortOrder
    isSenCo?: SortOrder
    isDSL?: SortOrder
    isDeputyHead?: SortOrder
    subjects?: SortOrder
    yearGroups?: SortOrder
    qualifications?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    contractType?: SortOrder
    schoolEmail?: SortOrderInput | SortOrder
    phoneExtension?: SortOrderInput | SortOrder
    dbsCheckDate?: SortOrderInput | SortOrder
    dbsCheckNumber?: SortOrderInput | SortOrder
    safeguardingTraining?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Teacher"> | string
    schoolId?: StringWithAggregatesFilter<"Teacher"> | string
    userId?: StringWithAggregatesFilter<"Teacher"> | string
    employeeId?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    title?: StringWithAggregatesFilter<"Teacher"> | string
    firstName?: StringWithAggregatesFilter<"Teacher"> | string
    lastName?: StringWithAggregatesFilter<"Teacher"> | string
    displayName?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    teacherType?: EnumTeacherTypeWithAggregatesFilter<"Teacher"> | $Enums.TeacherType
    isHeadTeacher?: BoolWithAggregatesFilter<"Teacher"> | boolean
    isSenCo?: BoolWithAggregatesFilter<"Teacher"> | boolean
    isDSL?: BoolWithAggregatesFilter<"Teacher"> | boolean
    isDeputyHead?: BoolWithAggregatesFilter<"Teacher"> | boolean
    subjects?: StringNullableListFilter<"Teacher">
    yearGroups?: IntNullableListFilter<"Teacher">
    qualifications?: JsonNullableWithAggregatesFilter<"Teacher">
    startDate?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Teacher"> | Date | string | null
    contractType?: EnumContractTypeWithAggregatesFilter<"Teacher"> | $Enums.ContractType
    schoolEmail?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    phoneExtension?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    dbsCheckDate?: DateTimeNullableWithAggregatesFilter<"Teacher"> | Date | string | null
    dbsCheckNumber?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    safeguardingTraining?: DateTimeNullableWithAggregatesFilter<"Teacher"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Teacher"> | Date | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    id?: StringFilter<"Student"> | string
    schoolId?: StringFilter<"Student"> | string
    userId?: StringNullableFilter<"Student"> | string | null
    firstName?: StringFilter<"Student"> | string
    lastName?: StringFilter<"Student"> | string
    preferredName?: StringNullableFilter<"Student"> | string | null
    dateOfBirth?: DateTimeFilter<"Student"> | Date | string
    pupilId?: StringFilter<"Student"> | string
    admissionNumber?: StringNullableFilter<"Student"> | string | null
    yearGroup?: IntFilter<"Student"> | number
    classId?: StringFilter<"Student"> | string
    admissionDate?: DateTimeFilter<"Student"> | Date | string
    leavingDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    uln?: StringNullableFilter<"Student"> | string | null
    upn?: StringNullableFilter<"Student"> | string | null
    sen?: BoolFilter<"Student"> | boolean
    senCategory?: StringNullableFilter<"Student"> | string | null
    senSupport?: JsonNullableFilter<"Student">
    pupilPremium?: BoolFilter<"Student"> | boolean
    freeschoolMeals?: BoolFilter<"Student"> | boolean
    englishAsAdditional?: BoolFilter<"Student"> | boolean
    medicalConditions?: JsonNullableFilter<"Student">
    dietaryRequirements?: JsonNullableFilter<"Student">
    houseGroup?: StringNullableFilter<"Student"> | string | null
    dataRetentionUntil?: DateTimeFilter<"Student"> | Date | string
    consentGiven?: BoolFilter<"Student"> | boolean
    consentGivenBy?: StringNullableFilter<"Student"> | string | null
    consentDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    consentWithdrawn?: BoolFilter<"Student"> | boolean
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    parentStudents?: ParentStudentListRelationFilter
    homeworkCompletions?: HomeworkCompletionListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }

  export type StudentOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    preferredName?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrder
    pupilId?: SortOrder
    admissionNumber?: SortOrderInput | SortOrder
    yearGroup?: SortOrder
    classId?: SortOrder
    admissionDate?: SortOrder
    leavingDate?: SortOrderInput | SortOrder
    uln?: SortOrderInput | SortOrder
    upn?: SortOrderInput | SortOrder
    sen?: SortOrder
    senCategory?: SortOrderInput | SortOrder
    senSupport?: SortOrderInput | SortOrder
    pupilPremium?: SortOrder
    freeschoolMeals?: SortOrder
    englishAsAdditional?: SortOrder
    medicalConditions?: SortOrderInput | SortOrder
    dietaryRequirements?: SortOrderInput | SortOrder
    houseGroup?: SortOrderInput | SortOrder
    dataRetentionUntil?: SortOrder
    consentGiven?: SortOrder
    consentGivenBy?: SortOrderInput | SortOrder
    consentDate?: SortOrderInput | SortOrder
    consentWithdrawn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentStudents?: ParentStudentOrderByRelationAggregateInput
    homeworkCompletions?: HomeworkCompletionOrderByRelationAggregateInput
    school?: SchoolOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    schoolId?: StringFilter<"Student"> | string
    firstName?: StringFilter<"Student"> | string
    lastName?: StringFilter<"Student"> | string
    preferredName?: StringNullableFilter<"Student"> | string | null
    dateOfBirth?: DateTimeFilter<"Student"> | Date | string
    pupilId?: StringFilter<"Student"> | string
    admissionNumber?: StringNullableFilter<"Student"> | string | null
    yearGroup?: IntFilter<"Student"> | number
    classId?: StringFilter<"Student"> | string
    admissionDate?: DateTimeFilter<"Student"> | Date | string
    leavingDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    uln?: StringNullableFilter<"Student"> | string | null
    upn?: StringNullableFilter<"Student"> | string | null
    sen?: BoolFilter<"Student"> | boolean
    senCategory?: StringNullableFilter<"Student"> | string | null
    senSupport?: JsonNullableFilter<"Student">
    pupilPremium?: BoolFilter<"Student"> | boolean
    freeschoolMeals?: BoolFilter<"Student"> | boolean
    englishAsAdditional?: BoolFilter<"Student"> | boolean
    medicalConditions?: JsonNullableFilter<"Student">
    dietaryRequirements?: JsonNullableFilter<"Student">
    houseGroup?: StringNullableFilter<"Student"> | string | null
    dataRetentionUntil?: DateTimeFilter<"Student"> | Date | string
    consentGiven?: BoolFilter<"Student"> | boolean
    consentGivenBy?: StringNullableFilter<"Student"> | string | null
    consentDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    consentWithdrawn?: BoolFilter<"Student"> | boolean
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
    parentStudents?: ParentStudentListRelationFilter
    homeworkCompletions?: HomeworkCompletionListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }, "id" | "userId">

  export type StudentOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    preferredName?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrder
    pupilId?: SortOrder
    admissionNumber?: SortOrderInput | SortOrder
    yearGroup?: SortOrder
    classId?: SortOrder
    admissionDate?: SortOrder
    leavingDate?: SortOrderInput | SortOrder
    uln?: SortOrderInput | SortOrder
    upn?: SortOrderInput | SortOrder
    sen?: SortOrder
    senCategory?: SortOrderInput | SortOrder
    senSupport?: SortOrderInput | SortOrder
    pupilPremium?: SortOrder
    freeschoolMeals?: SortOrder
    englishAsAdditional?: SortOrder
    medicalConditions?: SortOrderInput | SortOrder
    dietaryRequirements?: SortOrderInput | SortOrder
    houseGroup?: SortOrderInput | SortOrder
    dataRetentionUntil?: SortOrder
    consentGiven?: SortOrder
    consentGivenBy?: SortOrderInput | SortOrder
    consentDate?: SortOrderInput | SortOrder
    consentWithdrawn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _avg?: StudentAvgOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
    _sum?: StudentSumOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Student"> | string
    schoolId?: StringWithAggregatesFilter<"Student"> | string
    userId?: StringNullableWithAggregatesFilter<"Student"> | string | null
    firstName?: StringWithAggregatesFilter<"Student"> | string
    lastName?: StringWithAggregatesFilter<"Student"> | string
    preferredName?: StringNullableWithAggregatesFilter<"Student"> | string | null
    dateOfBirth?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    pupilId?: StringWithAggregatesFilter<"Student"> | string
    admissionNumber?: StringNullableWithAggregatesFilter<"Student"> | string | null
    yearGroup?: IntWithAggregatesFilter<"Student"> | number
    classId?: StringWithAggregatesFilter<"Student"> | string
    admissionDate?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    leavingDate?: DateTimeNullableWithAggregatesFilter<"Student"> | Date | string | null
    uln?: StringNullableWithAggregatesFilter<"Student"> | string | null
    upn?: StringNullableWithAggregatesFilter<"Student"> | string | null
    sen?: BoolWithAggregatesFilter<"Student"> | boolean
    senCategory?: StringNullableWithAggregatesFilter<"Student"> | string | null
    senSupport?: JsonNullableWithAggregatesFilter<"Student">
    pupilPremium?: BoolWithAggregatesFilter<"Student"> | boolean
    freeschoolMeals?: BoolWithAggregatesFilter<"Student"> | boolean
    englishAsAdditional?: BoolWithAggregatesFilter<"Student"> | boolean
    medicalConditions?: JsonNullableWithAggregatesFilter<"Student">
    dietaryRequirements?: JsonNullableWithAggregatesFilter<"Student">
    houseGroup?: StringNullableWithAggregatesFilter<"Student"> | string | null
    dataRetentionUntil?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    consentGiven?: BoolWithAggregatesFilter<"Student"> | boolean
    consentGivenBy?: StringNullableWithAggregatesFilter<"Student"> | string | null
    consentDate?: DateTimeNullableWithAggregatesFilter<"Student"> | Date | string | null
    consentWithdrawn?: BoolWithAggregatesFilter<"Student"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Student"> | Date | string
  }

  export type ParentWhereInput = {
    AND?: ParentWhereInput | ParentWhereInput[]
    OR?: ParentWhereInput[]
    NOT?: ParentWhereInput | ParentWhereInput[]
    id?: StringFilter<"Parent"> | string
    schoolId?: StringFilter<"Parent"> | string
    userId?: StringFilter<"Parent"> | string
    title?: StringNullableFilter<"Parent"> | string | null
    firstName?: StringFilter<"Parent"> | string
    lastName?: StringFilter<"Parent"> | string
    email?: StringFilter<"Parent"> | string
    alternativeEmail?: StringNullableFilter<"Parent"> | string | null
    mobilePhone?: StringNullableFilter<"Parent"> | string | null
    homePhone?: StringNullableFilter<"Parent"> | string | null
    workPhone?: StringNullableFilter<"Parent"> | string | null
    addressLine1?: StringNullableFilter<"Parent"> | string | null
    addressLine2?: StringNullableFilter<"Parent"> | string | null
    town?: StringNullableFilter<"Parent"> | string | null
    county?: StringNullableFilter<"Parent"> | string | null
    postcode?: StringNullableFilter<"Parent"> | string | null
    isEmergencyContact?: BoolFilter<"Parent"> | boolean
    priority?: IntNullableFilter<"Parent"> | number | null
    preferredContact?: EnumContactMethodFilter<"Parent"> | $Enums.ContactMethod
    canReceiveSMS?: BoolFilter<"Parent"> | boolean
    canReceiveEmail?: BoolFilter<"Parent"> | boolean
    canReceivePhoneCalls?: BoolFilter<"Parent"> | boolean
    canCollectChild?: BoolFilter<"Parent"> | boolean
    canConsentToTrips?: BoolFilter<"Parent"> | boolean
    canAccessOnlineInfo?: BoolFilter<"Parent"> | boolean
    createdAt?: DateTimeFilter<"Parent"> | Date | string
    updatedAt?: DateTimeFilter<"Parent"> | Date | string
    parentStudents?: ParentStudentListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ParentOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    title?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    alternativeEmail?: SortOrderInput | SortOrder
    mobilePhone?: SortOrderInput | SortOrder
    homePhone?: SortOrderInput | SortOrder
    workPhone?: SortOrderInput | SortOrder
    addressLine1?: SortOrderInput | SortOrder
    addressLine2?: SortOrderInput | SortOrder
    town?: SortOrderInput | SortOrder
    county?: SortOrderInput | SortOrder
    postcode?: SortOrderInput | SortOrder
    isEmergencyContact?: SortOrder
    priority?: SortOrderInput | SortOrder
    preferredContact?: SortOrder
    canReceiveSMS?: SortOrder
    canReceiveEmail?: SortOrder
    canReceivePhoneCalls?: SortOrder
    canCollectChild?: SortOrder
    canConsentToTrips?: SortOrder
    canAccessOnlineInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parentStudents?: ParentStudentOrderByRelationAggregateInput
    school?: SchoolOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ParentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ParentWhereInput | ParentWhereInput[]
    OR?: ParentWhereInput[]
    NOT?: ParentWhereInput | ParentWhereInput[]
    schoolId?: StringFilter<"Parent"> | string
    title?: StringNullableFilter<"Parent"> | string | null
    firstName?: StringFilter<"Parent"> | string
    lastName?: StringFilter<"Parent"> | string
    email?: StringFilter<"Parent"> | string
    alternativeEmail?: StringNullableFilter<"Parent"> | string | null
    mobilePhone?: StringNullableFilter<"Parent"> | string | null
    homePhone?: StringNullableFilter<"Parent"> | string | null
    workPhone?: StringNullableFilter<"Parent"> | string | null
    addressLine1?: StringNullableFilter<"Parent"> | string | null
    addressLine2?: StringNullableFilter<"Parent"> | string | null
    town?: StringNullableFilter<"Parent"> | string | null
    county?: StringNullableFilter<"Parent"> | string | null
    postcode?: StringNullableFilter<"Parent"> | string | null
    isEmergencyContact?: BoolFilter<"Parent"> | boolean
    priority?: IntNullableFilter<"Parent"> | number | null
    preferredContact?: EnumContactMethodFilter<"Parent"> | $Enums.ContactMethod
    canReceiveSMS?: BoolFilter<"Parent"> | boolean
    canReceiveEmail?: BoolFilter<"Parent"> | boolean
    canReceivePhoneCalls?: BoolFilter<"Parent"> | boolean
    canCollectChild?: BoolFilter<"Parent"> | boolean
    canConsentToTrips?: BoolFilter<"Parent"> | boolean
    canAccessOnlineInfo?: BoolFilter<"Parent"> | boolean
    createdAt?: DateTimeFilter<"Parent"> | Date | string
    updatedAt?: DateTimeFilter<"Parent"> | Date | string
    parentStudents?: ParentStudentListRelationFilter
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ParentOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    title?: SortOrderInput | SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    alternativeEmail?: SortOrderInput | SortOrder
    mobilePhone?: SortOrderInput | SortOrder
    homePhone?: SortOrderInput | SortOrder
    workPhone?: SortOrderInput | SortOrder
    addressLine1?: SortOrderInput | SortOrder
    addressLine2?: SortOrderInput | SortOrder
    town?: SortOrderInput | SortOrder
    county?: SortOrderInput | SortOrder
    postcode?: SortOrderInput | SortOrder
    isEmergencyContact?: SortOrder
    priority?: SortOrderInput | SortOrder
    preferredContact?: SortOrder
    canReceiveSMS?: SortOrder
    canReceiveEmail?: SortOrder
    canReceivePhoneCalls?: SortOrder
    canCollectChild?: SortOrder
    canConsentToTrips?: SortOrder
    canAccessOnlineInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParentCountOrderByAggregateInput
    _avg?: ParentAvgOrderByAggregateInput
    _max?: ParentMaxOrderByAggregateInput
    _min?: ParentMinOrderByAggregateInput
    _sum?: ParentSumOrderByAggregateInput
  }

  export type ParentScalarWhereWithAggregatesInput = {
    AND?: ParentScalarWhereWithAggregatesInput | ParentScalarWhereWithAggregatesInput[]
    OR?: ParentScalarWhereWithAggregatesInput[]
    NOT?: ParentScalarWhereWithAggregatesInput | ParentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Parent"> | string
    schoolId?: StringWithAggregatesFilter<"Parent"> | string
    userId?: StringWithAggregatesFilter<"Parent"> | string
    title?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    firstName?: StringWithAggregatesFilter<"Parent"> | string
    lastName?: StringWithAggregatesFilter<"Parent"> | string
    email?: StringWithAggregatesFilter<"Parent"> | string
    alternativeEmail?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    mobilePhone?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    homePhone?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    workPhone?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    addressLine1?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    addressLine2?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    town?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    county?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    postcode?: StringNullableWithAggregatesFilter<"Parent"> | string | null
    isEmergencyContact?: BoolWithAggregatesFilter<"Parent"> | boolean
    priority?: IntNullableWithAggregatesFilter<"Parent"> | number | null
    preferredContact?: EnumContactMethodWithAggregatesFilter<"Parent"> | $Enums.ContactMethod
    canReceiveSMS?: BoolWithAggregatesFilter<"Parent"> | boolean
    canReceiveEmail?: BoolWithAggregatesFilter<"Parent"> | boolean
    canReceivePhoneCalls?: BoolWithAggregatesFilter<"Parent"> | boolean
    canCollectChild?: BoolWithAggregatesFilter<"Parent"> | boolean
    canConsentToTrips?: BoolWithAggregatesFilter<"Parent"> | boolean
    canAccessOnlineInfo?: BoolWithAggregatesFilter<"Parent"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Parent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Parent"> | Date | string
  }

  export type SchoolAdminWhereInput = {
    AND?: SchoolAdminWhereInput | SchoolAdminWhereInput[]
    OR?: SchoolAdminWhereInput[]
    NOT?: SchoolAdminWhereInput | SchoolAdminWhereInput[]
    id?: StringFilter<"SchoolAdmin"> | string
    schoolId?: StringFilter<"SchoolAdmin"> | string
    userId?: StringFilter<"SchoolAdmin"> | string
    firstName?: StringFilter<"SchoolAdmin"> | string
    lastName?: StringFilter<"SchoolAdmin"> | string
    jobTitle?: StringFilter<"SchoolAdmin"> | string
    adminLevel?: EnumAdminLevelFilter<"SchoolAdmin"> | $Enums.AdminLevel
    canManageUsers?: BoolFilter<"SchoolAdmin"> | boolean
    canManageClasses?: BoolFilter<"SchoolAdmin"> | boolean
    canManageClubs?: BoolFilter<"SchoolAdmin"> | boolean
    canViewAnalytics?: BoolFilter<"SchoolAdmin"> | boolean
    canManageSettings?: BoolFilter<"SchoolAdmin"> | boolean
    canExportData?: BoolFilter<"SchoolAdmin"> | boolean
    canAccessAllClasses?: BoolFilter<"SchoolAdmin"> | boolean
    canViewAllStudents?: BoolFilter<"SchoolAdmin"> | boolean
    canModifyHomework?: BoolFilter<"SchoolAdmin"> | boolean
    createdAt?: DateTimeFilter<"SchoolAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"SchoolAdmin"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SchoolAdminOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    adminLevel?: SortOrder
    canManageUsers?: SortOrder
    canManageClasses?: SortOrder
    canManageClubs?: SortOrder
    canViewAnalytics?: SortOrder
    canManageSettings?: SortOrder
    canExportData?: SortOrder
    canAccessAllClasses?: SortOrder
    canViewAllStudents?: SortOrder
    canModifyHomework?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SchoolAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: SchoolAdminWhereInput | SchoolAdminWhereInput[]
    OR?: SchoolAdminWhereInput[]
    NOT?: SchoolAdminWhereInput | SchoolAdminWhereInput[]
    schoolId?: StringFilter<"SchoolAdmin"> | string
    firstName?: StringFilter<"SchoolAdmin"> | string
    lastName?: StringFilter<"SchoolAdmin"> | string
    jobTitle?: StringFilter<"SchoolAdmin"> | string
    adminLevel?: EnumAdminLevelFilter<"SchoolAdmin"> | $Enums.AdminLevel
    canManageUsers?: BoolFilter<"SchoolAdmin"> | boolean
    canManageClasses?: BoolFilter<"SchoolAdmin"> | boolean
    canManageClubs?: BoolFilter<"SchoolAdmin"> | boolean
    canViewAnalytics?: BoolFilter<"SchoolAdmin"> | boolean
    canManageSettings?: BoolFilter<"SchoolAdmin"> | boolean
    canExportData?: BoolFilter<"SchoolAdmin"> | boolean
    canAccessAllClasses?: BoolFilter<"SchoolAdmin"> | boolean
    canViewAllStudents?: BoolFilter<"SchoolAdmin"> | boolean
    canModifyHomework?: BoolFilter<"SchoolAdmin"> | boolean
    createdAt?: DateTimeFilter<"SchoolAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"SchoolAdmin"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type SchoolAdminOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    adminLevel?: SortOrder
    canManageUsers?: SortOrder
    canManageClasses?: SortOrder
    canManageClubs?: SortOrder
    canViewAnalytics?: SortOrder
    canManageSettings?: SortOrder
    canExportData?: SortOrder
    canAccessAllClasses?: SortOrder
    canViewAllStudents?: SortOrder
    canModifyHomework?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SchoolAdminCountOrderByAggregateInput
    _max?: SchoolAdminMaxOrderByAggregateInput
    _min?: SchoolAdminMinOrderByAggregateInput
  }

  export type SchoolAdminScalarWhereWithAggregatesInput = {
    AND?: SchoolAdminScalarWhereWithAggregatesInput | SchoolAdminScalarWhereWithAggregatesInput[]
    OR?: SchoolAdminScalarWhereWithAggregatesInput[]
    NOT?: SchoolAdminScalarWhereWithAggregatesInput | SchoolAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SchoolAdmin"> | string
    schoolId?: StringWithAggregatesFilter<"SchoolAdmin"> | string
    userId?: StringWithAggregatesFilter<"SchoolAdmin"> | string
    firstName?: StringWithAggregatesFilter<"SchoolAdmin"> | string
    lastName?: StringWithAggregatesFilter<"SchoolAdmin"> | string
    jobTitle?: StringWithAggregatesFilter<"SchoolAdmin"> | string
    adminLevel?: EnumAdminLevelWithAggregatesFilter<"SchoolAdmin"> | $Enums.AdminLevel
    canManageUsers?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canManageClasses?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canManageClubs?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canViewAnalytics?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canManageSettings?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canExportData?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canAccessAllClasses?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canViewAllStudents?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    canModifyHomework?: BoolWithAggregatesFilter<"SchoolAdmin"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SchoolAdmin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SchoolAdmin"> | Date | string
  }

  export type ParentStudentWhereInput = {
    AND?: ParentStudentWhereInput | ParentStudentWhereInput[]
    OR?: ParentStudentWhereInput[]
    NOT?: ParentStudentWhereInput | ParentStudentWhereInput[]
    id?: StringFilter<"ParentStudent"> | string
    schoolId?: StringFilter<"ParentStudent"> | string
    parentId?: StringFilter<"ParentStudent"> | string
    studentId?: StringFilter<"ParentStudent"> | string
    relationshipType?: EnumParentTypeFilter<"ParentStudent"> | $Enums.ParentType
    isPrimaryContact?: BoolFilter<"ParentStudent"> | boolean
    isEmergencyContact?: BoolFilter<"ParentStudent"> | boolean
    hasParentalResponsibility?: BoolFilter<"ParentStudent"> | boolean
    canGiveConsent?: BoolFilter<"ParentStudent"> | boolean
    canCollectChild?: BoolFilter<"ParentStudent"> | boolean
    canAccessRecords?: BoolFilter<"ParentStudent"> | boolean
    receivesReports?: BoolFilter<"ParentStudent"> | boolean
    receivesNotifications?: BoolFilter<"ParentStudent"> | boolean
    canContactTeachers?: BoolFilter<"ParentStudent"> | boolean
    custodyArrangement?: StringNullableFilter<"ParentStudent"> | string | null
    restrictedAccess?: BoolFilter<"ParentStudent"> | boolean
    accessNotes?: StringNullableFilter<"ParentStudent"> | string | null
    createdAt?: DateTimeFilter<"ParentStudent"> | Date | string
    updatedAt?: DateTimeFilter<"ParentStudent"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    parent?: XOR<ParentRelationFilter, ParentWhereInput>
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }

  export type ParentStudentOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    parentId?: SortOrder
    studentId?: SortOrder
    relationshipType?: SortOrder
    isPrimaryContact?: SortOrder
    isEmergencyContact?: SortOrder
    hasParentalResponsibility?: SortOrder
    canGiveConsent?: SortOrder
    canCollectChild?: SortOrder
    canAccessRecords?: SortOrder
    receivesReports?: SortOrder
    receivesNotifications?: SortOrder
    canContactTeachers?: SortOrder
    custodyArrangement?: SortOrderInput | SortOrder
    restrictedAccess?: SortOrder
    accessNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    parent?: ParentOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type ParentStudentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    parentId_studentId?: ParentStudentParentIdStudentIdCompoundUniqueInput
    AND?: ParentStudentWhereInput | ParentStudentWhereInput[]
    OR?: ParentStudentWhereInput[]
    NOT?: ParentStudentWhereInput | ParentStudentWhereInput[]
    schoolId?: StringFilter<"ParentStudent"> | string
    parentId?: StringFilter<"ParentStudent"> | string
    studentId?: StringFilter<"ParentStudent"> | string
    relationshipType?: EnumParentTypeFilter<"ParentStudent"> | $Enums.ParentType
    isPrimaryContact?: BoolFilter<"ParentStudent"> | boolean
    isEmergencyContact?: BoolFilter<"ParentStudent"> | boolean
    hasParentalResponsibility?: BoolFilter<"ParentStudent"> | boolean
    canGiveConsent?: BoolFilter<"ParentStudent"> | boolean
    canCollectChild?: BoolFilter<"ParentStudent"> | boolean
    canAccessRecords?: BoolFilter<"ParentStudent"> | boolean
    receivesReports?: BoolFilter<"ParentStudent"> | boolean
    receivesNotifications?: BoolFilter<"ParentStudent"> | boolean
    canContactTeachers?: BoolFilter<"ParentStudent"> | boolean
    custodyArrangement?: StringNullableFilter<"ParentStudent"> | string | null
    restrictedAccess?: BoolFilter<"ParentStudent"> | boolean
    accessNotes?: StringNullableFilter<"ParentStudent"> | string | null
    createdAt?: DateTimeFilter<"ParentStudent"> | Date | string
    updatedAt?: DateTimeFilter<"ParentStudent"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    parent?: XOR<ParentRelationFilter, ParentWhereInput>
    student?: XOR<StudentRelationFilter, StudentWhereInput>
  }, "id" | "parentId_studentId">

  export type ParentStudentOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    parentId?: SortOrder
    studentId?: SortOrder
    relationshipType?: SortOrder
    isPrimaryContact?: SortOrder
    isEmergencyContact?: SortOrder
    hasParentalResponsibility?: SortOrder
    canGiveConsent?: SortOrder
    canCollectChild?: SortOrder
    canAccessRecords?: SortOrder
    receivesReports?: SortOrder
    receivesNotifications?: SortOrder
    canContactTeachers?: SortOrder
    custodyArrangement?: SortOrderInput | SortOrder
    restrictedAccess?: SortOrder
    accessNotes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ParentStudentCountOrderByAggregateInput
    _max?: ParentStudentMaxOrderByAggregateInput
    _min?: ParentStudentMinOrderByAggregateInput
  }

  export type ParentStudentScalarWhereWithAggregatesInput = {
    AND?: ParentStudentScalarWhereWithAggregatesInput | ParentStudentScalarWhereWithAggregatesInput[]
    OR?: ParentStudentScalarWhereWithAggregatesInput[]
    NOT?: ParentStudentScalarWhereWithAggregatesInput | ParentStudentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ParentStudent"> | string
    schoolId?: StringWithAggregatesFilter<"ParentStudent"> | string
    parentId?: StringWithAggregatesFilter<"ParentStudent"> | string
    studentId?: StringWithAggregatesFilter<"ParentStudent"> | string
    relationshipType?: EnumParentTypeWithAggregatesFilter<"ParentStudent"> | $Enums.ParentType
    isPrimaryContact?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    isEmergencyContact?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    hasParentalResponsibility?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    canGiveConsent?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    canCollectChild?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    canAccessRecords?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    receivesReports?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    receivesNotifications?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    canContactTeachers?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    custodyArrangement?: StringNullableWithAggregatesFilter<"ParentStudent"> | string | null
    restrictedAccess?: BoolWithAggregatesFilter<"ParentStudent"> | boolean
    accessNotes?: StringNullableWithAggregatesFilter<"ParentStudent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ParentStudent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ParentStudent"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    schoolId?: StringNullableFilter<"Role"> | string | null
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    isDefault?: BoolFilter<"Role"> | boolean
    isCustom?: BoolFilter<"Role"> | boolean
    isActive?: BoolFilter<"Role"> | boolean
    priority?: IntFilter<"Role"> | number
    scope?: EnumRoleScopeFilter<"Role"> | $Enums.RoleScope
    applicableUserTypes?: EnumUserTypeNullableListFilter<"Role">
    createdBy?: StringNullableFilter<"Role"> | string | null
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    permissions?: RolePermissionListRelationFilter
    userRoles?: UserRoleListRelationFilter
    school?: XOR<SchoolNullableRelationFilter, SchoolWhereInput> | null
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isCustom?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    scope?: SortOrder
    applicableUserTypes?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    permissions?: RolePermissionOrderByRelationAggregateInput
    userRoles?: UserRoleOrderByRelationAggregateInput
    school?: SchoolOrderByWithRelationInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    schoolId?: StringNullableFilter<"Role"> | string | null
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    isDefault?: BoolFilter<"Role"> | boolean
    isCustom?: BoolFilter<"Role"> | boolean
    isActive?: BoolFilter<"Role"> | boolean
    priority?: IntFilter<"Role"> | number
    scope?: EnumRoleScopeFilter<"Role"> | $Enums.RoleScope
    applicableUserTypes?: EnumUserTypeNullableListFilter<"Role">
    createdBy?: StringNullableFilter<"Role"> | string | null
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    permissions?: RolePermissionListRelationFilter
    userRoles?: UserRoleListRelationFilter
    school?: XOR<SchoolNullableRelationFilter, SchoolWhereInput> | null
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrderInput | SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isDefault?: SortOrder
    isCustom?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    scope?: SortOrder
    applicableUserTypes?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    schoolId?: StringNullableWithAggregatesFilter<"Role"> | string | null
    name?: StringWithAggregatesFilter<"Role"> | string
    description?: StringNullableWithAggregatesFilter<"Role"> | string | null
    isDefault?: BoolWithAggregatesFilter<"Role"> | boolean
    isCustom?: BoolWithAggregatesFilter<"Role"> | boolean
    isActive?: BoolWithAggregatesFilter<"Role"> | boolean
    priority?: IntWithAggregatesFilter<"Role"> | number
    scope?: EnumRoleScopeWithAggregatesFilter<"Role"> | $Enums.RoleScope
    applicableUserTypes?: EnumUserTypeNullableListFilter<"Role">
    createdBy?: StringNullableWithAggregatesFilter<"Role"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    scope?: StringFilter<"Permission"> | string
    isDefault?: BoolFilter<"Permission"> | boolean
    isActive?: BoolFilter<"Permission"> | boolean
    category?: EnumPermissionCategoryFilter<"Permission"> | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFilter<"Permission"> | $Enums.RiskLevel
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    rolePermissions?: RolePermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    resource?: SortOrder
    action?: SortOrder
    scope?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rolePermissions?: RolePermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    resource_action_scope?: PermissionResourceActionScopeCompoundUniqueInput
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    scope?: StringFilter<"Permission"> | string
    isDefault?: BoolFilter<"Permission"> | boolean
    isActive?: BoolFilter<"Permission"> | boolean
    category?: EnumPermissionCategoryFilter<"Permission"> | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFilter<"Permission"> | $Enums.RiskLevel
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    rolePermissions?: RolePermissionListRelationFilter
  }, "id" | "resource_action_scope">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    resource?: SortOrder
    action?: SortOrder
    scope?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    resource?: StringWithAggregatesFilter<"Permission"> | string
    action?: StringWithAggregatesFilter<"Permission"> | string
    scope?: StringWithAggregatesFilter<"Permission"> | string
    isDefault?: BoolWithAggregatesFilter<"Permission"> | boolean
    isActive?: BoolWithAggregatesFilter<"Permission"> | boolean
    category?: EnumPermissionCategoryWithAggregatesFilter<"Permission"> | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"Permission"> | $Enums.RiskLevel
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    conditions?: JsonNullableFilter<"RolePermission">
    limitations?: JsonNullableFilter<"RolePermission">
    grantedAt?: DateTimeFilter<"RolePermission"> | Date | string
    expiresAt?: DateTimeNullableFilter<"RolePermission"> | Date | string | null
    isActive?: BoolFilter<"RolePermission"> | boolean
    grantedBy?: StringNullableFilter<"RolePermission"> | string | null
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    conditions?: SortOrderInput | SortOrder
    limitations?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    roleId_permissionId?: RolePermissionRoleIdPermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    conditions?: JsonNullableFilter<"RolePermission">
    limitations?: JsonNullableFilter<"RolePermission">
    grantedAt?: DateTimeFilter<"RolePermission"> | Date | string
    expiresAt?: DateTimeNullableFilter<"RolePermission"> | Date | string | null
    isActive?: BoolFilter<"RolePermission"> | boolean
    grantedBy?: StringNullableFilter<"RolePermission"> | string | null
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "id" | "roleId_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    conditions?: SortOrderInput | SortOrder
    limitations?: SortOrderInput | SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    grantedBy?: SortOrderInput | SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RolePermission"> | string
    roleId?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
    conditions?: JsonNullableWithAggregatesFilter<"RolePermission">
    limitations?: JsonNullableWithAggregatesFilter<"RolePermission">
    grantedAt?: DateTimeWithAggregatesFilter<"RolePermission"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"RolePermission"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"RolePermission"> | boolean
    grantedBy?: StringNullableWithAggregatesFilter<"RolePermission"> | string | null
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    id?: StringFilter<"UserRole"> | string
    schoolId?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    classIds?: StringNullableListFilter<"UserRole">
    yearGroups?: IntNullableListFilter<"UserRole">
    subjects?: StringNullableListFilter<"UserRole">
    studentIds?: StringNullableListFilter<"UserRole">
    assignedAt?: DateTimeFilter<"UserRole"> | Date | string
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    isActive?: BoolFilter<"UserRole"> | boolean
    assignedBy?: StringNullableFilter<"UserRole"> | string | null
    assignmentReason?: StringNullableFilter<"UserRole"> | string | null
    additionalPermissions?: JsonNullableFilter<"UserRole">
    restrictedPermissions?: JsonNullableFilter<"UserRole">
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    classIds?: SortOrder
    yearGroups?: SortOrder
    subjects?: SortOrder
    studentIds?: SortOrder
    assignedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    assignedBy?: SortOrderInput | SortOrder
    assignmentReason?: SortOrderInput | SortOrder
    additionalPermissions?: SortOrderInput | SortOrder
    restrictedPermissions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    schoolId?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    classIds?: StringNullableListFilter<"UserRole">
    yearGroups?: IntNullableListFilter<"UserRole">
    subjects?: StringNullableListFilter<"UserRole">
    studentIds?: StringNullableListFilter<"UserRole">
    assignedAt?: DateTimeFilter<"UserRole"> | Date | string
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    isActive?: BoolFilter<"UserRole"> | boolean
    assignedBy?: StringNullableFilter<"UserRole"> | string | null
    assignmentReason?: StringNullableFilter<"UserRole"> | string | null
    additionalPermissions?: JsonNullableFilter<"UserRole">
    restrictedPermissions?: JsonNullableFilter<"UserRole">
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "id">

  export type UserRoleOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    classIds?: SortOrder
    yearGroups?: SortOrder
    subjects?: SortOrder
    studentIds?: SortOrder
    assignedAt?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    assignedBy?: SortOrderInput | SortOrder
    assignmentReason?: SortOrderInput | SortOrder
    additionalPermissions?: SortOrderInput | SortOrder
    restrictedPermissions?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _avg?: UserRoleAvgOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
    _sum?: UserRoleSumOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserRole"> | string
    schoolId?: StringWithAggregatesFilter<"UserRole"> | string
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: StringWithAggregatesFilter<"UserRole"> | string
    classIds?: StringNullableListFilter<"UserRole">
    yearGroups?: IntNullableListFilter<"UserRole">
    subjects?: StringNullableListFilter<"UserRole">
    studentIds?: StringNullableListFilter<"UserRole">
    assignedAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
    expiresAt?: DateTimeNullableWithAggregatesFilter<"UserRole"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"UserRole"> | boolean
    assignedBy?: StringNullableWithAggregatesFilter<"UserRole"> | string | null
    assignmentReason?: StringNullableWithAggregatesFilter<"UserRole"> | string | null
    additionalPermissions?: JsonNullableWithAggregatesFilter<"UserRole">
    restrictedPermissions?: JsonNullableWithAggregatesFilter<"UserRole">
    createdAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserRole"> | Date | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: StringFilter<"Class"> | string
    schoolId?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    displayName?: StringNullableFilter<"Class"> | string | null
    yearGroups?: IntNullableListFilter<"Class">
    keyStages?: EnumKeyStageNullableListFilter<"Class">
    classType?: EnumClassTypeFilter<"Class"> | $Enums.ClassType
    subject?: StringNullableFilter<"Class"> | string | null
    setLevel?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringFilter<"Class"> | string
    houseGroup?: StringNullableFilter<"Class"> | string | null
    houseColor?: StringNullableFilter<"Class"> | string | null
    capacity?: IntNullableFilter<"Class"> | number | null
    isActive?: BoolFilter<"Class"> | boolean
    classroom?: StringNullableFilter<"Class"> | string | null
    clubsEnabled?: BoolFilter<"Class"> | boolean
    leaderboardEnabled?: BoolFilter<"Class"> | boolean
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    teacherClasses?: TeacherClassListRelationFilter
    students?: StudentListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    displayName?: SortOrderInput | SortOrder
    yearGroups?: SortOrder
    keyStages?: SortOrder
    classType?: SortOrder
    subject?: SortOrderInput | SortOrder
    setLevel?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    houseGroup?: SortOrderInput | SortOrder
    houseColor?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    isActive?: SortOrder
    classroom?: SortOrderInput | SortOrder
    clubsEnabled?: SortOrder
    leaderboardEnabled?: SortOrder
    school?: SchoolOrderByWithRelationInput
    teacherClasses?: TeacherClassOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    schoolId?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    displayName?: StringNullableFilter<"Class"> | string | null
    yearGroups?: IntNullableListFilter<"Class">
    keyStages?: EnumKeyStageNullableListFilter<"Class">
    classType?: EnumClassTypeFilter<"Class"> | $Enums.ClassType
    subject?: StringNullableFilter<"Class"> | string | null
    setLevel?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringFilter<"Class"> | string
    houseGroup?: StringNullableFilter<"Class"> | string | null
    houseColor?: StringNullableFilter<"Class"> | string | null
    capacity?: IntNullableFilter<"Class"> | number | null
    isActive?: BoolFilter<"Class"> | boolean
    classroom?: StringNullableFilter<"Class"> | string | null
    clubsEnabled?: BoolFilter<"Class"> | boolean
    leaderboardEnabled?: BoolFilter<"Class"> | boolean
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    teacherClasses?: TeacherClassListRelationFilter
    students?: StudentListRelationFilter
  }, "id">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    displayName?: SortOrderInput | SortOrder
    yearGroups?: SortOrder
    keyStages?: SortOrder
    classType?: SortOrder
    subject?: SortOrderInput | SortOrder
    setLevel?: SortOrderInput | SortOrder
    academicYear?: SortOrder
    houseGroup?: SortOrderInput | SortOrder
    houseColor?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    isActive?: SortOrder
    classroom?: SortOrderInput | SortOrder
    clubsEnabled?: SortOrder
    leaderboardEnabled?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Class"> | string
    schoolId?: StringWithAggregatesFilter<"Class"> | string
    name?: StringWithAggregatesFilter<"Class"> | string
    displayName?: StringNullableWithAggregatesFilter<"Class"> | string | null
    yearGroups?: IntNullableListFilter<"Class">
    keyStages?: EnumKeyStageNullableListFilter<"Class">
    classType?: EnumClassTypeWithAggregatesFilter<"Class"> | $Enums.ClassType
    subject?: StringNullableWithAggregatesFilter<"Class"> | string | null
    setLevel?: StringNullableWithAggregatesFilter<"Class"> | string | null
    academicYear?: StringWithAggregatesFilter<"Class"> | string
    houseGroup?: StringNullableWithAggregatesFilter<"Class"> | string | null
    houseColor?: StringNullableWithAggregatesFilter<"Class"> | string | null
    capacity?: IntNullableWithAggregatesFilter<"Class"> | number | null
    isActive?: BoolWithAggregatesFilter<"Class"> | boolean
    classroom?: StringNullableWithAggregatesFilter<"Class"> | string | null
    clubsEnabled?: BoolWithAggregatesFilter<"Class"> | boolean
    leaderboardEnabled?: BoolWithAggregatesFilter<"Class"> | boolean
  }

  export type TeacherClassWhereInput = {
    AND?: TeacherClassWhereInput | TeacherClassWhereInput[]
    OR?: TeacherClassWhereInput[]
    NOT?: TeacherClassWhereInput | TeacherClassWhereInput[]
    id?: StringFilter<"TeacherClass"> | string
    schoolId?: StringFilter<"TeacherClass"> | string
    teacherId?: StringFilter<"TeacherClass"> | string
    classId?: StringFilter<"TeacherClass"> | string
    role?: EnumClassRoleFilter<"TeacherClass"> | $Enums.ClassRole
    isPrimaryTeacher?: BoolFilter<"TeacherClass"> | boolean
    subjects?: StringNullableListFilter<"TeacherClass">
    timeAllocation?: IntNullableFilter<"TeacherClass"> | number | null
    timetableSlots?: JsonNullableFilter<"TeacherClass">
    canMarkHomework?: BoolFilter<"TeacherClass"> | boolean
    canAssignClubs?: BoolFilter<"TeacherClass"> | boolean
    canViewProgress?: BoolFilter<"TeacherClass"> | boolean
    canContactParents?: BoolFilter<"TeacherClass"> | boolean
    startDate?: DateTimeFilter<"TeacherClass"> | Date | string
    endDate?: DateTimeNullableFilter<"TeacherClass"> | Date | string | null
    isActive?: BoolFilter<"TeacherClass"> | boolean
    createdAt?: DateTimeFilter<"TeacherClass"> | Date | string
    updatedAt?: DateTimeFilter<"TeacherClass"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    teacher?: XOR<TeacherRelationFilter, TeacherWhereInput>
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }

  export type TeacherClassOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    role?: SortOrder
    isPrimaryTeacher?: SortOrder
    subjects?: SortOrder
    timeAllocation?: SortOrderInput | SortOrder
    timetableSlots?: SortOrderInput | SortOrder
    canMarkHomework?: SortOrder
    canAssignClubs?: SortOrder
    canViewProgress?: SortOrder
    canContactParents?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    teacher?: TeacherOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type TeacherClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teacherId_classId_role?: TeacherClassTeacherIdClassIdRoleCompoundUniqueInput
    AND?: TeacherClassWhereInput | TeacherClassWhereInput[]
    OR?: TeacherClassWhereInput[]
    NOT?: TeacherClassWhereInput | TeacherClassWhereInput[]
    schoolId?: StringFilter<"TeacherClass"> | string
    teacherId?: StringFilter<"TeacherClass"> | string
    classId?: StringFilter<"TeacherClass"> | string
    role?: EnumClassRoleFilter<"TeacherClass"> | $Enums.ClassRole
    isPrimaryTeacher?: BoolFilter<"TeacherClass"> | boolean
    subjects?: StringNullableListFilter<"TeacherClass">
    timeAllocation?: IntNullableFilter<"TeacherClass"> | number | null
    timetableSlots?: JsonNullableFilter<"TeacherClass">
    canMarkHomework?: BoolFilter<"TeacherClass"> | boolean
    canAssignClubs?: BoolFilter<"TeacherClass"> | boolean
    canViewProgress?: BoolFilter<"TeacherClass"> | boolean
    canContactParents?: BoolFilter<"TeacherClass"> | boolean
    startDate?: DateTimeFilter<"TeacherClass"> | Date | string
    endDate?: DateTimeNullableFilter<"TeacherClass"> | Date | string | null
    isActive?: BoolFilter<"TeacherClass"> | boolean
    createdAt?: DateTimeFilter<"TeacherClass"> | Date | string
    updatedAt?: DateTimeFilter<"TeacherClass"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    teacher?: XOR<TeacherRelationFilter, TeacherWhereInput>
    class?: XOR<ClassRelationFilter, ClassWhereInput>
  }, "id" | "teacherId_classId_role">

  export type TeacherClassOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    role?: SortOrder
    isPrimaryTeacher?: SortOrder
    subjects?: SortOrder
    timeAllocation?: SortOrderInput | SortOrder
    timetableSlots?: SortOrderInput | SortOrder
    canMarkHomework?: SortOrder
    canAssignClubs?: SortOrder
    canViewProgress?: SortOrder
    canContactParents?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeacherClassCountOrderByAggregateInput
    _avg?: TeacherClassAvgOrderByAggregateInput
    _max?: TeacherClassMaxOrderByAggregateInput
    _min?: TeacherClassMinOrderByAggregateInput
    _sum?: TeacherClassSumOrderByAggregateInput
  }

  export type TeacherClassScalarWhereWithAggregatesInput = {
    AND?: TeacherClassScalarWhereWithAggregatesInput | TeacherClassScalarWhereWithAggregatesInput[]
    OR?: TeacherClassScalarWhereWithAggregatesInput[]
    NOT?: TeacherClassScalarWhereWithAggregatesInput | TeacherClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeacherClass"> | string
    schoolId?: StringWithAggregatesFilter<"TeacherClass"> | string
    teacherId?: StringWithAggregatesFilter<"TeacherClass"> | string
    classId?: StringWithAggregatesFilter<"TeacherClass"> | string
    role?: EnumClassRoleWithAggregatesFilter<"TeacherClass"> | $Enums.ClassRole
    isPrimaryTeacher?: BoolWithAggregatesFilter<"TeacherClass"> | boolean
    subjects?: StringNullableListFilter<"TeacherClass">
    timeAllocation?: IntNullableWithAggregatesFilter<"TeacherClass"> | number | null
    timetableSlots?: JsonNullableWithAggregatesFilter<"TeacherClass">
    canMarkHomework?: BoolWithAggregatesFilter<"TeacherClass"> | boolean
    canAssignClubs?: BoolWithAggregatesFilter<"TeacherClass"> | boolean
    canViewProgress?: BoolWithAggregatesFilter<"TeacherClass"> | boolean
    canContactParents?: BoolWithAggregatesFilter<"TeacherClass"> | boolean
    startDate?: DateTimeWithAggregatesFilter<"TeacherClass"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"TeacherClass"> | Date | string | null
    isActive?: BoolWithAggregatesFilter<"TeacherClass"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"TeacherClass"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TeacherClass"> | Date | string
  }

  export type ClubWhereInput = {
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    id?: StringFilter<"Club"> | string
    schoolId?: StringFilter<"Club"> | string
    name?: StringFilter<"Club"> | string
    description?: StringNullableFilter<"Club"> | string | null
    clubType?: EnumClubTypeFilter<"Club"> | $Enums.ClubType
    subject?: StringFilter<"Club"> | string
    isActive?: BoolFilter<"Club"> | boolean
    ageGroups?: IntNullableListFilter<"Club">
    keyStages?: EnumKeyStageNullableListFilter<"Club">
    hasLevels?: BoolFilter<"Club"> | boolean
    levelNaming?: StringNullableFilter<"Club"> | string | null
    customLevels?: BoolFilter<"Club"> | boolean
    evidenceType?: EnumClubEvidenceTypeFilter<"Club"> | $Enums.ClubEvidenceType
    logbookRequired?: BoolFilter<"Club"> | boolean
    parentInvolvement?: BoolFilter<"Club"> | boolean
    maxBuddyMembers?: IntFilter<"Club"> | number
    buddyGroupsEnabled?: BoolFilter<"Club"> | boolean
    xpPerCompletion?: IntFilter<"Club"> | number
    streakEnabled?: BoolFilter<"Club"> | boolean
    iconUrl?: StringNullableFilter<"Club"> | string | null
    color?: StringFilter<"Club"> | string
    createdBy?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    homeworkCompletions?: HomeworkCompletionListRelationFilter
  }

  export type ClubOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    clubType?: SortOrder
    subject?: SortOrder
    isActive?: SortOrder
    ageGroups?: SortOrder
    keyStages?: SortOrder
    hasLevels?: SortOrder
    levelNaming?: SortOrderInput | SortOrder
    customLevels?: SortOrder
    evidenceType?: SortOrder
    logbookRequired?: SortOrder
    parentInvolvement?: SortOrder
    maxBuddyMembers?: SortOrder
    buddyGroupsEnabled?: SortOrder
    xpPerCompletion?: SortOrder
    streakEnabled?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    homeworkCompletions?: HomeworkCompletionOrderByRelationAggregateInput
  }

  export type ClubWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClubWhereInput | ClubWhereInput[]
    OR?: ClubWhereInput[]
    NOT?: ClubWhereInput | ClubWhereInput[]
    schoolId?: StringFilter<"Club"> | string
    name?: StringFilter<"Club"> | string
    description?: StringNullableFilter<"Club"> | string | null
    clubType?: EnumClubTypeFilter<"Club"> | $Enums.ClubType
    subject?: StringFilter<"Club"> | string
    isActive?: BoolFilter<"Club"> | boolean
    ageGroups?: IntNullableListFilter<"Club">
    keyStages?: EnumKeyStageNullableListFilter<"Club">
    hasLevels?: BoolFilter<"Club"> | boolean
    levelNaming?: StringNullableFilter<"Club"> | string | null
    customLevels?: BoolFilter<"Club"> | boolean
    evidenceType?: EnumClubEvidenceTypeFilter<"Club"> | $Enums.ClubEvidenceType
    logbookRequired?: BoolFilter<"Club"> | boolean
    parentInvolvement?: BoolFilter<"Club"> | boolean
    maxBuddyMembers?: IntFilter<"Club"> | number
    buddyGroupsEnabled?: BoolFilter<"Club"> | boolean
    xpPerCompletion?: IntFilter<"Club"> | number
    streakEnabled?: BoolFilter<"Club"> | boolean
    iconUrl?: StringNullableFilter<"Club"> | string | null
    color?: StringFilter<"Club"> | string
    createdBy?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    homeworkCompletions?: HomeworkCompletionListRelationFilter
  }, "id">

  export type ClubOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    clubType?: SortOrder
    subject?: SortOrder
    isActive?: SortOrder
    ageGroups?: SortOrder
    keyStages?: SortOrder
    hasLevels?: SortOrder
    levelNaming?: SortOrderInput | SortOrder
    customLevels?: SortOrder
    evidenceType?: SortOrder
    logbookRequired?: SortOrder
    parentInvolvement?: SortOrder
    maxBuddyMembers?: SortOrder
    buddyGroupsEnabled?: SortOrder
    xpPerCompletion?: SortOrder
    streakEnabled?: SortOrder
    iconUrl?: SortOrderInput | SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClubCountOrderByAggregateInput
    _avg?: ClubAvgOrderByAggregateInput
    _max?: ClubMaxOrderByAggregateInput
    _min?: ClubMinOrderByAggregateInput
    _sum?: ClubSumOrderByAggregateInput
  }

  export type ClubScalarWhereWithAggregatesInput = {
    AND?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    OR?: ClubScalarWhereWithAggregatesInput[]
    NOT?: ClubScalarWhereWithAggregatesInput | ClubScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Club"> | string
    schoolId?: StringWithAggregatesFilter<"Club"> | string
    name?: StringWithAggregatesFilter<"Club"> | string
    description?: StringNullableWithAggregatesFilter<"Club"> | string | null
    clubType?: EnumClubTypeWithAggregatesFilter<"Club"> | $Enums.ClubType
    subject?: StringWithAggregatesFilter<"Club"> | string
    isActive?: BoolWithAggregatesFilter<"Club"> | boolean
    ageGroups?: IntNullableListFilter<"Club">
    keyStages?: EnumKeyStageNullableListFilter<"Club">
    hasLevels?: BoolWithAggregatesFilter<"Club"> | boolean
    levelNaming?: StringNullableWithAggregatesFilter<"Club"> | string | null
    customLevels?: BoolWithAggregatesFilter<"Club"> | boolean
    evidenceType?: EnumClubEvidenceTypeWithAggregatesFilter<"Club"> | $Enums.ClubEvidenceType
    logbookRequired?: BoolWithAggregatesFilter<"Club"> | boolean
    parentInvolvement?: BoolWithAggregatesFilter<"Club"> | boolean
    maxBuddyMembers?: IntWithAggregatesFilter<"Club"> | number
    buddyGroupsEnabled?: BoolWithAggregatesFilter<"Club"> | boolean
    xpPerCompletion?: IntWithAggregatesFilter<"Club"> | number
    streakEnabled?: BoolWithAggregatesFilter<"Club"> | boolean
    iconUrl?: StringNullableWithAggregatesFilter<"Club"> | string | null
    color?: StringWithAggregatesFilter<"Club"> | string
    createdBy?: StringWithAggregatesFilter<"Club"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Club"> | Date | string
  }

  export type HomeworkCompletionWhereInput = {
    AND?: HomeworkCompletionWhereInput | HomeworkCompletionWhereInput[]
    OR?: HomeworkCompletionWhereInput[]
    NOT?: HomeworkCompletionWhereInput | HomeworkCompletionWhereInput[]
    id?: StringFilter<"HomeworkCompletion"> | string
    schoolId?: StringFilter<"HomeworkCompletion"> | string
    studentId?: StringFilter<"HomeworkCompletion"> | string
    clubId?: StringNullableFilter<"HomeworkCompletion"> | string | null
    completionDate?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    evidenceType?: EnumClubEvidenceTypeFilter<"HomeworkCompletion"> | $Enums.ClubEvidenceType
    evidenceUrl?: StringNullableFilter<"HomeworkCompletion"> | string | null
    notes?: StringNullableFilter<"HomeworkCompletion"> | string | null
    parentNotes?: StringNullableFilter<"HomeworkCompletion"> | string | null
    timeSpentMinutes?: IntNullableFilter<"HomeworkCompletion"> | number | null
    wasLate?: BoolFilter<"HomeworkCompletion"> | boolean
    verifiedBy?: StringNullableFilter<"HomeworkCompletion"> | string | null
    verifiedAt?: DateTimeNullableFilter<"HomeworkCompletion"> | Date | string | null
    isVerified?: BoolFilter<"HomeworkCompletion"> | boolean
    createdAt?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    updatedAt?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    student?: XOR<StudentRelationFilter, StudentWhereInput>
    club?: XOR<ClubNullableRelationFilter, ClubWhereInput> | null
  }

  export type HomeworkCompletionOrderByWithRelationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    studentId?: SortOrder
    clubId?: SortOrderInput | SortOrder
    completionDate?: SortOrder
    evidenceType?: SortOrder
    evidenceUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    parentNotes?: SortOrderInput | SortOrder
    timeSpentMinutes?: SortOrderInput | SortOrder
    wasLate?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    school?: SchoolOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
    club?: ClubOrderByWithRelationInput
  }

  export type HomeworkCompletionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HomeworkCompletionWhereInput | HomeworkCompletionWhereInput[]
    OR?: HomeworkCompletionWhereInput[]
    NOT?: HomeworkCompletionWhereInput | HomeworkCompletionWhereInput[]
    schoolId?: StringFilter<"HomeworkCompletion"> | string
    studentId?: StringFilter<"HomeworkCompletion"> | string
    clubId?: StringNullableFilter<"HomeworkCompletion"> | string | null
    completionDate?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    evidenceType?: EnumClubEvidenceTypeFilter<"HomeworkCompletion"> | $Enums.ClubEvidenceType
    evidenceUrl?: StringNullableFilter<"HomeworkCompletion"> | string | null
    notes?: StringNullableFilter<"HomeworkCompletion"> | string | null
    parentNotes?: StringNullableFilter<"HomeworkCompletion"> | string | null
    timeSpentMinutes?: IntNullableFilter<"HomeworkCompletion"> | number | null
    wasLate?: BoolFilter<"HomeworkCompletion"> | boolean
    verifiedBy?: StringNullableFilter<"HomeworkCompletion"> | string | null
    verifiedAt?: DateTimeNullableFilter<"HomeworkCompletion"> | Date | string | null
    isVerified?: BoolFilter<"HomeworkCompletion"> | boolean
    createdAt?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    updatedAt?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    school?: XOR<SchoolRelationFilter, SchoolWhereInput>
    student?: XOR<StudentRelationFilter, StudentWhereInput>
    club?: XOR<ClubNullableRelationFilter, ClubWhereInput> | null
  }, "id">

  export type HomeworkCompletionOrderByWithAggregationInput = {
    id?: SortOrder
    schoolId?: SortOrder
    studentId?: SortOrder
    clubId?: SortOrderInput | SortOrder
    completionDate?: SortOrder
    evidenceType?: SortOrder
    evidenceUrl?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    parentNotes?: SortOrderInput | SortOrder
    timeSpentMinutes?: SortOrderInput | SortOrder
    wasLate?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HomeworkCompletionCountOrderByAggregateInput
    _avg?: HomeworkCompletionAvgOrderByAggregateInput
    _max?: HomeworkCompletionMaxOrderByAggregateInput
    _min?: HomeworkCompletionMinOrderByAggregateInput
    _sum?: HomeworkCompletionSumOrderByAggregateInput
  }

  export type HomeworkCompletionScalarWhereWithAggregatesInput = {
    AND?: HomeworkCompletionScalarWhereWithAggregatesInput | HomeworkCompletionScalarWhereWithAggregatesInput[]
    OR?: HomeworkCompletionScalarWhereWithAggregatesInput[]
    NOT?: HomeworkCompletionScalarWhereWithAggregatesInput | HomeworkCompletionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HomeworkCompletion"> | string
    schoolId?: StringWithAggregatesFilter<"HomeworkCompletion"> | string
    studentId?: StringWithAggregatesFilter<"HomeworkCompletion"> | string
    clubId?: StringNullableWithAggregatesFilter<"HomeworkCompletion"> | string | null
    completionDate?: DateTimeWithAggregatesFilter<"HomeworkCompletion"> | Date | string
    evidenceType?: EnumClubEvidenceTypeWithAggregatesFilter<"HomeworkCompletion"> | $Enums.ClubEvidenceType
    evidenceUrl?: StringNullableWithAggregatesFilter<"HomeworkCompletion"> | string | null
    notes?: StringNullableWithAggregatesFilter<"HomeworkCompletion"> | string | null
    parentNotes?: StringNullableWithAggregatesFilter<"HomeworkCompletion"> | string | null
    timeSpentMinutes?: IntNullableWithAggregatesFilter<"HomeworkCompletion"> | number | null
    wasLate?: BoolWithAggregatesFilter<"HomeworkCompletion"> | boolean
    verifiedBy?: StringNullableWithAggregatesFilter<"HomeworkCompletion"> | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"HomeworkCompletion"> | Date | string | null
    isVerified?: BoolWithAggregatesFilter<"HomeworkCompletion"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"HomeworkCompletion"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HomeworkCompletion"> | Date | string
  }

  export type SchoolCreateInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolCreateManyInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCreateInput = {
    id?: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacherClasses?: TeacherClassCreateNestedManyWithoutTeacherInput
    school: SchoolCreateNestedOneWithoutTeachersInput
    user: UserCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: string
    schoolId: string
    userId: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacherClasses?: TeacherClassUpdateManyWithoutTeacherNestedInput
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
    user?: UserUpdateOneRequiredWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id?: string
    schoolId: string
    userId: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateInput = {
    id?: string
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutStudentInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    user?: UserCreateNestedOneWithoutStudentInput
    class: ClassCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    id?: string
    schoolId: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    classId: string
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutStudentNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneWithoutStudentNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    classId?: StringFieldUpdateOperationsInput | string
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentCreateManyInput = {
    id?: string
    schoolId: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    classId: string
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    classId?: StringFieldUpdateOperationsInput | string
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentCreateInput = {
    id?: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutParentInput
    school: SchoolCreateNestedOneWithoutParentsInput
    user: UserCreateNestedOneWithoutParentInput
  }

  export type ParentUncheckedCreateInput = {
    id?: string
    schoolId: string
    userId: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutParentNestedInput
    school?: SchoolUpdateOneRequiredWithoutParentsNestedInput
    user?: UserUpdateOneRequiredWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ParentCreateManyInput = {
    id?: string
    schoolId: string
    userId: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAdminCreateInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutSchoolAdminsInput
    user: UserCreateNestedOneWithoutSchoolAdminInput
  }

  export type SchoolAdminUncheckedCreateInput = {
    id?: string
    schoolId: string
    userId: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSchoolAdminsNestedInput
    user?: UserUpdateOneRequiredWithoutSchoolAdminNestedInput
  }

  export type SchoolAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAdminCreateManyInput = {
    id?: string
    schoolId: string
    userId: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentCreateInput = {
    id?: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutParentStudentsInput
    parent: ParentCreateNestedOneWithoutParentStudentsInput
    student: StudentCreateNestedOneWithoutParentStudentsInput
  }

  export type ParentStudentUncheckedCreateInput = {
    id?: string
    schoolId: string
    parentId: string
    studentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutParentStudentsNestedInput
    parent?: ParentUpdateOneRequiredWithoutParentStudentsNestedInput
    student?: StudentUpdateOneRequiredWithoutParentStudentsNestedInput
  }

  export type ParentStudentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentCreateManyInput = {
    id?: string
    schoolId: string
    parentId: string
    studentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
    school?: SchoolCreateNestedOneWithoutRolesInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    schoolId?: string | null
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
    school?: SchoolUpdateOneWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    schoolId?: string | null
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    id?: string
    name: string
    description?: string | null
    resource: string
    action: string
    scope: string
    isDefault?: boolean
    isActive?: boolean
    category?: $Enums.PermissionCategory
    riskLevel?: $Enums.RiskLevel
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermissions?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    resource: string
    action: string
    scope: string
    isDefault?: boolean
    isActive?: boolean
    category?: $Enums.PermissionCategory
    riskLevel?: $Enums.RiskLevel
    createdAt?: Date | string
    updatedAt?: Date | string
    rolePermissions?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: EnumPermissionCategoryFieldUpdateOperationsInput | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: EnumPermissionCategoryFieldUpdateOperationsInput | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    resource: string
    action: string
    scope: string
    isDefault?: boolean
    isActive?: boolean
    category?: $Enums.PermissionCategory
    riskLevel?: $Enums.RiskLevel
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: EnumPermissionCategoryFieldUpdateOperationsInput | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: EnumPermissionCategoryFieldUpdateOperationsInput | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateInput = {
    id?: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
  }

  export type RolePermissionUncheckedCreateInput = {
    id?: string
    roleId: string
    permissionId: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
  }

  export type RolePermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolePermissionCreateManyInput = {
    id?: string
    roleId: string
    permissionId: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
  }

  export type RolePermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRoleCreateInput = {
    id?: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutUserRolesInput
    user: UserCreateNestedOneWithoutUserRolesInput
    role: RoleCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateInput = {
    id?: string
    schoolId: string
    userId: string
    roleId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutUserRolesNestedInput
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateManyInput = {
    id?: string
    schoolId: string
    userId: string
    roleId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateInput = {
    id?: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    school: SchoolCreateNestedOneWithoutClassesInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    schoolId: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: string
    schoolId: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TeacherClassCreateInput = {
    id?: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeacherClassesInput
    teacher: TeacherCreateNestedOneWithoutTeacherClassesInput
    class: ClassCreateNestedOneWithoutTeacherClassesInput
  }

  export type TeacherClassUncheckedCreateInput = {
    id?: string
    schoolId: string
    teacherId: string
    classId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeacherClassesNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeacherClassesNestedInput
    class?: ClassUpdateOneRequiredWithoutTeacherClassesNestedInput
  }

  export type TeacherClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherClassCreateManyInput = {
    id?: string
    schoolId: string
    teacherId: string
    classId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubCreateInput = {
    id?: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutClubsInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateInput = {
    id?: string
    schoolId: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutClubsNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubCreateManyInput = {
    id?: string
    schoolId: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionCreateInput = {
    id?: string
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutHomeworkCompletionsInput
    student: StudentCreateNestedOneWithoutHomeworkCompletionsInput
    club?: ClubCreateNestedOneWithoutHomeworkCompletionsInput
  }

  export type HomeworkCompletionUncheckedCreateInput = {
    id?: string
    schoolId: string
    studentId: string
    clubId?: string | null
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutHomeworkCompletionsNestedInput
    student?: StudentUpdateOneRequiredWithoutHomeworkCompletionsNestedInput
    club?: ClubUpdateOneWithoutHomeworkCompletionsNestedInput
  }

  export type HomeworkCompletionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionCreateManyInput = {
    id?: string
    schoolId: string
    studentId: string
    clubId?: string | null
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumSchoolTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SchoolType | EnumSchoolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSchoolTypeFilter<$PrismaModel> | $Enums.SchoolType
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TeacherListRelationFilter = {
    every?: TeacherWhereInput
    some?: TeacherWhereInput
    none?: TeacherWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type ParentListRelationFilter = {
    every?: ParentWhereInput
    some?: ParentWhereInput
    none?: ParentWhereInput
  }

  export type SchoolAdminListRelationFilter = {
    every?: SchoolAdminWhereInput
    some?: SchoolAdminWhereInput
    none?: SchoolAdminWhereInput
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type ClubListRelationFilter = {
    every?: ClubWhereInput
    some?: ClubWhereInput
    none?: ClubWhereInput
  }

  export type ParentStudentListRelationFilter = {
    every?: ParentStudentWhereInput
    some?: ParentStudentWhereInput
    none?: ParentStudentWhereInput
  }

  export type TeacherClassListRelationFilter = {
    every?: TeacherClassWhereInput
    some?: TeacherClassWhereInput
    none?: TeacherClassWhereInput
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type HomeworkCompletionListRelationFilter = {
    every?: HomeworkCompletionWhereInput
    some?: HomeworkCompletionWhereInput
    none?: HomeworkCompletionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClubOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParentStudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HomeworkCompletionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    urn?: SortOrder
    dfeNumber?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    schoolType?: SortOrder
    minYearGroup?: SortOrder
    maxYearGroup?: SortOrder
    isActive?: SortOrder
    logoUrl?: SortOrder
    settings?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolAvgOrderByAggregateInput = {
    minYearGroup?: SortOrder
    maxYearGroup?: SortOrder
  }

  export type SchoolMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    urn?: SortOrder
    dfeNumber?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    schoolType?: SortOrder
    minYearGroup?: SortOrder
    maxYearGroup?: SortOrder
    isActive?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    urn?: SortOrder
    dfeNumber?: SortOrder
    address?: SortOrder
    postcode?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    website?: SortOrder
    schoolType?: SortOrder
    minYearGroup?: SortOrder
    maxYearGroup?: SortOrder
    isActive?: SortOrder
    logoUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolSumOrderByAggregateInput = {
    minYearGroup?: SortOrder
    maxYearGroup?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumSchoolTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SchoolType | EnumSchoolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSchoolTypeWithAggregatesFilter<$PrismaModel> | $Enums.SchoolType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSchoolTypeFilter<$PrismaModel>
    _max?: NestedEnumSchoolTypeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TeacherNullableRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type StudentNullableRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type ParentNullableRelationFilter = {
    is?: ParentWhereInput | null
    isNot?: ParentWhereInput | null
  }

  export type SchoolAdminNullableRelationFilter = {
    is?: SchoolAdminWhereInput | null
    isNot?: SchoolAdminWhereInput | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SchoolRelationFilter = {
    is?: SchoolWhereInput
    isNot?: SchoolWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    passwordHash?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    loginAttempts?: SortOrder
    lockedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    loginAttempts?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    passwordHash?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    loginAttempts?: SortOrder
    lockedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    passwordHash?: SortOrder
    isActive?: SortOrder
    lastLoginAt?: SortOrder
    loginAttempts?: SortOrder
    lockedUntil?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    loginAttempts?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type EnumTeacherTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherType | EnumTeacherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherTypeFilter<$PrismaModel> | $Enums.TeacherType
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type IntNullableListFilter<$PrismaModel = never> = {
    equals?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    has?: number | IntFieldRefInput<$PrismaModel> | null
    hasEvery?: number[] | ListIntFieldRefInput<$PrismaModel>
    hasSome?: number[] | ListIntFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    teacherType?: SortOrder
    isHeadTeacher?: SortOrder
    isSenCo?: SortOrder
    isDSL?: SortOrder
    isDeputyHead?: SortOrder
    subjects?: SortOrder
    yearGroups?: SortOrder
    qualifications?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    contractType?: SortOrder
    schoolEmail?: SortOrder
    phoneExtension?: SortOrder
    dbsCheckDate?: SortOrder
    dbsCheckNumber?: SortOrder
    safeguardingTraining?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    yearGroups?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    teacherType?: SortOrder
    isHeadTeacher?: SortOrder
    isSenCo?: SortOrder
    isDSL?: SortOrder
    isDeputyHead?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    contractType?: SortOrder
    schoolEmail?: SortOrder
    phoneExtension?: SortOrder
    dbsCheckDate?: SortOrder
    dbsCheckNumber?: SortOrder
    safeguardingTraining?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    employeeId?: SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    displayName?: SortOrder
    teacherType?: SortOrder
    isHeadTeacher?: SortOrder
    isSenCo?: SortOrder
    isDSL?: SortOrder
    isDeputyHead?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    contractType?: SortOrder
    schoolEmail?: SortOrder
    phoneExtension?: SortOrder
    dbsCheckDate?: SortOrder
    dbsCheckNumber?: SortOrder
    safeguardingTraining?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    yearGroups?: SortOrder
  }

  export type EnumTeacherTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherType | EnumTeacherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherTypeWithAggregatesFilter<$PrismaModel> | $Enums.TeacherType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeacherTypeFilter<$PrismaModel>
    _max?: NestedEnumTeacherTypeFilter<$PrismaModel>
  }

  export type EnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ClassRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type StudentCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    preferredName?: SortOrder
    dateOfBirth?: SortOrder
    pupilId?: SortOrder
    admissionNumber?: SortOrder
    yearGroup?: SortOrder
    classId?: SortOrder
    admissionDate?: SortOrder
    leavingDate?: SortOrder
    uln?: SortOrder
    upn?: SortOrder
    sen?: SortOrder
    senCategory?: SortOrder
    senSupport?: SortOrder
    pupilPremium?: SortOrder
    freeschoolMeals?: SortOrder
    englishAsAdditional?: SortOrder
    medicalConditions?: SortOrder
    dietaryRequirements?: SortOrder
    houseGroup?: SortOrder
    dataRetentionUntil?: SortOrder
    consentGiven?: SortOrder
    consentGivenBy?: SortOrder
    consentDate?: SortOrder
    consentWithdrawn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentAvgOrderByAggregateInput = {
    yearGroup?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    preferredName?: SortOrder
    dateOfBirth?: SortOrder
    pupilId?: SortOrder
    admissionNumber?: SortOrder
    yearGroup?: SortOrder
    classId?: SortOrder
    admissionDate?: SortOrder
    leavingDate?: SortOrder
    uln?: SortOrder
    upn?: SortOrder
    sen?: SortOrder
    senCategory?: SortOrder
    pupilPremium?: SortOrder
    freeschoolMeals?: SortOrder
    englishAsAdditional?: SortOrder
    houseGroup?: SortOrder
    dataRetentionUntil?: SortOrder
    consentGiven?: SortOrder
    consentGivenBy?: SortOrder
    consentDate?: SortOrder
    consentWithdrawn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    preferredName?: SortOrder
    dateOfBirth?: SortOrder
    pupilId?: SortOrder
    admissionNumber?: SortOrder
    yearGroup?: SortOrder
    classId?: SortOrder
    admissionDate?: SortOrder
    leavingDate?: SortOrder
    uln?: SortOrder
    upn?: SortOrder
    sen?: SortOrder
    senCategory?: SortOrder
    pupilPremium?: SortOrder
    freeschoolMeals?: SortOrder
    englishAsAdditional?: SortOrder
    houseGroup?: SortOrder
    dataRetentionUntil?: SortOrder
    consentGiven?: SortOrder
    consentGivenBy?: SortOrder
    consentDate?: SortOrder
    consentWithdrawn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudentSumOrderByAggregateInput = {
    yearGroup?: SortOrder
  }

  export type EnumContactMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumContactMethodFilter<$PrismaModel> | $Enums.ContactMethod
  }

  export type ParentCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    alternativeEmail?: SortOrder
    mobilePhone?: SortOrder
    homePhone?: SortOrder
    workPhone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    town?: SortOrder
    county?: SortOrder
    postcode?: SortOrder
    isEmergencyContact?: SortOrder
    priority?: SortOrder
    preferredContact?: SortOrder
    canReceiveSMS?: SortOrder
    canReceiveEmail?: SortOrder
    canReceivePhoneCalls?: SortOrder
    canCollectChild?: SortOrder
    canConsentToTrips?: SortOrder
    canAccessOnlineInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type ParentMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    alternativeEmail?: SortOrder
    mobilePhone?: SortOrder
    homePhone?: SortOrder
    workPhone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    town?: SortOrder
    county?: SortOrder
    postcode?: SortOrder
    isEmergencyContact?: SortOrder
    priority?: SortOrder
    preferredContact?: SortOrder
    canReceiveSMS?: SortOrder
    canReceiveEmail?: SortOrder
    canReceivePhoneCalls?: SortOrder
    canCollectChild?: SortOrder
    canConsentToTrips?: SortOrder
    canAccessOnlineInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    alternativeEmail?: SortOrder
    mobilePhone?: SortOrder
    homePhone?: SortOrder
    workPhone?: SortOrder
    addressLine1?: SortOrder
    addressLine2?: SortOrder
    town?: SortOrder
    county?: SortOrder
    postcode?: SortOrder
    isEmergencyContact?: SortOrder
    priority?: SortOrder
    preferredContact?: SortOrder
    canReceiveSMS?: SortOrder
    canReceiveEmail?: SortOrder
    canReceivePhoneCalls?: SortOrder
    canCollectChild?: SortOrder
    canConsentToTrips?: SortOrder
    canAccessOnlineInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type EnumContactMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumContactMethodWithAggregatesFilter<$PrismaModel> | $Enums.ContactMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContactMethodFilter<$PrismaModel>
    _max?: NestedEnumContactMethodFilter<$PrismaModel>
  }

  export type EnumAdminLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminLevel | EnumAdminLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminLevelFilter<$PrismaModel> | $Enums.AdminLevel
  }

  export type SchoolAdminCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    adminLevel?: SortOrder
    canManageUsers?: SortOrder
    canManageClasses?: SortOrder
    canManageClubs?: SortOrder
    canViewAnalytics?: SortOrder
    canManageSettings?: SortOrder
    canExportData?: SortOrder
    canAccessAllClasses?: SortOrder
    canViewAllStudents?: SortOrder
    canModifyHomework?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    adminLevel?: SortOrder
    canManageUsers?: SortOrder
    canManageClasses?: SortOrder
    canManageClubs?: SortOrder
    canViewAnalytics?: SortOrder
    canManageSettings?: SortOrder
    canExportData?: SortOrder
    canAccessAllClasses?: SortOrder
    canViewAllStudents?: SortOrder
    canModifyHomework?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SchoolAdminMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    jobTitle?: SortOrder
    adminLevel?: SortOrder
    canManageUsers?: SortOrder
    canManageClasses?: SortOrder
    canManageClubs?: SortOrder
    canViewAnalytics?: SortOrder
    canManageSettings?: SortOrder
    canExportData?: SortOrder
    canAccessAllClasses?: SortOrder
    canViewAllStudents?: SortOrder
    canModifyHomework?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAdminLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminLevel | EnumAdminLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminLevelWithAggregatesFilter<$PrismaModel> | $Enums.AdminLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminLevelFilter<$PrismaModel>
    _max?: NestedEnumAdminLevelFilter<$PrismaModel>
  }

  export type EnumParentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ParentType | EnumParentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParentTypeFilter<$PrismaModel> | $Enums.ParentType
  }

  export type ParentRelationFilter = {
    is?: ParentWhereInput
    isNot?: ParentWhereInput
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type ParentStudentParentIdStudentIdCompoundUniqueInput = {
    parentId: string
    studentId: string
  }

  export type ParentStudentCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    parentId?: SortOrder
    studentId?: SortOrder
    relationshipType?: SortOrder
    isPrimaryContact?: SortOrder
    isEmergencyContact?: SortOrder
    hasParentalResponsibility?: SortOrder
    canGiveConsent?: SortOrder
    canCollectChild?: SortOrder
    canAccessRecords?: SortOrder
    receivesReports?: SortOrder
    receivesNotifications?: SortOrder
    canContactTeachers?: SortOrder
    custodyArrangement?: SortOrder
    restrictedAccess?: SortOrder
    accessNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentStudentMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    parentId?: SortOrder
    studentId?: SortOrder
    relationshipType?: SortOrder
    isPrimaryContact?: SortOrder
    isEmergencyContact?: SortOrder
    hasParentalResponsibility?: SortOrder
    canGiveConsent?: SortOrder
    canCollectChild?: SortOrder
    canAccessRecords?: SortOrder
    receivesReports?: SortOrder
    receivesNotifications?: SortOrder
    canContactTeachers?: SortOrder
    custodyArrangement?: SortOrder
    restrictedAccess?: SortOrder
    accessNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ParentStudentMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    parentId?: SortOrder
    studentId?: SortOrder
    relationshipType?: SortOrder
    isPrimaryContact?: SortOrder
    isEmergencyContact?: SortOrder
    hasParentalResponsibility?: SortOrder
    canGiveConsent?: SortOrder
    canCollectChild?: SortOrder
    canAccessRecords?: SortOrder
    receivesReports?: SortOrder
    receivesNotifications?: SortOrder
    canContactTeachers?: SortOrder
    custodyArrangement?: SortOrder
    restrictedAccess?: SortOrder
    accessNotes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumParentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParentType | EnumParentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ParentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParentTypeFilter<$PrismaModel>
    _max?: NestedEnumParentTypeFilter<$PrismaModel>
  }

  export type EnumRoleScopeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeFilter<$PrismaModel> | $Enums.RoleScope
  }

  export type EnumUserTypeNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel> | null
    has?: $Enums.UserType | EnumUserTypeFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    hasSome?: $Enums.UserType[] | ListEnumUserTypeFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type SchoolNullableRelationFilter = {
    is?: SchoolWhereInput | null
    isNot?: SchoolWhereInput | null
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isCustom?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    scope?: SortOrder
    applicableUserTypes?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isCustom?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    scope?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isDefault?: SortOrder
    isCustom?: SortOrder
    isActive?: SortOrder
    priority?: SortOrder
    scope?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    priority?: SortOrder
  }

  export type EnumRoleScopeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeWithAggregatesFilter<$PrismaModel> | $Enums.RoleScope
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleScopeFilter<$PrismaModel>
    _max?: NestedEnumRoleScopeFilter<$PrismaModel>
  }

  export type EnumPermissionCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionCategory | EnumPermissionCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionCategoryFilter<$PrismaModel> | $Enums.PermissionCategory
  }

  export type EnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type PermissionResourceActionScopeCompoundUniqueInput = {
    resource: string
    action: string
    scope: string
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    scope?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    scope?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    scope?: SortOrder
    isDefault?: SortOrder
    isActive?: SortOrder
    category?: SortOrder
    riskLevel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumPermissionCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionCategory | EnumPermissionCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionCategoryWithAggregatesFilter<$PrismaModel> | $Enums.PermissionCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionCategoryFilter<$PrismaModel>
    _max?: NestedEnumPermissionCategoryFilter<$PrismaModel>
  }

  export type EnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRoleIdPermissionIdCompoundUniqueInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    conditions?: SortOrder
    limitations?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    grantedBy?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    grantedBy?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionId?: SortOrder
    grantedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    grantedBy?: SortOrder
  }

  export type UserRoleCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    classIds?: SortOrder
    yearGroups?: SortOrder
    subjects?: SortOrder
    studentIds?: SortOrder
    assignedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    assignedBy?: SortOrder
    assignmentReason?: SortOrder
    additionalPermissions?: SortOrder
    restrictedPermissions?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleAvgOrderByAggregateInput = {
    yearGroups?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    assignedBy?: SortOrder
    assignmentReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    userId?: SortOrder
    roleId?: SortOrder
    assignedAt?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    assignedBy?: SortOrder
    assignmentReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRoleSumOrderByAggregateInput = {
    yearGroups?: SortOrder
  }

  export type EnumKeyStageNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.KeyStage[] | ListEnumKeyStageFieldRefInput<$PrismaModel> | null
    has?: $Enums.KeyStage | EnumKeyStageFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.KeyStage[] | ListEnumKeyStageFieldRefInput<$PrismaModel>
    hasSome?: $Enums.KeyStage[] | ListEnumKeyStageFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumClassTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassType | EnumClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClassTypeFilter<$PrismaModel> | $Enums.ClassType
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    yearGroups?: SortOrder
    keyStages?: SortOrder
    classType?: SortOrder
    subject?: SortOrder
    setLevel?: SortOrder
    academicYear?: SortOrder
    houseGroup?: SortOrder
    houseColor?: SortOrder
    capacity?: SortOrder
    isActive?: SortOrder
    classroom?: SortOrder
    clubsEnabled?: SortOrder
    leaderboardEnabled?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    yearGroups?: SortOrder
    capacity?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    classType?: SortOrder
    subject?: SortOrder
    setLevel?: SortOrder
    academicYear?: SortOrder
    houseGroup?: SortOrder
    houseColor?: SortOrder
    capacity?: SortOrder
    isActive?: SortOrder
    classroom?: SortOrder
    clubsEnabled?: SortOrder
    leaderboardEnabled?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    displayName?: SortOrder
    classType?: SortOrder
    subject?: SortOrder
    setLevel?: SortOrder
    academicYear?: SortOrder
    houseGroup?: SortOrder
    houseColor?: SortOrder
    capacity?: SortOrder
    isActive?: SortOrder
    classroom?: SortOrder
    clubsEnabled?: SortOrder
    leaderboardEnabled?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    yearGroups?: SortOrder
    capacity?: SortOrder
  }

  export type EnumClassTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassType | EnumClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClassTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClassType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassTypeFilter<$PrismaModel>
    _max?: NestedEnumClassTypeFilter<$PrismaModel>
  }

  export type EnumClassRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassRole | EnumClassRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClassRoleFilter<$PrismaModel> | $Enums.ClassRole
  }

  export type TeacherRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type TeacherClassTeacherIdClassIdRoleCompoundUniqueInput = {
    teacherId: string
    classId: string
    role: $Enums.ClassRole
  }

  export type TeacherClassCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    role?: SortOrder
    isPrimaryTeacher?: SortOrder
    subjects?: SortOrder
    timeAllocation?: SortOrder
    timetableSlots?: SortOrder
    canMarkHomework?: SortOrder
    canAssignClubs?: SortOrder
    canViewProgress?: SortOrder
    canContactParents?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeacherClassAvgOrderByAggregateInput = {
    timeAllocation?: SortOrder
  }

  export type TeacherClassMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    role?: SortOrder
    isPrimaryTeacher?: SortOrder
    timeAllocation?: SortOrder
    canMarkHomework?: SortOrder
    canAssignClubs?: SortOrder
    canViewProgress?: SortOrder
    canContactParents?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeacherClassMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    teacherId?: SortOrder
    classId?: SortOrder
    role?: SortOrder
    isPrimaryTeacher?: SortOrder
    timeAllocation?: SortOrder
    canMarkHomework?: SortOrder
    canAssignClubs?: SortOrder
    canViewProgress?: SortOrder
    canContactParents?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeacherClassSumOrderByAggregateInput = {
    timeAllocation?: SortOrder
  }

  export type EnumClassRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassRole | EnumClassRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClassRoleWithAggregatesFilter<$PrismaModel> | $Enums.ClassRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassRoleFilter<$PrismaModel>
    _max?: NestedEnumClassRoleFilter<$PrismaModel>
  }

  export type EnumClubTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubType | EnumClubTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeFilter<$PrismaModel> | $Enums.ClubType
  }

  export type EnumClubEvidenceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubEvidenceType | EnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubEvidenceTypeFilter<$PrismaModel> | $Enums.ClubEvidenceType
  }

  export type ClubCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    clubType?: SortOrder
    subject?: SortOrder
    isActive?: SortOrder
    ageGroups?: SortOrder
    keyStages?: SortOrder
    hasLevels?: SortOrder
    levelNaming?: SortOrder
    customLevels?: SortOrder
    evidenceType?: SortOrder
    logbookRequired?: SortOrder
    parentInvolvement?: SortOrder
    maxBuddyMembers?: SortOrder
    buddyGroupsEnabled?: SortOrder
    xpPerCompletion?: SortOrder
    streakEnabled?: SortOrder
    iconUrl?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubAvgOrderByAggregateInput = {
    ageGroups?: SortOrder
    maxBuddyMembers?: SortOrder
    xpPerCompletion?: SortOrder
  }

  export type ClubMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    clubType?: SortOrder
    subject?: SortOrder
    isActive?: SortOrder
    hasLevels?: SortOrder
    levelNaming?: SortOrder
    customLevels?: SortOrder
    evidenceType?: SortOrder
    logbookRequired?: SortOrder
    parentInvolvement?: SortOrder
    maxBuddyMembers?: SortOrder
    buddyGroupsEnabled?: SortOrder
    xpPerCompletion?: SortOrder
    streakEnabled?: SortOrder
    iconUrl?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    clubType?: SortOrder
    subject?: SortOrder
    isActive?: SortOrder
    hasLevels?: SortOrder
    levelNaming?: SortOrder
    customLevels?: SortOrder
    evidenceType?: SortOrder
    logbookRequired?: SortOrder
    parentInvolvement?: SortOrder
    maxBuddyMembers?: SortOrder
    buddyGroupsEnabled?: SortOrder
    xpPerCompletion?: SortOrder
    streakEnabled?: SortOrder
    iconUrl?: SortOrder
    color?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClubSumOrderByAggregateInput = {
    ageGroups?: SortOrder
    maxBuddyMembers?: SortOrder
    xpPerCompletion?: SortOrder
  }

  export type EnumClubTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubType | EnumClubTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClubType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubTypeFilter<$PrismaModel>
    _max?: NestedEnumClubTypeFilter<$PrismaModel>
  }

  export type EnumClubEvidenceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubEvidenceType | EnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubEvidenceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClubEvidenceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubEvidenceTypeFilter<$PrismaModel>
    _max?: NestedEnumClubEvidenceTypeFilter<$PrismaModel>
  }

  export type ClubNullableRelationFilter = {
    is?: ClubWhereInput | null
    isNot?: ClubWhereInput | null
  }

  export type HomeworkCompletionCountOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    studentId?: SortOrder
    clubId?: SortOrder
    completionDate?: SortOrder
    evidenceType?: SortOrder
    evidenceUrl?: SortOrder
    notes?: SortOrder
    parentNotes?: SortOrder
    timeSpentMinutes?: SortOrder
    wasLate?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkCompletionAvgOrderByAggregateInput = {
    timeSpentMinutes?: SortOrder
  }

  export type HomeworkCompletionMaxOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    studentId?: SortOrder
    clubId?: SortOrder
    completionDate?: SortOrder
    evidenceType?: SortOrder
    evidenceUrl?: SortOrder
    notes?: SortOrder
    parentNotes?: SortOrder
    timeSpentMinutes?: SortOrder
    wasLate?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkCompletionMinOrderByAggregateInput = {
    id?: SortOrder
    schoolId?: SortOrder
    studentId?: SortOrder
    clubId?: SortOrder
    completionDate?: SortOrder
    evidenceType?: SortOrder
    evidenceUrl?: SortOrder
    notes?: SortOrder
    parentNotes?: SortOrder
    timeSpentMinutes?: SortOrder
    wasLate?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HomeworkCompletionSumOrderByAggregateInput = {
    timeSpentMinutes?: SortOrder
  }

  export type UserCreateNestedManyWithoutSchoolInput = {
    create?: XOR<UserCreateWithoutSchoolInput, UserUncheckedCreateWithoutSchoolInput> | UserCreateWithoutSchoolInput[] | UserUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSchoolInput | UserCreateOrConnectWithoutSchoolInput[]
    createMany?: UserCreateManySchoolInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeacherCreateNestedManyWithoutSchoolInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ParentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ParentCreateWithoutSchoolInput, ParentUncheckedCreateWithoutSchoolInput> | ParentCreateWithoutSchoolInput[] | ParentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutSchoolInput | ParentCreateOrConnectWithoutSchoolInput[]
    createMany?: ParentCreateManySchoolInputEnvelope
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
  }

  export type SchoolAdminCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolAdminCreateWithoutSchoolInput, SchoolAdminUncheckedCreateWithoutSchoolInput> | SchoolAdminCreateWithoutSchoolInput[] | SchoolAdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutSchoolInput | SchoolAdminCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolAdminCreateManySchoolInputEnvelope
    connect?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
  }

  export type ClassCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type ClubCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClubCreateWithoutSchoolInput, ClubUncheckedCreateWithoutSchoolInput> | ClubCreateWithoutSchoolInput[] | ClubUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutSchoolInput | ClubCreateOrConnectWithoutSchoolInput[]
    createMany?: ClubCreateManySchoolInputEnvelope
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
  }

  export type ParentStudentCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ParentStudentCreateWithoutSchoolInput, ParentStudentUncheckedCreateWithoutSchoolInput> | ParentStudentCreateWithoutSchoolInput[] | ParentStudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutSchoolInput | ParentStudentCreateOrConnectWithoutSchoolInput[]
    createMany?: ParentStudentCreateManySchoolInputEnvelope
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
  }

  export type TeacherClassCreateNestedManyWithoutSchoolInput = {
    create?: XOR<TeacherClassCreateWithoutSchoolInput, TeacherClassUncheckedCreateWithoutSchoolInput> | TeacherClassCreateWithoutSchoolInput[] | TeacherClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutSchoolInput | TeacherClassCreateOrConnectWithoutSchoolInput[]
    createMany?: TeacherClassCreateManySchoolInputEnvelope
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
  }

  export type RoleCreateNestedManyWithoutSchoolInput = {
    create?: XOR<RoleCreateWithoutSchoolInput, RoleUncheckedCreateWithoutSchoolInput> | RoleCreateWithoutSchoolInput[] | RoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutSchoolInput | RoleCreateOrConnectWithoutSchoolInput[]
    createMany?: RoleCreateManySchoolInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutSchoolInput = {
    create?: XOR<UserRoleCreateWithoutSchoolInput, UserRoleUncheckedCreateWithoutSchoolInput> | UserRoleCreateWithoutSchoolInput[] | UserRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutSchoolInput | UserRoleCreateOrConnectWithoutSchoolInput[]
    createMany?: UserRoleCreateManySchoolInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type HomeworkCompletionCreateNestedManyWithoutSchoolInput = {
    create?: XOR<HomeworkCompletionCreateWithoutSchoolInput, HomeworkCompletionUncheckedCreateWithoutSchoolInput> | HomeworkCompletionCreateWithoutSchoolInput[] | HomeworkCompletionUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutSchoolInput | HomeworkCompletionCreateOrConnectWithoutSchoolInput[]
    createMany?: HomeworkCompletionCreateManySchoolInputEnvelope
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<UserCreateWithoutSchoolInput, UserUncheckedCreateWithoutSchoolInput> | UserCreateWithoutSchoolInput[] | UserUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSchoolInput | UserCreateOrConnectWithoutSchoolInput[]
    createMany?: UserCreateManySchoolInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ParentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ParentCreateWithoutSchoolInput, ParentUncheckedCreateWithoutSchoolInput> | ParentCreateWithoutSchoolInput[] | ParentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutSchoolInput | ParentCreateOrConnectWithoutSchoolInput[]
    createMany?: ParentCreateManySchoolInputEnvelope
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
  }

  export type SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<SchoolAdminCreateWithoutSchoolInput, SchoolAdminUncheckedCreateWithoutSchoolInput> | SchoolAdminCreateWithoutSchoolInput[] | SchoolAdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutSchoolInput | SchoolAdminCreateOrConnectWithoutSchoolInput[]
    createMany?: SchoolAdminCreateManySchoolInputEnvelope
    connect?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type ClubUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ClubCreateWithoutSchoolInput, ClubUncheckedCreateWithoutSchoolInput> | ClubCreateWithoutSchoolInput[] | ClubUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutSchoolInput | ClubCreateOrConnectWithoutSchoolInput[]
    createMany?: ClubCreateManySchoolInputEnvelope
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
  }

  export type ParentStudentUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<ParentStudentCreateWithoutSchoolInput, ParentStudentUncheckedCreateWithoutSchoolInput> | ParentStudentCreateWithoutSchoolInput[] | ParentStudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutSchoolInput | ParentStudentCreateOrConnectWithoutSchoolInput[]
    createMany?: ParentStudentCreateManySchoolInputEnvelope
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
  }

  export type TeacherClassUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<TeacherClassCreateWithoutSchoolInput, TeacherClassUncheckedCreateWithoutSchoolInput> | TeacherClassCreateWithoutSchoolInput[] | TeacherClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutSchoolInput | TeacherClassCreateOrConnectWithoutSchoolInput[]
    createMany?: TeacherClassCreateManySchoolInputEnvelope
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<RoleCreateWithoutSchoolInput, RoleUncheckedCreateWithoutSchoolInput> | RoleCreateWithoutSchoolInput[] | RoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutSchoolInput | RoleCreateOrConnectWithoutSchoolInput[]
    createMany?: RoleCreateManySchoolInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<UserRoleCreateWithoutSchoolInput, UserRoleUncheckedCreateWithoutSchoolInput> | UserRoleCreateWithoutSchoolInput[] | UserRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutSchoolInput | UserRoleCreateOrConnectWithoutSchoolInput[]
    createMany?: UserRoleCreateManySchoolInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput = {
    create?: XOR<HomeworkCompletionCreateWithoutSchoolInput, HomeworkCompletionUncheckedCreateWithoutSchoolInput> | HomeworkCompletionCreateWithoutSchoolInput[] | HomeworkCompletionUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutSchoolInput | HomeworkCompletionCreateOrConnectWithoutSchoolInput[]
    createMany?: HomeworkCompletionCreateManySchoolInputEnvelope
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumSchoolTypeFieldUpdateOperationsInput = {
    set?: $Enums.SchoolType
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<UserCreateWithoutSchoolInput, UserUncheckedCreateWithoutSchoolInput> | UserCreateWithoutSchoolInput[] | UserUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSchoolInput | UserCreateOrConnectWithoutSchoolInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSchoolInput | UserUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: UserCreateManySchoolInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSchoolInput | UserUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSchoolInput | UserUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeacherUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutSchoolInput | TeacherUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutSchoolInput | TeacherUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutSchoolInput | TeacherUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ParentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ParentCreateWithoutSchoolInput, ParentUncheckedCreateWithoutSchoolInput> | ParentCreateWithoutSchoolInput[] | ParentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutSchoolInput | ParentCreateOrConnectWithoutSchoolInput[]
    upsert?: ParentUpsertWithWhereUniqueWithoutSchoolInput | ParentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ParentCreateManySchoolInputEnvelope
    set?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    disconnect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    delete?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    update?: ParentUpdateWithWhereUniqueWithoutSchoolInput | ParentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ParentUpdateManyWithWhereWithoutSchoolInput | ParentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ParentScalarWhereInput | ParentScalarWhereInput[]
  }

  export type SchoolAdminUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolAdminCreateWithoutSchoolInput, SchoolAdminUncheckedCreateWithoutSchoolInput> | SchoolAdminCreateWithoutSchoolInput[] | SchoolAdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutSchoolInput | SchoolAdminCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolAdminUpsertWithWhereUniqueWithoutSchoolInput | SchoolAdminUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolAdminCreateManySchoolInputEnvelope
    set?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    disconnect?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    delete?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    connect?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    update?: SchoolAdminUpdateWithWhereUniqueWithoutSchoolInput | SchoolAdminUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolAdminUpdateManyWithWhereWithoutSchoolInput | SchoolAdminUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolAdminScalarWhereInput | SchoolAdminScalarWhereInput[]
  }

  export type ClassUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutSchoolInput | ClassUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutSchoolInput | ClassUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutSchoolInput | ClassUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type ClubUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClubCreateWithoutSchoolInput, ClubUncheckedCreateWithoutSchoolInput> | ClubCreateWithoutSchoolInput[] | ClubUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutSchoolInput | ClubCreateOrConnectWithoutSchoolInput[]
    upsert?: ClubUpsertWithWhereUniqueWithoutSchoolInput | ClubUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClubCreateManySchoolInputEnvelope
    set?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    disconnect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    delete?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    update?: ClubUpdateWithWhereUniqueWithoutSchoolInput | ClubUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClubUpdateManyWithWhereWithoutSchoolInput | ClubUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClubScalarWhereInput | ClubScalarWhereInput[]
  }

  export type ParentStudentUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ParentStudentCreateWithoutSchoolInput, ParentStudentUncheckedCreateWithoutSchoolInput> | ParentStudentCreateWithoutSchoolInput[] | ParentStudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutSchoolInput | ParentStudentCreateOrConnectWithoutSchoolInput[]
    upsert?: ParentStudentUpsertWithWhereUniqueWithoutSchoolInput | ParentStudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ParentStudentCreateManySchoolInputEnvelope
    set?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    disconnect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    delete?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    update?: ParentStudentUpdateWithWhereUniqueWithoutSchoolInput | ParentStudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ParentStudentUpdateManyWithWhereWithoutSchoolInput | ParentStudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
  }

  export type TeacherClassUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<TeacherClassCreateWithoutSchoolInput, TeacherClassUncheckedCreateWithoutSchoolInput> | TeacherClassCreateWithoutSchoolInput[] | TeacherClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutSchoolInput | TeacherClassCreateOrConnectWithoutSchoolInput[]
    upsert?: TeacherClassUpsertWithWhereUniqueWithoutSchoolInput | TeacherClassUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: TeacherClassCreateManySchoolInputEnvelope
    set?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    disconnect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    delete?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    update?: TeacherClassUpdateWithWhereUniqueWithoutSchoolInput | TeacherClassUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: TeacherClassUpdateManyWithWhereWithoutSchoolInput | TeacherClassUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
  }

  export type RoleUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<RoleCreateWithoutSchoolInput, RoleUncheckedCreateWithoutSchoolInput> | RoleCreateWithoutSchoolInput[] | RoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutSchoolInput | RoleCreateOrConnectWithoutSchoolInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutSchoolInput | RoleUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: RoleCreateManySchoolInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutSchoolInput | RoleUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutSchoolInput | RoleUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<UserRoleCreateWithoutSchoolInput, UserRoleUncheckedCreateWithoutSchoolInput> | UserRoleCreateWithoutSchoolInput[] | UserRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutSchoolInput | UserRoleCreateOrConnectWithoutSchoolInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutSchoolInput | UserRoleUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: UserRoleCreateManySchoolInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutSchoolInput | UserRoleUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutSchoolInput | UserRoleUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type HomeworkCompletionUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<HomeworkCompletionCreateWithoutSchoolInput, HomeworkCompletionUncheckedCreateWithoutSchoolInput> | HomeworkCompletionCreateWithoutSchoolInput[] | HomeworkCompletionUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutSchoolInput | HomeworkCompletionCreateOrConnectWithoutSchoolInput[]
    upsert?: HomeworkCompletionUpsertWithWhereUniqueWithoutSchoolInput | HomeworkCompletionUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: HomeworkCompletionCreateManySchoolInputEnvelope
    set?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    disconnect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    delete?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    update?: HomeworkCompletionUpdateWithWhereUniqueWithoutSchoolInput | HomeworkCompletionUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: HomeworkCompletionUpdateManyWithWhereWithoutSchoolInput | HomeworkCompletionUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<UserCreateWithoutSchoolInput, UserUncheckedCreateWithoutSchoolInput> | UserCreateWithoutSchoolInput[] | UserUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserCreateOrConnectWithoutSchoolInput | UserCreateOrConnectWithoutSchoolInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutSchoolInput | UserUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: UserCreateManySchoolInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutSchoolInput | UserUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: UserUpdateManyWithWhereWithoutSchoolInput | UserUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput> | TeacherCreateWithoutSchoolInput[] | TeacherUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutSchoolInput | TeacherCreateOrConnectWithoutSchoolInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutSchoolInput | TeacherUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: TeacherCreateManySchoolInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutSchoolInput | TeacherUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutSchoolInput | TeacherUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput> | StudentCreateWithoutSchoolInput[] | StudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutSchoolInput | StudentCreateOrConnectWithoutSchoolInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutSchoolInput | StudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: StudentCreateManySchoolInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutSchoolInput | StudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutSchoolInput | StudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type ParentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ParentCreateWithoutSchoolInput, ParentUncheckedCreateWithoutSchoolInput> | ParentCreateWithoutSchoolInput[] | ParentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentCreateOrConnectWithoutSchoolInput | ParentCreateOrConnectWithoutSchoolInput[]
    upsert?: ParentUpsertWithWhereUniqueWithoutSchoolInput | ParentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ParentCreateManySchoolInputEnvelope
    set?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    disconnect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    delete?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    connect?: ParentWhereUniqueInput | ParentWhereUniqueInput[]
    update?: ParentUpdateWithWhereUniqueWithoutSchoolInput | ParentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ParentUpdateManyWithWhereWithoutSchoolInput | ParentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ParentScalarWhereInput | ParentScalarWhereInput[]
  }

  export type SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<SchoolAdminCreateWithoutSchoolInput, SchoolAdminUncheckedCreateWithoutSchoolInput> | SchoolAdminCreateWithoutSchoolInput[] | SchoolAdminUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutSchoolInput | SchoolAdminCreateOrConnectWithoutSchoolInput[]
    upsert?: SchoolAdminUpsertWithWhereUniqueWithoutSchoolInput | SchoolAdminUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: SchoolAdminCreateManySchoolInputEnvelope
    set?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    disconnect?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    delete?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    connect?: SchoolAdminWhereUniqueInput | SchoolAdminWhereUniqueInput[]
    update?: SchoolAdminUpdateWithWhereUniqueWithoutSchoolInput | SchoolAdminUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: SchoolAdminUpdateManyWithWhereWithoutSchoolInput | SchoolAdminUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: SchoolAdminScalarWhereInput | SchoolAdminScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput> | ClassCreateWithoutSchoolInput[] | ClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutSchoolInput | ClassCreateOrConnectWithoutSchoolInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutSchoolInput | ClassUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClassCreateManySchoolInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutSchoolInput | ClassUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutSchoolInput | ClassUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type ClubUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ClubCreateWithoutSchoolInput, ClubUncheckedCreateWithoutSchoolInput> | ClubCreateWithoutSchoolInput[] | ClubUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ClubCreateOrConnectWithoutSchoolInput | ClubCreateOrConnectWithoutSchoolInput[]
    upsert?: ClubUpsertWithWhereUniqueWithoutSchoolInput | ClubUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ClubCreateManySchoolInputEnvelope
    set?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    disconnect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    delete?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    connect?: ClubWhereUniqueInput | ClubWhereUniqueInput[]
    update?: ClubUpdateWithWhereUniqueWithoutSchoolInput | ClubUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ClubUpdateManyWithWhereWithoutSchoolInput | ClubUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ClubScalarWhereInput | ClubScalarWhereInput[]
  }

  export type ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<ParentStudentCreateWithoutSchoolInput, ParentStudentUncheckedCreateWithoutSchoolInput> | ParentStudentCreateWithoutSchoolInput[] | ParentStudentUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutSchoolInput | ParentStudentCreateOrConnectWithoutSchoolInput[]
    upsert?: ParentStudentUpsertWithWhereUniqueWithoutSchoolInput | ParentStudentUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: ParentStudentCreateManySchoolInputEnvelope
    set?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    disconnect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    delete?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    update?: ParentStudentUpdateWithWhereUniqueWithoutSchoolInput | ParentStudentUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: ParentStudentUpdateManyWithWhereWithoutSchoolInput | ParentStudentUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
  }

  export type TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<TeacherClassCreateWithoutSchoolInput, TeacherClassUncheckedCreateWithoutSchoolInput> | TeacherClassCreateWithoutSchoolInput[] | TeacherClassUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutSchoolInput | TeacherClassCreateOrConnectWithoutSchoolInput[]
    upsert?: TeacherClassUpsertWithWhereUniqueWithoutSchoolInput | TeacherClassUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: TeacherClassCreateManySchoolInputEnvelope
    set?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    disconnect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    delete?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    update?: TeacherClassUpdateWithWhereUniqueWithoutSchoolInput | TeacherClassUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: TeacherClassUpdateManyWithWhereWithoutSchoolInput | TeacherClassUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<RoleCreateWithoutSchoolInput, RoleUncheckedCreateWithoutSchoolInput> | RoleCreateWithoutSchoolInput[] | RoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutSchoolInput | RoleCreateOrConnectWithoutSchoolInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutSchoolInput | RoleUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: RoleCreateManySchoolInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutSchoolInput | RoleUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutSchoolInput | RoleUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<UserRoleCreateWithoutSchoolInput, UserRoleUncheckedCreateWithoutSchoolInput> | UserRoleCreateWithoutSchoolInput[] | UserRoleUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutSchoolInput | UserRoleCreateOrConnectWithoutSchoolInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutSchoolInput | UserRoleUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: UserRoleCreateManySchoolInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutSchoolInput | UserRoleUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutSchoolInput | UserRoleUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput = {
    create?: XOR<HomeworkCompletionCreateWithoutSchoolInput, HomeworkCompletionUncheckedCreateWithoutSchoolInput> | HomeworkCompletionCreateWithoutSchoolInput[] | HomeworkCompletionUncheckedCreateWithoutSchoolInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutSchoolInput | HomeworkCompletionCreateOrConnectWithoutSchoolInput[]
    upsert?: HomeworkCompletionUpsertWithWhereUniqueWithoutSchoolInput | HomeworkCompletionUpsertWithWhereUniqueWithoutSchoolInput[]
    createMany?: HomeworkCompletionCreateManySchoolInputEnvelope
    set?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    disconnect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    delete?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    update?: HomeworkCompletionUpdateWithWhereUniqueWithoutSchoolInput | HomeworkCompletionUpdateWithWhereUniqueWithoutSchoolInput[]
    updateMany?: HomeworkCompletionUpdateManyWithWhereWithoutSchoolInput | HomeworkCompletionUpdateManyWithWhereWithoutSchoolInput[]
    deleteMany?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
  }

  export type TeacherCreateNestedOneWithoutUserInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    connect?: TeacherWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type ParentCreateNestedOneWithoutUserInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput
    connect?: ParentWhereUniqueInput
  }

  export type SchoolAdminCreateNestedOneWithoutUserInput = {
    create?: XOR<SchoolAdminCreateWithoutUserInput, SchoolAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutUserInput
    connect?: SchoolAdminWhereUniqueInput
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type SchoolCreateNestedOneWithoutUsersInput = {
    create?: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutUsersInput
    connect?: SchoolWhereUniqueInput
  }

  export type TeacherUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    connect?: TeacherWhereUniqueInput
  }

  export type StudentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type ParentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput
    connect?: ParentWhereUniqueInput
  }

  export type SchoolAdminUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<SchoolAdminCreateWithoutUserInput, SchoolAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutUserInput
    connect?: SchoolAdminWhereUniqueInput
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type TeacherUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    upsert?: TeacherUpsertWithoutUserInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutUserInput, TeacherUpdateWithoutUserInput>, TeacherUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type ParentUpdateOneWithoutUserNestedInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput
    upsert?: ParentUpsertWithoutUserInput
    disconnect?: ParentWhereInput | boolean
    delete?: ParentWhereInput | boolean
    connect?: ParentWhereUniqueInput
    update?: XOR<XOR<ParentUpdateToOneWithWhereWithoutUserInput, ParentUpdateWithoutUserInput>, ParentUncheckedUpdateWithoutUserInput>
  }

  export type SchoolAdminUpdateOneWithoutUserNestedInput = {
    create?: XOR<SchoolAdminCreateWithoutUserInput, SchoolAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutUserInput
    upsert?: SchoolAdminUpsertWithoutUserInput
    disconnect?: SchoolAdminWhereInput | boolean
    delete?: SchoolAdminWhereInput | boolean
    connect?: SchoolAdminWhereUniqueInput
    update?: XOR<XOR<SchoolAdminUpdateToOneWithWhereWithoutUserInput, SchoolAdminUpdateWithoutUserInput>, SchoolAdminUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type SchoolUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutUsersInput
    upsert?: SchoolUpsertWithoutUsersInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutUsersInput, SchoolUpdateWithoutUsersInput>, SchoolUncheckedUpdateWithoutUsersInput>
  }

  export type TeacherUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutUserInput
    upsert?: TeacherUpsertWithoutUserInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutUserInput, TeacherUpdateWithoutUserInput>, TeacherUncheckedUpdateWithoutUserInput>
  }

  export type StudentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type ParentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
    connectOrCreate?: ParentCreateOrConnectWithoutUserInput
    upsert?: ParentUpsertWithoutUserInput
    disconnect?: ParentWhereInput | boolean
    delete?: ParentWhereInput | boolean
    connect?: ParentWhereUniqueInput
    update?: XOR<XOR<ParentUpdateToOneWithWhereWithoutUserInput, ParentUpdateWithoutUserInput>, ParentUncheckedUpdateWithoutUserInput>
  }

  export type SchoolAdminUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<SchoolAdminCreateWithoutUserInput, SchoolAdminUncheckedCreateWithoutUserInput>
    connectOrCreate?: SchoolAdminCreateOrConnectWithoutUserInput
    upsert?: SchoolAdminUpsertWithoutUserInput
    disconnect?: SchoolAdminWhereInput | boolean
    delete?: SchoolAdminWhereInput | boolean
    connect?: SchoolAdminWhereUniqueInput
    update?: XOR<XOR<SchoolAdminUpdateToOneWithWhereWithoutUserInput, SchoolAdminUpdateWithoutUserInput>, SchoolAdminUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type TeacherCreatesubjectsInput = {
    set: string[]
  }

  export type TeacherCreateyearGroupsInput = {
    set: number[]
  }

  export type TeacherClassCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherClassCreateWithoutTeacherInput, TeacherClassUncheckedCreateWithoutTeacherInput> | TeacherClassCreateWithoutTeacherInput[] | TeacherClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutTeacherInput | TeacherClassCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherClassCreateManyTeacherInputEnvelope
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
  }

  export type SchoolCreateNestedOneWithoutTeachersInput = {
    create?: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutTeachersInput
    connect?: SchoolWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTeacherInput = {
    create?: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInput
    connect?: UserWhereUniqueInput
  }

  export type TeacherClassUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherClassCreateWithoutTeacherInput, TeacherClassUncheckedCreateWithoutTeacherInput> | TeacherClassCreateWithoutTeacherInput[] | TeacherClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutTeacherInput | TeacherClassCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherClassCreateManyTeacherInputEnvelope
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
  }

  export type EnumTeacherTypeFieldUpdateOperationsInput = {
    set?: $Enums.TeacherType
  }

  export type TeacherUpdatesubjectsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TeacherUpdateyearGroupsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type EnumContractTypeFieldUpdateOperationsInput = {
    set?: $Enums.ContractType
  }

  export type TeacherClassUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherClassCreateWithoutTeacherInput, TeacherClassUncheckedCreateWithoutTeacherInput> | TeacherClassCreateWithoutTeacherInput[] | TeacherClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutTeacherInput | TeacherClassCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherClassUpsertWithWhereUniqueWithoutTeacherInput | TeacherClassUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherClassCreateManyTeacherInputEnvelope
    set?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    disconnect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    delete?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    update?: TeacherClassUpdateWithWhereUniqueWithoutTeacherInput | TeacherClassUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherClassUpdateManyWithWhereWithoutTeacherInput | TeacherClassUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
  }

  export type SchoolUpdateOneRequiredWithoutTeachersNestedInput = {
    create?: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutTeachersInput
    upsert?: SchoolUpsertWithoutTeachersInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutTeachersInput, SchoolUpdateWithoutTeachersInput>, SchoolUncheckedUpdateWithoutTeachersInput>
  }

  export type UserUpdateOneRequiredWithoutTeacherNestedInput = {
    create?: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherInput
    upsert?: UserUpsertWithoutTeacherInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeacherInput, UserUpdateWithoutTeacherInput>, UserUncheckedUpdateWithoutTeacherInput>
  }

  export type TeacherClassUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherClassCreateWithoutTeacherInput, TeacherClassUncheckedCreateWithoutTeacherInput> | TeacherClassCreateWithoutTeacherInput[] | TeacherClassUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutTeacherInput | TeacherClassCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherClassUpsertWithWhereUniqueWithoutTeacherInput | TeacherClassUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherClassCreateManyTeacherInputEnvelope
    set?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    disconnect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    delete?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    update?: TeacherClassUpdateWithWhereUniqueWithoutTeacherInput | TeacherClassUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherClassUpdateManyWithWhereWithoutTeacherInput | TeacherClassUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
  }

  export type ParentStudentCreateNestedManyWithoutStudentInput = {
    create?: XOR<ParentStudentCreateWithoutStudentInput, ParentStudentUncheckedCreateWithoutStudentInput> | ParentStudentCreateWithoutStudentInput[] | ParentStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutStudentInput | ParentStudentCreateOrConnectWithoutStudentInput[]
    createMany?: ParentStudentCreateManyStudentInputEnvelope
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
  }

  export type HomeworkCompletionCreateNestedManyWithoutStudentInput = {
    create?: XOR<HomeworkCompletionCreateWithoutStudentInput, HomeworkCompletionUncheckedCreateWithoutStudentInput> | HomeworkCompletionCreateWithoutStudentInput[] | HomeworkCompletionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutStudentInput | HomeworkCompletionCreateOrConnectWithoutStudentInput[]
    createMany?: HomeworkCompletionCreateManyStudentInputEnvelope
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
  }

  export type SchoolCreateNestedOneWithoutStudentsInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    connect?: ClassWhereUniqueInput
  }

  export type ParentStudentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<ParentStudentCreateWithoutStudentInput, ParentStudentUncheckedCreateWithoutStudentInput> | ParentStudentCreateWithoutStudentInput[] | ParentStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutStudentInput | ParentStudentCreateOrConnectWithoutStudentInput[]
    createMany?: ParentStudentCreateManyStudentInputEnvelope
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
  }

  export type HomeworkCompletionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<HomeworkCompletionCreateWithoutStudentInput, HomeworkCompletionUncheckedCreateWithoutStudentInput> | HomeworkCompletionCreateWithoutStudentInput[] | HomeworkCompletionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutStudentInput | HomeworkCompletionCreateOrConnectWithoutStudentInput[]
    createMany?: HomeworkCompletionCreateManyStudentInputEnvelope
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
  }

  export type ParentStudentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ParentStudentCreateWithoutStudentInput, ParentStudentUncheckedCreateWithoutStudentInput> | ParentStudentCreateWithoutStudentInput[] | ParentStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutStudentInput | ParentStudentCreateOrConnectWithoutStudentInput[]
    upsert?: ParentStudentUpsertWithWhereUniqueWithoutStudentInput | ParentStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ParentStudentCreateManyStudentInputEnvelope
    set?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    disconnect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    delete?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    update?: ParentStudentUpdateWithWhereUniqueWithoutStudentInput | ParentStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ParentStudentUpdateManyWithWhereWithoutStudentInput | ParentStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
  }

  export type HomeworkCompletionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<HomeworkCompletionCreateWithoutStudentInput, HomeworkCompletionUncheckedCreateWithoutStudentInput> | HomeworkCompletionCreateWithoutStudentInput[] | HomeworkCompletionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutStudentInput | HomeworkCompletionCreateOrConnectWithoutStudentInput[]
    upsert?: HomeworkCompletionUpsertWithWhereUniqueWithoutStudentInput | HomeworkCompletionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: HomeworkCompletionCreateManyStudentInputEnvelope
    set?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    disconnect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    delete?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    update?: HomeworkCompletionUpdateWithWhereUniqueWithoutStudentInput | HomeworkCompletionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: HomeworkCompletionUpdateManyWithWhereWithoutStudentInput | HomeworkCompletionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
  }

  export type SchoolUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutStudentsInput
    upsert?: SchoolUpsertWithoutStudentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutStudentsInput, SchoolUpdateWithoutStudentsInput>, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type UserUpdateOneWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type ClassUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentsInput
    upsert?: ClassUpsertWithoutStudentsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentsInput, ClassUpdateWithoutStudentsInput>, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ParentStudentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<ParentStudentCreateWithoutStudentInput, ParentStudentUncheckedCreateWithoutStudentInput> | ParentStudentCreateWithoutStudentInput[] | ParentStudentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutStudentInput | ParentStudentCreateOrConnectWithoutStudentInput[]
    upsert?: ParentStudentUpsertWithWhereUniqueWithoutStudentInput | ParentStudentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: ParentStudentCreateManyStudentInputEnvelope
    set?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    disconnect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    delete?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    update?: ParentStudentUpdateWithWhereUniqueWithoutStudentInput | ParentStudentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: ParentStudentUpdateManyWithWhereWithoutStudentInput | ParentStudentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
  }

  export type HomeworkCompletionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<HomeworkCompletionCreateWithoutStudentInput, HomeworkCompletionUncheckedCreateWithoutStudentInput> | HomeworkCompletionCreateWithoutStudentInput[] | HomeworkCompletionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutStudentInput | HomeworkCompletionCreateOrConnectWithoutStudentInput[]
    upsert?: HomeworkCompletionUpsertWithWhereUniqueWithoutStudentInput | HomeworkCompletionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: HomeworkCompletionCreateManyStudentInputEnvelope
    set?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    disconnect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    delete?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    update?: HomeworkCompletionUpdateWithWhereUniqueWithoutStudentInput | HomeworkCompletionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: HomeworkCompletionUpdateManyWithWhereWithoutStudentInput | HomeworkCompletionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
  }

  export type ParentStudentCreateNestedManyWithoutParentInput = {
    create?: XOR<ParentStudentCreateWithoutParentInput, ParentStudentUncheckedCreateWithoutParentInput> | ParentStudentCreateWithoutParentInput[] | ParentStudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutParentInput | ParentStudentCreateOrConnectWithoutParentInput[]
    createMany?: ParentStudentCreateManyParentInputEnvelope
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
  }

  export type SchoolCreateNestedOneWithoutParentsInput = {
    create?: XOR<SchoolCreateWithoutParentsInput, SchoolUncheckedCreateWithoutParentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutParentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutParentInput = {
    create?: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
    connectOrCreate?: UserCreateOrConnectWithoutParentInput
    connect?: UserWhereUniqueInput
  }

  export type ParentStudentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<ParentStudentCreateWithoutParentInput, ParentStudentUncheckedCreateWithoutParentInput> | ParentStudentCreateWithoutParentInput[] | ParentStudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutParentInput | ParentStudentCreateOrConnectWithoutParentInput[]
    createMany?: ParentStudentCreateManyParentInputEnvelope
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
  }

  export type EnumContactMethodFieldUpdateOperationsInput = {
    set?: $Enums.ContactMethod
  }

  export type ParentStudentUpdateManyWithoutParentNestedInput = {
    create?: XOR<ParentStudentCreateWithoutParentInput, ParentStudentUncheckedCreateWithoutParentInput> | ParentStudentCreateWithoutParentInput[] | ParentStudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutParentInput | ParentStudentCreateOrConnectWithoutParentInput[]
    upsert?: ParentStudentUpsertWithWhereUniqueWithoutParentInput | ParentStudentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ParentStudentCreateManyParentInputEnvelope
    set?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    disconnect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    delete?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    update?: ParentStudentUpdateWithWhereUniqueWithoutParentInput | ParentStudentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ParentStudentUpdateManyWithWhereWithoutParentInput | ParentStudentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
  }

  export type SchoolUpdateOneRequiredWithoutParentsNestedInput = {
    create?: XOR<SchoolCreateWithoutParentsInput, SchoolUncheckedCreateWithoutParentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutParentsInput
    upsert?: SchoolUpsertWithoutParentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutParentsInput, SchoolUpdateWithoutParentsInput>, SchoolUncheckedUpdateWithoutParentsInput>
  }

  export type UserUpdateOneRequiredWithoutParentNestedInput = {
    create?: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
    connectOrCreate?: UserCreateOrConnectWithoutParentInput
    upsert?: UserUpsertWithoutParentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutParentInput, UserUpdateWithoutParentInput>, UserUncheckedUpdateWithoutParentInput>
  }

  export type ParentStudentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<ParentStudentCreateWithoutParentInput, ParentStudentUncheckedCreateWithoutParentInput> | ParentStudentCreateWithoutParentInput[] | ParentStudentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ParentStudentCreateOrConnectWithoutParentInput | ParentStudentCreateOrConnectWithoutParentInput[]
    upsert?: ParentStudentUpsertWithWhereUniqueWithoutParentInput | ParentStudentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ParentStudentCreateManyParentInputEnvelope
    set?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    disconnect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    delete?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    connect?: ParentStudentWhereUniqueInput | ParentStudentWhereUniqueInput[]
    update?: ParentStudentUpdateWithWhereUniqueWithoutParentInput | ParentStudentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ParentStudentUpdateManyWithWhereWithoutParentInput | ParentStudentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutSchoolAdminsInput = {
    create?: XOR<SchoolCreateWithoutSchoolAdminsInput, SchoolUncheckedCreateWithoutSchoolAdminsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSchoolAdminsInput
    connect?: SchoolWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSchoolAdminInput = {
    create?: XOR<UserCreateWithoutSchoolAdminInput, UserUncheckedCreateWithoutSchoolAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchoolAdminInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAdminLevelFieldUpdateOperationsInput = {
    set?: $Enums.AdminLevel
  }

  export type SchoolUpdateOneRequiredWithoutSchoolAdminsNestedInput = {
    create?: XOR<SchoolCreateWithoutSchoolAdminsInput, SchoolUncheckedCreateWithoutSchoolAdminsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutSchoolAdminsInput
    upsert?: SchoolUpsertWithoutSchoolAdminsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutSchoolAdminsInput, SchoolUpdateWithoutSchoolAdminsInput>, SchoolUncheckedUpdateWithoutSchoolAdminsInput>
  }

  export type UserUpdateOneRequiredWithoutSchoolAdminNestedInput = {
    create?: XOR<UserCreateWithoutSchoolAdminInput, UserUncheckedCreateWithoutSchoolAdminInput>
    connectOrCreate?: UserCreateOrConnectWithoutSchoolAdminInput
    upsert?: UserUpsertWithoutSchoolAdminInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSchoolAdminInput, UserUpdateWithoutSchoolAdminInput>, UserUncheckedUpdateWithoutSchoolAdminInput>
  }

  export type SchoolCreateNestedOneWithoutParentStudentsInput = {
    create?: XOR<SchoolCreateWithoutParentStudentsInput, SchoolUncheckedCreateWithoutParentStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutParentStudentsInput
    connect?: SchoolWhereUniqueInput
  }

  export type ParentCreateNestedOneWithoutParentStudentsInput = {
    create?: XOR<ParentCreateWithoutParentStudentsInput, ParentUncheckedCreateWithoutParentStudentsInput>
    connectOrCreate?: ParentCreateOrConnectWithoutParentStudentsInput
    connect?: ParentWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutParentStudentsInput = {
    create?: XOR<StudentCreateWithoutParentStudentsInput, StudentUncheckedCreateWithoutParentStudentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutParentStudentsInput
    connect?: StudentWhereUniqueInput
  }

  export type EnumParentTypeFieldUpdateOperationsInput = {
    set?: $Enums.ParentType
  }

  export type SchoolUpdateOneRequiredWithoutParentStudentsNestedInput = {
    create?: XOR<SchoolCreateWithoutParentStudentsInput, SchoolUncheckedCreateWithoutParentStudentsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutParentStudentsInput
    upsert?: SchoolUpsertWithoutParentStudentsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutParentStudentsInput, SchoolUpdateWithoutParentStudentsInput>, SchoolUncheckedUpdateWithoutParentStudentsInput>
  }

  export type ParentUpdateOneRequiredWithoutParentStudentsNestedInput = {
    create?: XOR<ParentCreateWithoutParentStudentsInput, ParentUncheckedCreateWithoutParentStudentsInput>
    connectOrCreate?: ParentCreateOrConnectWithoutParentStudentsInput
    upsert?: ParentUpsertWithoutParentStudentsInput
    connect?: ParentWhereUniqueInput
    update?: XOR<XOR<ParentUpdateToOneWithWhereWithoutParentStudentsInput, ParentUpdateWithoutParentStudentsInput>, ParentUncheckedUpdateWithoutParentStudentsInput>
  }

  export type StudentUpdateOneRequiredWithoutParentStudentsNestedInput = {
    create?: XOR<StudentCreateWithoutParentStudentsInput, StudentUncheckedCreateWithoutParentStudentsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutParentStudentsInput
    upsert?: StudentUpsertWithoutParentStudentsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutParentStudentsInput, StudentUpdateWithoutParentStudentsInput>, StudentUncheckedUpdateWithoutParentStudentsInput>
  }

  export type RoleCreateapplicableUserTypesInput = {
    set: $Enums.UserType[]
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type SchoolCreateNestedOneWithoutRolesInput = {
    create?: XOR<SchoolCreateWithoutRolesInput, SchoolUncheckedCreateWithoutRolesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutRolesInput
    connect?: SchoolWhereUniqueInput
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type EnumRoleScopeFieldUpdateOperationsInput = {
    set?: $Enums.RoleScope
  }

  export type RoleUpdateapplicableUserTypesInput = {
    set?: $Enums.UserType[]
    push?: $Enums.UserType | $Enums.UserType[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type SchoolUpdateOneWithoutRolesNestedInput = {
    create?: XOR<SchoolCreateWithoutRolesInput, SchoolUncheckedCreateWithoutRolesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutRolesInput
    upsert?: SchoolUpsertWithoutRolesInput
    disconnect?: SchoolWhereInput | boolean
    delete?: SchoolWhereInput | boolean
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutRolesInput, SchoolUpdateWithoutRolesInput>, SchoolUncheckedUpdateWithoutRolesInput>
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type EnumPermissionCategoryFieldUpdateOperationsInput = {
    set?: $Enums.PermissionCategory
  }

  export type EnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolePermissionsInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    upsert?: RoleUpsertWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermissionsInput, RoleUpdateWithoutPermissionsInput>, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    upsert?: PermissionUpsertWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolePermissionsInput, PermissionUpdateWithoutRolePermissionsInput>, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type UserRoleCreateclassIdsInput = {
    set: string[]
  }

  export type UserRoleCreateyearGroupsInput = {
    set: number[]
  }

  export type UserRoleCreatesubjectsInput = {
    set: string[]
  }

  export type UserRoleCreatestudentIdsInput = {
    set: string[]
  }

  export type SchoolCreateNestedOneWithoutUserRolesInput = {
    create?: XOR<SchoolCreateWithoutUserRolesInput, SchoolUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutUserRolesInput
    connect?: SchoolWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserRolesInput = {
    create?: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUserRolesInput = {
    create?: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRolesInput
    connect?: RoleWhereUniqueInput
  }

  export type UserRoleUpdateclassIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserRoleUpdateyearGroupsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type UserRoleUpdatesubjectsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserRoleUpdatestudentIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchoolUpdateOneRequiredWithoutUserRolesNestedInput = {
    create?: XOR<SchoolCreateWithoutUserRolesInput, SchoolUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutUserRolesInput
    upsert?: SchoolUpsertWithoutUserRolesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutUserRolesInput, SchoolUpdateWithoutUserRolesInput>, SchoolUncheckedUpdateWithoutUserRolesInput>
  }

  export type UserUpdateOneRequiredWithoutUserRolesNestedInput = {
    create?: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRolesInput
    upsert?: UserUpsertWithoutUserRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserRolesInput, UserUpdateWithoutUserRolesInput>, UserUncheckedUpdateWithoutUserRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUserRolesNestedInput = {
    create?: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserRolesInput
    upsert?: RoleUpsertWithoutUserRolesInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUserRolesInput, RoleUpdateWithoutUserRolesInput>, RoleUncheckedUpdateWithoutUserRolesInput>
  }

  export type ClassCreateyearGroupsInput = {
    set: number[]
  }

  export type ClassCreatekeyStagesInput = {
    set: $Enums.KeyStage[]
  }

  export type SchoolCreateNestedOneWithoutClassesInput = {
    create?: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassesInput
    connect?: SchoolWhereUniqueInput
  }

  export type TeacherClassCreateNestedManyWithoutClassInput = {
    create?: XOR<TeacherClassCreateWithoutClassInput, TeacherClassUncheckedCreateWithoutClassInput> | TeacherClassCreateWithoutClassInput[] | TeacherClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutClassInput | TeacherClassCreateOrConnectWithoutClassInput[]
    createMany?: TeacherClassCreateManyClassInputEnvelope
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type TeacherClassUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<TeacherClassCreateWithoutClassInput, TeacherClassUncheckedCreateWithoutClassInput> | TeacherClassCreateWithoutClassInput[] | TeacherClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutClassInput | TeacherClassCreateOrConnectWithoutClassInput[]
    createMany?: TeacherClassCreateManyClassInputEnvelope
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type ClassUpdateyearGroupsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type ClassUpdatekeyStagesInput = {
    set?: $Enums.KeyStage[]
    push?: $Enums.KeyStage | $Enums.KeyStage[]
  }

  export type EnumClassTypeFieldUpdateOperationsInput = {
    set?: $Enums.ClassType
  }

  export type SchoolUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClassesInput
    upsert?: SchoolUpsertWithoutClassesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutClassesInput, SchoolUpdateWithoutClassesInput>, SchoolUncheckedUpdateWithoutClassesInput>
  }

  export type TeacherClassUpdateManyWithoutClassNestedInput = {
    create?: XOR<TeacherClassCreateWithoutClassInput, TeacherClassUncheckedCreateWithoutClassInput> | TeacherClassCreateWithoutClassInput[] | TeacherClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutClassInput | TeacherClassCreateOrConnectWithoutClassInput[]
    upsert?: TeacherClassUpsertWithWhereUniqueWithoutClassInput | TeacherClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TeacherClassCreateManyClassInputEnvelope
    set?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    disconnect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    delete?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    update?: TeacherClassUpdateWithWhereUniqueWithoutClassInput | TeacherClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TeacherClassUpdateManyWithWhereWithoutClassInput | TeacherClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TeacherClassUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<TeacherClassCreateWithoutClassInput, TeacherClassUncheckedCreateWithoutClassInput> | TeacherClassCreateWithoutClassInput[] | TeacherClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherClassCreateOrConnectWithoutClassInput | TeacherClassCreateOrConnectWithoutClassInput[]
    upsert?: TeacherClassUpsertWithWhereUniqueWithoutClassInput | TeacherClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TeacherClassCreateManyClassInputEnvelope
    set?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    disconnect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    delete?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    connect?: TeacherClassWhereUniqueInput | TeacherClassWhereUniqueInput[]
    update?: TeacherClassUpdateWithWhereUniqueWithoutClassInput | TeacherClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TeacherClassUpdateManyWithWhereWithoutClassInput | TeacherClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput> | StudentCreateWithoutClassInput[] | StudentUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassInput | StudentCreateOrConnectWithoutClassInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassInput | StudentUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentCreateManyClassInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassInput | StudentUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassInput | StudentUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TeacherClassCreatesubjectsInput = {
    set: string[]
  }

  export type SchoolCreateNestedOneWithoutTeacherClassesInput = {
    create?: XOR<SchoolCreateWithoutTeacherClassesInput, SchoolUncheckedCreateWithoutTeacherClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutTeacherClassesInput
    connect?: SchoolWhereUniqueInput
  }

  export type TeacherCreateNestedOneWithoutTeacherClassesInput = {
    create?: XOR<TeacherCreateWithoutTeacherClassesInput, TeacherUncheckedCreateWithoutTeacherClassesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeacherClassesInput
    connect?: TeacherWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutTeacherClassesInput = {
    create?: XOR<ClassCreateWithoutTeacherClassesInput, ClassUncheckedCreateWithoutTeacherClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherClassesInput
    connect?: ClassWhereUniqueInput
  }

  export type EnumClassRoleFieldUpdateOperationsInput = {
    set?: $Enums.ClassRole
  }

  export type TeacherClassUpdatesubjectsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type SchoolUpdateOneRequiredWithoutTeacherClassesNestedInput = {
    create?: XOR<SchoolCreateWithoutTeacherClassesInput, SchoolUncheckedCreateWithoutTeacherClassesInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutTeacherClassesInput
    upsert?: SchoolUpsertWithoutTeacherClassesInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutTeacherClassesInput, SchoolUpdateWithoutTeacherClassesInput>, SchoolUncheckedUpdateWithoutTeacherClassesInput>
  }

  export type TeacherUpdateOneRequiredWithoutTeacherClassesNestedInput = {
    create?: XOR<TeacherCreateWithoutTeacherClassesInput, TeacherUncheckedCreateWithoutTeacherClassesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeacherClassesInput
    upsert?: TeacherUpsertWithoutTeacherClassesInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutTeacherClassesInput, TeacherUpdateWithoutTeacherClassesInput>, TeacherUncheckedUpdateWithoutTeacherClassesInput>
  }

  export type ClassUpdateOneRequiredWithoutTeacherClassesNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherClassesInput, ClassUncheckedCreateWithoutTeacherClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherClassesInput
    upsert?: ClassUpsertWithoutTeacherClassesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutTeacherClassesInput, ClassUpdateWithoutTeacherClassesInput>, ClassUncheckedUpdateWithoutTeacherClassesInput>
  }

  export type ClubCreateageGroupsInput = {
    set: number[]
  }

  export type ClubCreatekeyStagesInput = {
    set: $Enums.KeyStage[]
  }

  export type SchoolCreateNestedOneWithoutClubsInput = {
    create?: XOR<SchoolCreateWithoutClubsInput, SchoolUncheckedCreateWithoutClubsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClubsInput
    connect?: SchoolWhereUniqueInput
  }

  export type HomeworkCompletionCreateNestedManyWithoutClubInput = {
    create?: XOR<HomeworkCompletionCreateWithoutClubInput, HomeworkCompletionUncheckedCreateWithoutClubInput> | HomeworkCompletionCreateWithoutClubInput[] | HomeworkCompletionUncheckedCreateWithoutClubInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutClubInput | HomeworkCompletionCreateOrConnectWithoutClubInput[]
    createMany?: HomeworkCompletionCreateManyClubInputEnvelope
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
  }

  export type HomeworkCompletionUncheckedCreateNestedManyWithoutClubInput = {
    create?: XOR<HomeworkCompletionCreateWithoutClubInput, HomeworkCompletionUncheckedCreateWithoutClubInput> | HomeworkCompletionCreateWithoutClubInput[] | HomeworkCompletionUncheckedCreateWithoutClubInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutClubInput | HomeworkCompletionCreateOrConnectWithoutClubInput[]
    createMany?: HomeworkCompletionCreateManyClubInputEnvelope
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
  }

  export type EnumClubTypeFieldUpdateOperationsInput = {
    set?: $Enums.ClubType
  }

  export type ClubUpdateageGroupsInput = {
    set?: number[]
    push?: number | number[]
  }

  export type ClubUpdatekeyStagesInput = {
    set?: $Enums.KeyStage[]
    push?: $Enums.KeyStage | $Enums.KeyStage[]
  }

  export type EnumClubEvidenceTypeFieldUpdateOperationsInput = {
    set?: $Enums.ClubEvidenceType
  }

  export type SchoolUpdateOneRequiredWithoutClubsNestedInput = {
    create?: XOR<SchoolCreateWithoutClubsInput, SchoolUncheckedCreateWithoutClubsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutClubsInput
    upsert?: SchoolUpsertWithoutClubsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutClubsInput, SchoolUpdateWithoutClubsInput>, SchoolUncheckedUpdateWithoutClubsInput>
  }

  export type HomeworkCompletionUpdateManyWithoutClubNestedInput = {
    create?: XOR<HomeworkCompletionCreateWithoutClubInput, HomeworkCompletionUncheckedCreateWithoutClubInput> | HomeworkCompletionCreateWithoutClubInput[] | HomeworkCompletionUncheckedCreateWithoutClubInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutClubInput | HomeworkCompletionCreateOrConnectWithoutClubInput[]
    upsert?: HomeworkCompletionUpsertWithWhereUniqueWithoutClubInput | HomeworkCompletionUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: HomeworkCompletionCreateManyClubInputEnvelope
    set?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    disconnect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    delete?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    update?: HomeworkCompletionUpdateWithWhereUniqueWithoutClubInput | HomeworkCompletionUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: HomeworkCompletionUpdateManyWithWhereWithoutClubInput | HomeworkCompletionUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
  }

  export type HomeworkCompletionUncheckedUpdateManyWithoutClubNestedInput = {
    create?: XOR<HomeworkCompletionCreateWithoutClubInput, HomeworkCompletionUncheckedCreateWithoutClubInput> | HomeworkCompletionCreateWithoutClubInput[] | HomeworkCompletionUncheckedCreateWithoutClubInput[]
    connectOrCreate?: HomeworkCompletionCreateOrConnectWithoutClubInput | HomeworkCompletionCreateOrConnectWithoutClubInput[]
    upsert?: HomeworkCompletionUpsertWithWhereUniqueWithoutClubInput | HomeworkCompletionUpsertWithWhereUniqueWithoutClubInput[]
    createMany?: HomeworkCompletionCreateManyClubInputEnvelope
    set?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    disconnect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    delete?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    connect?: HomeworkCompletionWhereUniqueInput | HomeworkCompletionWhereUniqueInput[]
    update?: HomeworkCompletionUpdateWithWhereUniqueWithoutClubInput | HomeworkCompletionUpdateWithWhereUniqueWithoutClubInput[]
    updateMany?: HomeworkCompletionUpdateManyWithWhereWithoutClubInput | HomeworkCompletionUpdateManyWithWhereWithoutClubInput[]
    deleteMany?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
  }

  export type SchoolCreateNestedOneWithoutHomeworkCompletionsInput = {
    create?: XOR<SchoolCreateWithoutHomeworkCompletionsInput, SchoolUncheckedCreateWithoutHomeworkCompletionsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutHomeworkCompletionsInput
    connect?: SchoolWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutHomeworkCompletionsInput = {
    create?: XOR<StudentCreateWithoutHomeworkCompletionsInput, StudentUncheckedCreateWithoutHomeworkCompletionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutHomeworkCompletionsInput
    connect?: StudentWhereUniqueInput
  }

  export type ClubCreateNestedOneWithoutHomeworkCompletionsInput = {
    create?: XOR<ClubCreateWithoutHomeworkCompletionsInput, ClubUncheckedCreateWithoutHomeworkCompletionsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutHomeworkCompletionsInput
    connect?: ClubWhereUniqueInput
  }

  export type SchoolUpdateOneRequiredWithoutHomeworkCompletionsNestedInput = {
    create?: XOR<SchoolCreateWithoutHomeworkCompletionsInput, SchoolUncheckedCreateWithoutHomeworkCompletionsInput>
    connectOrCreate?: SchoolCreateOrConnectWithoutHomeworkCompletionsInput
    upsert?: SchoolUpsertWithoutHomeworkCompletionsInput
    connect?: SchoolWhereUniqueInput
    update?: XOR<XOR<SchoolUpdateToOneWithWhereWithoutHomeworkCompletionsInput, SchoolUpdateWithoutHomeworkCompletionsInput>, SchoolUncheckedUpdateWithoutHomeworkCompletionsInput>
  }

  export type StudentUpdateOneRequiredWithoutHomeworkCompletionsNestedInput = {
    create?: XOR<StudentCreateWithoutHomeworkCompletionsInput, StudentUncheckedCreateWithoutHomeworkCompletionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutHomeworkCompletionsInput
    upsert?: StudentUpsertWithoutHomeworkCompletionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutHomeworkCompletionsInput, StudentUpdateWithoutHomeworkCompletionsInput>, StudentUncheckedUpdateWithoutHomeworkCompletionsInput>
  }

  export type ClubUpdateOneWithoutHomeworkCompletionsNestedInput = {
    create?: XOR<ClubCreateWithoutHomeworkCompletionsInput, ClubUncheckedCreateWithoutHomeworkCompletionsInput>
    connectOrCreate?: ClubCreateOrConnectWithoutHomeworkCompletionsInput
    upsert?: ClubUpsertWithoutHomeworkCompletionsInput
    disconnect?: ClubWhereInput | boolean
    delete?: ClubWhereInput | boolean
    connect?: ClubWhereUniqueInput
    update?: XOR<XOR<ClubUpdateToOneWithWhereWithoutHomeworkCompletionsInput, ClubUpdateWithoutHomeworkCompletionsInput>, ClubUncheckedUpdateWithoutHomeworkCompletionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumSchoolTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SchoolType | EnumSchoolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSchoolTypeFilter<$PrismaModel> | $Enums.SchoolType
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumSchoolTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SchoolType | EnumSchoolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SchoolType[] | ListEnumSchoolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSchoolTypeWithAggregatesFilter<$PrismaModel> | $Enums.SchoolType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSchoolTypeFilter<$PrismaModel>
    _max?: NestedEnumSchoolTypeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTeacherTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherType | EnumTeacherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherTypeFilter<$PrismaModel> | $Enums.TeacherType
  }

  export type NestedEnumContractTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeFilter<$PrismaModel> | $Enums.ContractType
  }

  export type NestedEnumTeacherTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeacherType | EnumTeacherTypeFieldRefInput<$PrismaModel>
    in?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeacherType[] | ListEnumTeacherTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumTeacherTypeWithAggregatesFilter<$PrismaModel> | $Enums.TeacherType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeacherTypeFilter<$PrismaModel>
    _max?: NestedEnumTeacherTypeFilter<$PrismaModel>
  }

  export type NestedEnumContractTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContractType | EnumContractTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContractType[] | ListEnumContractTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumContractTypeWithAggregatesFilter<$PrismaModel> | $Enums.ContractType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContractTypeFilter<$PrismaModel>
    _max?: NestedEnumContractTypeFilter<$PrismaModel>
  }

  export type NestedEnumContactMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumContactMethodFilter<$PrismaModel> | $Enums.ContactMethod
  }

  export type NestedEnumContactMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ContactMethod | EnumContactMethodFieldRefInput<$PrismaModel>
    in?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.ContactMethod[] | ListEnumContactMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumContactMethodWithAggregatesFilter<$PrismaModel> | $Enums.ContactMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumContactMethodFilter<$PrismaModel>
    _max?: NestedEnumContactMethodFilter<$PrismaModel>
  }

  export type NestedEnumAdminLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminLevel | EnumAdminLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminLevelFilter<$PrismaModel> | $Enums.AdminLevel
  }

  export type NestedEnumAdminLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AdminLevel | EnumAdminLevelFieldRefInput<$PrismaModel>
    in?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.AdminLevel[] | ListEnumAdminLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumAdminLevelWithAggregatesFilter<$PrismaModel> | $Enums.AdminLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAdminLevelFilter<$PrismaModel>
    _max?: NestedEnumAdminLevelFilter<$PrismaModel>
  }

  export type NestedEnumParentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ParentType | EnumParentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParentTypeFilter<$PrismaModel> | $Enums.ParentType
  }

  export type NestedEnumParentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ParentType | EnumParentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ParentType[] | ListEnumParentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumParentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ParentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumParentTypeFilter<$PrismaModel>
    _max?: NestedEnumParentTypeFilter<$PrismaModel>
  }

  export type NestedEnumRoleScopeFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeFilter<$PrismaModel> | $Enums.RoleScope
  }

  export type NestedEnumRoleScopeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RoleScope | EnumRoleScopeFieldRefInput<$PrismaModel>
    in?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    notIn?: $Enums.RoleScope[] | ListEnumRoleScopeFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleScopeWithAggregatesFilter<$PrismaModel> | $Enums.RoleScope
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleScopeFilter<$PrismaModel>
    _max?: NestedEnumRoleScopeFilter<$PrismaModel>
  }

  export type NestedEnumPermissionCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionCategory | EnumPermissionCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionCategoryFilter<$PrismaModel> | $Enums.PermissionCategory
  }

  export type NestedEnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type NestedEnumPermissionCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PermissionCategory | EnumPermissionCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.PermissionCategory[] | ListEnumPermissionCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumPermissionCategoryWithAggregatesFilter<$PrismaModel> | $Enums.PermissionCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPermissionCategoryFilter<$PrismaModel>
    _max?: NestedEnumPermissionCategoryFilter<$PrismaModel>
  }

  export type NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type NestedEnumClassTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassType | EnumClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClassTypeFilter<$PrismaModel> | $Enums.ClassType
  }

  export type NestedEnumClassTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassType | EnumClassTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassType[] | ListEnumClassTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClassTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClassType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassTypeFilter<$PrismaModel>
    _max?: NestedEnumClassTypeFilter<$PrismaModel>
  }

  export type NestedEnumClassRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassRole | EnumClassRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClassRoleFilter<$PrismaModel> | $Enums.ClassRole
  }

  export type NestedEnumClassRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClassRole | EnumClassRoleFieldRefInput<$PrismaModel>
    in?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClassRole[] | ListEnumClassRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumClassRoleWithAggregatesFilter<$PrismaModel> | $Enums.ClassRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassRoleFilter<$PrismaModel>
    _max?: NestedEnumClassRoleFilter<$PrismaModel>
  }

  export type NestedEnumClubTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubType | EnumClubTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeFilter<$PrismaModel> | $Enums.ClubType
  }

  export type NestedEnumClubEvidenceTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubEvidenceType | EnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubEvidenceTypeFilter<$PrismaModel> | $Enums.ClubEvidenceType
  }

  export type NestedEnumClubTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubType | EnumClubTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubType[] | ListEnumClubTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClubType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubTypeFilter<$PrismaModel>
    _max?: NestedEnumClubTypeFilter<$PrismaModel>
  }

  export type NestedEnumClubEvidenceTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ClubEvidenceType | EnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ClubEvidenceType[] | ListEnumClubEvidenceTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumClubEvidenceTypeWithAggregatesFilter<$PrismaModel> | $Enums.ClubEvidenceType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClubEvidenceTypeFilter<$PrismaModel>
    _max?: NestedEnumClubEvidenceTypeFilter<$PrismaModel>
  }

  export type UserCreateWithoutSchoolInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSchoolInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSchoolInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSchoolInput, UserUncheckedCreateWithoutSchoolInput>
  }

  export type UserCreateManySchoolInputEnvelope = {
    data: UserCreateManySchoolInput | UserCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutSchoolInput = {
    id?: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacherClasses?: TeacherClassCreateNestedManyWithoutTeacherInput
    user: UserCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutSchoolInput = {
    id?: string
    userId: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutSchoolInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput>
  }

  export type TeacherCreateManySchoolInputEnvelope = {
    data: TeacherCreateManySchoolInput | TeacherCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutSchoolInput = {
    id?: string
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutStudentInput
    user?: UserCreateNestedOneWithoutStudentInput
    class: ClassCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutSchoolInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    classId: string
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentCreateManySchoolInputEnvelope = {
    data: StudentCreateManySchoolInput | StudentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ParentCreateWithoutSchoolInput = {
    id?: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutParentInput
    user: UserCreateNestedOneWithoutParentInput
  }

  export type ParentUncheckedCreateWithoutSchoolInput = {
    id?: string
    userId: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentCreateOrConnectWithoutSchoolInput = {
    where: ParentWhereUniqueInput
    create: XOR<ParentCreateWithoutSchoolInput, ParentUncheckedCreateWithoutSchoolInput>
  }

  export type ParentCreateManySchoolInputEnvelope = {
    data: ParentCreateManySchoolInput | ParentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type SchoolAdminCreateWithoutSchoolInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSchoolAdminInput
  }

  export type SchoolAdminUncheckedCreateWithoutSchoolInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAdminCreateOrConnectWithoutSchoolInput = {
    where: SchoolAdminWhereUniqueInput
    create: XOR<SchoolAdminCreateWithoutSchoolInput, SchoolAdminUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolAdminCreateManySchoolInputEnvelope = {
    data: SchoolAdminCreateManySchoolInput | SchoolAdminCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ClassCreateWithoutSchoolInput = {
    id?: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    teacherClasses?: TeacherClassCreateNestedManyWithoutClassInput
    students?: StudentCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutSchoolInput = {
    id?: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutClassInput
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutSchoolInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput>
  }

  export type ClassCreateManySchoolInputEnvelope = {
    data: ClassCreateManySchoolInput | ClassCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ClubCreateWithoutSchoolInput = {
    id?: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutClubInput
  }

  export type ClubUncheckedCreateWithoutSchoolInput = {
    id?: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutClubInput
  }

  export type ClubCreateOrConnectWithoutSchoolInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutSchoolInput, ClubUncheckedCreateWithoutSchoolInput>
  }

  export type ClubCreateManySchoolInputEnvelope = {
    data: ClubCreateManySchoolInput | ClubCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type ParentStudentCreateWithoutSchoolInput = {
    id?: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    parent: ParentCreateNestedOneWithoutParentStudentsInput
    student: StudentCreateNestedOneWithoutParentStudentsInput
  }

  export type ParentStudentUncheckedCreateWithoutSchoolInput = {
    id?: string
    parentId: string
    studentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentCreateOrConnectWithoutSchoolInput = {
    where: ParentStudentWhereUniqueInput
    create: XOR<ParentStudentCreateWithoutSchoolInput, ParentStudentUncheckedCreateWithoutSchoolInput>
  }

  export type ParentStudentCreateManySchoolInputEnvelope = {
    data: ParentStudentCreateManySchoolInput | ParentStudentCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type TeacherClassCreateWithoutSchoolInput = {
    id?: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher: TeacherCreateNestedOneWithoutTeacherClassesInput
    class: ClassCreateNestedOneWithoutTeacherClassesInput
  }

  export type TeacherClassUncheckedCreateWithoutSchoolInput = {
    id?: string
    teacherId: string
    classId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassCreateOrConnectWithoutSchoolInput = {
    where: TeacherClassWhereUniqueInput
    create: XOR<TeacherClassCreateWithoutSchoolInput, TeacherClassUncheckedCreateWithoutSchoolInput>
  }

  export type TeacherClassCreateManySchoolInputEnvelope = {
    data: TeacherClassCreateManySchoolInput | TeacherClassCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutSchoolInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutSchoolInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutSchoolInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutSchoolInput, RoleUncheckedCreateWithoutSchoolInput>
  }

  export type RoleCreateManySchoolInputEnvelope = {
    data: RoleCreateManySchoolInput | RoleCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutSchoolInput = {
    id?: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUserRolesInput
    role: RoleCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateWithoutSchoolInput = {
    id?: string
    userId: string
    roleId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateOrConnectWithoutSchoolInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutSchoolInput, UserRoleUncheckedCreateWithoutSchoolInput>
  }

  export type UserRoleCreateManySchoolInputEnvelope = {
    data: UserRoleCreateManySchoolInput | UserRoleCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type HomeworkCompletionCreateWithoutSchoolInput = {
    id?: string
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    student: StudentCreateNestedOneWithoutHomeworkCompletionsInput
    club?: ClubCreateNestedOneWithoutHomeworkCompletionsInput
  }

  export type HomeworkCompletionUncheckedCreateWithoutSchoolInput = {
    id?: string
    studentId: string
    clubId?: string | null
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionCreateOrConnectWithoutSchoolInput = {
    where: HomeworkCompletionWhereUniqueInput
    create: XOR<HomeworkCompletionCreateWithoutSchoolInput, HomeworkCompletionUncheckedCreateWithoutSchoolInput>
  }

  export type HomeworkCompletionCreateManySchoolInputEnvelope = {
    data: HomeworkCompletionCreateManySchoolInput | HomeworkCompletionCreateManySchoolInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutSchoolInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutSchoolInput, UserUncheckedUpdateWithoutSchoolInput>
    create: XOR<UserCreateWithoutSchoolInput, UserUncheckedCreateWithoutSchoolInput>
  }

  export type UserUpdateWithWhereUniqueWithoutSchoolInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutSchoolInput, UserUncheckedUpdateWithoutSchoolInput>
  }

  export type UserUpdateManyWithWhereWithoutSchoolInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutSchoolInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    schoolId?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    passwordHash?: StringNullableFilter<"User"> | string | null
    isActive?: BoolFilter<"User"> | boolean
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    loginAttempts?: IntFilter<"User"> | number
    lockedUntil?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type TeacherUpsertWithWhereUniqueWithoutSchoolInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutSchoolInput, TeacherUncheckedUpdateWithoutSchoolInput>
    create: XOR<TeacherCreateWithoutSchoolInput, TeacherUncheckedCreateWithoutSchoolInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutSchoolInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutSchoolInput, TeacherUncheckedUpdateWithoutSchoolInput>
  }

  export type TeacherUpdateManyWithWhereWithoutSchoolInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutSchoolInput>
  }

  export type TeacherScalarWhereInput = {
    AND?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    OR?: TeacherScalarWhereInput[]
    NOT?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    id?: StringFilter<"Teacher"> | string
    schoolId?: StringFilter<"Teacher"> | string
    userId?: StringFilter<"Teacher"> | string
    employeeId?: StringNullableFilter<"Teacher"> | string | null
    title?: StringFilter<"Teacher"> | string
    firstName?: StringFilter<"Teacher"> | string
    lastName?: StringFilter<"Teacher"> | string
    displayName?: StringNullableFilter<"Teacher"> | string | null
    teacherType?: EnumTeacherTypeFilter<"Teacher"> | $Enums.TeacherType
    isHeadTeacher?: BoolFilter<"Teacher"> | boolean
    isSenCo?: BoolFilter<"Teacher"> | boolean
    isDSL?: BoolFilter<"Teacher"> | boolean
    isDeputyHead?: BoolFilter<"Teacher"> | boolean
    subjects?: StringNullableListFilter<"Teacher">
    yearGroups?: IntNullableListFilter<"Teacher">
    qualifications?: JsonNullableFilter<"Teacher">
    startDate?: DateTimeFilter<"Teacher"> | Date | string
    endDate?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    contractType?: EnumContractTypeFilter<"Teacher"> | $Enums.ContractType
    schoolEmail?: StringNullableFilter<"Teacher"> | string | null
    phoneExtension?: StringNullableFilter<"Teacher"> | string | null
    dbsCheckDate?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    dbsCheckNumber?: StringNullableFilter<"Teacher"> | string | null
    safeguardingTraining?: DateTimeNullableFilter<"Teacher"> | Date | string | null
    createdAt?: DateTimeFilter<"Teacher"> | Date | string
    updatedAt?: DateTimeFilter<"Teacher"> | Date | string
  }

  export type StudentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
    create: XOR<StudentCreateWithoutSchoolInput, StudentUncheckedCreateWithoutSchoolInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutSchoolInput, StudentUncheckedUpdateWithoutSchoolInput>
  }

  export type StudentUpdateManyWithWhereWithoutSchoolInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    id?: StringFilter<"Student"> | string
    schoolId?: StringFilter<"Student"> | string
    userId?: StringNullableFilter<"Student"> | string | null
    firstName?: StringFilter<"Student"> | string
    lastName?: StringFilter<"Student"> | string
    preferredName?: StringNullableFilter<"Student"> | string | null
    dateOfBirth?: DateTimeFilter<"Student"> | Date | string
    pupilId?: StringFilter<"Student"> | string
    admissionNumber?: StringNullableFilter<"Student"> | string | null
    yearGroup?: IntFilter<"Student"> | number
    classId?: StringFilter<"Student"> | string
    admissionDate?: DateTimeFilter<"Student"> | Date | string
    leavingDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    uln?: StringNullableFilter<"Student"> | string | null
    upn?: StringNullableFilter<"Student"> | string | null
    sen?: BoolFilter<"Student"> | boolean
    senCategory?: StringNullableFilter<"Student"> | string | null
    senSupport?: JsonNullableFilter<"Student">
    pupilPremium?: BoolFilter<"Student"> | boolean
    freeschoolMeals?: BoolFilter<"Student"> | boolean
    englishAsAdditional?: BoolFilter<"Student"> | boolean
    medicalConditions?: JsonNullableFilter<"Student">
    dietaryRequirements?: JsonNullableFilter<"Student">
    houseGroup?: StringNullableFilter<"Student"> | string | null
    dataRetentionUntil?: DateTimeFilter<"Student"> | Date | string
    consentGiven?: BoolFilter<"Student"> | boolean
    consentGivenBy?: StringNullableFilter<"Student"> | string | null
    consentDate?: DateTimeNullableFilter<"Student"> | Date | string | null
    consentWithdrawn?: BoolFilter<"Student"> | boolean
    createdAt?: DateTimeFilter<"Student"> | Date | string
    updatedAt?: DateTimeFilter<"Student"> | Date | string
  }

  export type ParentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ParentWhereUniqueInput
    update: XOR<ParentUpdateWithoutSchoolInput, ParentUncheckedUpdateWithoutSchoolInput>
    create: XOR<ParentCreateWithoutSchoolInput, ParentUncheckedCreateWithoutSchoolInput>
  }

  export type ParentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ParentWhereUniqueInput
    data: XOR<ParentUpdateWithoutSchoolInput, ParentUncheckedUpdateWithoutSchoolInput>
  }

  export type ParentUpdateManyWithWhereWithoutSchoolInput = {
    where: ParentScalarWhereInput
    data: XOR<ParentUpdateManyMutationInput, ParentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ParentScalarWhereInput = {
    AND?: ParentScalarWhereInput | ParentScalarWhereInput[]
    OR?: ParentScalarWhereInput[]
    NOT?: ParentScalarWhereInput | ParentScalarWhereInput[]
    id?: StringFilter<"Parent"> | string
    schoolId?: StringFilter<"Parent"> | string
    userId?: StringFilter<"Parent"> | string
    title?: StringNullableFilter<"Parent"> | string | null
    firstName?: StringFilter<"Parent"> | string
    lastName?: StringFilter<"Parent"> | string
    email?: StringFilter<"Parent"> | string
    alternativeEmail?: StringNullableFilter<"Parent"> | string | null
    mobilePhone?: StringNullableFilter<"Parent"> | string | null
    homePhone?: StringNullableFilter<"Parent"> | string | null
    workPhone?: StringNullableFilter<"Parent"> | string | null
    addressLine1?: StringNullableFilter<"Parent"> | string | null
    addressLine2?: StringNullableFilter<"Parent"> | string | null
    town?: StringNullableFilter<"Parent"> | string | null
    county?: StringNullableFilter<"Parent"> | string | null
    postcode?: StringNullableFilter<"Parent"> | string | null
    isEmergencyContact?: BoolFilter<"Parent"> | boolean
    priority?: IntNullableFilter<"Parent"> | number | null
    preferredContact?: EnumContactMethodFilter<"Parent"> | $Enums.ContactMethod
    canReceiveSMS?: BoolFilter<"Parent"> | boolean
    canReceiveEmail?: BoolFilter<"Parent"> | boolean
    canReceivePhoneCalls?: BoolFilter<"Parent"> | boolean
    canCollectChild?: BoolFilter<"Parent"> | boolean
    canConsentToTrips?: BoolFilter<"Parent"> | boolean
    canAccessOnlineInfo?: BoolFilter<"Parent"> | boolean
    createdAt?: DateTimeFilter<"Parent"> | Date | string
    updatedAt?: DateTimeFilter<"Parent"> | Date | string
  }

  export type SchoolAdminUpsertWithWhereUniqueWithoutSchoolInput = {
    where: SchoolAdminWhereUniqueInput
    update: XOR<SchoolAdminUpdateWithoutSchoolInput, SchoolAdminUncheckedUpdateWithoutSchoolInput>
    create: XOR<SchoolAdminCreateWithoutSchoolInput, SchoolAdminUncheckedCreateWithoutSchoolInput>
  }

  export type SchoolAdminUpdateWithWhereUniqueWithoutSchoolInput = {
    where: SchoolAdminWhereUniqueInput
    data: XOR<SchoolAdminUpdateWithoutSchoolInput, SchoolAdminUncheckedUpdateWithoutSchoolInput>
  }

  export type SchoolAdminUpdateManyWithWhereWithoutSchoolInput = {
    where: SchoolAdminScalarWhereInput
    data: XOR<SchoolAdminUpdateManyMutationInput, SchoolAdminUncheckedUpdateManyWithoutSchoolInput>
  }

  export type SchoolAdminScalarWhereInput = {
    AND?: SchoolAdminScalarWhereInput | SchoolAdminScalarWhereInput[]
    OR?: SchoolAdminScalarWhereInput[]
    NOT?: SchoolAdminScalarWhereInput | SchoolAdminScalarWhereInput[]
    id?: StringFilter<"SchoolAdmin"> | string
    schoolId?: StringFilter<"SchoolAdmin"> | string
    userId?: StringFilter<"SchoolAdmin"> | string
    firstName?: StringFilter<"SchoolAdmin"> | string
    lastName?: StringFilter<"SchoolAdmin"> | string
    jobTitle?: StringFilter<"SchoolAdmin"> | string
    adminLevel?: EnumAdminLevelFilter<"SchoolAdmin"> | $Enums.AdminLevel
    canManageUsers?: BoolFilter<"SchoolAdmin"> | boolean
    canManageClasses?: BoolFilter<"SchoolAdmin"> | boolean
    canManageClubs?: BoolFilter<"SchoolAdmin"> | boolean
    canViewAnalytics?: BoolFilter<"SchoolAdmin"> | boolean
    canManageSettings?: BoolFilter<"SchoolAdmin"> | boolean
    canExportData?: BoolFilter<"SchoolAdmin"> | boolean
    canAccessAllClasses?: BoolFilter<"SchoolAdmin"> | boolean
    canViewAllStudents?: BoolFilter<"SchoolAdmin"> | boolean
    canModifyHomework?: BoolFilter<"SchoolAdmin"> | boolean
    createdAt?: DateTimeFilter<"SchoolAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"SchoolAdmin"> | Date | string
  }

  export type ClassUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutSchoolInput, ClassUncheckedUpdateWithoutSchoolInput>
    create: XOR<ClassCreateWithoutSchoolInput, ClassUncheckedCreateWithoutSchoolInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutSchoolInput, ClassUncheckedUpdateWithoutSchoolInput>
  }

  export type ClassUpdateManyWithWhereWithoutSchoolInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: StringFilter<"Class"> | string
    schoolId?: StringFilter<"Class"> | string
    name?: StringFilter<"Class"> | string
    displayName?: StringNullableFilter<"Class"> | string | null
    yearGroups?: IntNullableListFilter<"Class">
    keyStages?: EnumKeyStageNullableListFilter<"Class">
    classType?: EnumClassTypeFilter<"Class"> | $Enums.ClassType
    subject?: StringNullableFilter<"Class"> | string | null
    setLevel?: StringNullableFilter<"Class"> | string | null
    academicYear?: StringFilter<"Class"> | string
    houseGroup?: StringNullableFilter<"Class"> | string | null
    houseColor?: StringNullableFilter<"Class"> | string | null
    capacity?: IntNullableFilter<"Class"> | number | null
    isActive?: BoolFilter<"Class"> | boolean
    classroom?: StringNullableFilter<"Class"> | string | null
    clubsEnabled?: BoolFilter<"Class"> | boolean
    leaderboardEnabled?: BoolFilter<"Class"> | boolean
  }

  export type ClubUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ClubWhereUniqueInput
    update: XOR<ClubUpdateWithoutSchoolInput, ClubUncheckedUpdateWithoutSchoolInput>
    create: XOR<ClubCreateWithoutSchoolInput, ClubUncheckedCreateWithoutSchoolInput>
  }

  export type ClubUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ClubWhereUniqueInput
    data: XOR<ClubUpdateWithoutSchoolInput, ClubUncheckedUpdateWithoutSchoolInput>
  }

  export type ClubUpdateManyWithWhereWithoutSchoolInput = {
    where: ClubScalarWhereInput
    data: XOR<ClubUpdateManyMutationInput, ClubUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ClubScalarWhereInput = {
    AND?: ClubScalarWhereInput | ClubScalarWhereInput[]
    OR?: ClubScalarWhereInput[]
    NOT?: ClubScalarWhereInput | ClubScalarWhereInput[]
    id?: StringFilter<"Club"> | string
    schoolId?: StringFilter<"Club"> | string
    name?: StringFilter<"Club"> | string
    description?: StringNullableFilter<"Club"> | string | null
    clubType?: EnumClubTypeFilter<"Club"> | $Enums.ClubType
    subject?: StringFilter<"Club"> | string
    isActive?: BoolFilter<"Club"> | boolean
    ageGroups?: IntNullableListFilter<"Club">
    keyStages?: EnumKeyStageNullableListFilter<"Club">
    hasLevels?: BoolFilter<"Club"> | boolean
    levelNaming?: StringNullableFilter<"Club"> | string | null
    customLevels?: BoolFilter<"Club"> | boolean
    evidenceType?: EnumClubEvidenceTypeFilter<"Club"> | $Enums.ClubEvidenceType
    logbookRequired?: BoolFilter<"Club"> | boolean
    parentInvolvement?: BoolFilter<"Club"> | boolean
    maxBuddyMembers?: IntFilter<"Club"> | number
    buddyGroupsEnabled?: BoolFilter<"Club"> | boolean
    xpPerCompletion?: IntFilter<"Club"> | number
    streakEnabled?: BoolFilter<"Club"> | boolean
    iconUrl?: StringNullableFilter<"Club"> | string | null
    color?: StringFilter<"Club"> | string
    createdBy?: StringFilter<"Club"> | string
    createdAt?: DateTimeFilter<"Club"> | Date | string
    updatedAt?: DateTimeFilter<"Club"> | Date | string
  }

  export type ParentStudentUpsertWithWhereUniqueWithoutSchoolInput = {
    where: ParentStudentWhereUniqueInput
    update: XOR<ParentStudentUpdateWithoutSchoolInput, ParentStudentUncheckedUpdateWithoutSchoolInput>
    create: XOR<ParentStudentCreateWithoutSchoolInput, ParentStudentUncheckedCreateWithoutSchoolInput>
  }

  export type ParentStudentUpdateWithWhereUniqueWithoutSchoolInput = {
    where: ParentStudentWhereUniqueInput
    data: XOR<ParentStudentUpdateWithoutSchoolInput, ParentStudentUncheckedUpdateWithoutSchoolInput>
  }

  export type ParentStudentUpdateManyWithWhereWithoutSchoolInput = {
    where: ParentStudentScalarWhereInput
    data: XOR<ParentStudentUpdateManyMutationInput, ParentStudentUncheckedUpdateManyWithoutSchoolInput>
  }

  export type ParentStudentScalarWhereInput = {
    AND?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
    OR?: ParentStudentScalarWhereInput[]
    NOT?: ParentStudentScalarWhereInput | ParentStudentScalarWhereInput[]
    id?: StringFilter<"ParentStudent"> | string
    schoolId?: StringFilter<"ParentStudent"> | string
    parentId?: StringFilter<"ParentStudent"> | string
    studentId?: StringFilter<"ParentStudent"> | string
    relationshipType?: EnumParentTypeFilter<"ParentStudent"> | $Enums.ParentType
    isPrimaryContact?: BoolFilter<"ParentStudent"> | boolean
    isEmergencyContact?: BoolFilter<"ParentStudent"> | boolean
    hasParentalResponsibility?: BoolFilter<"ParentStudent"> | boolean
    canGiveConsent?: BoolFilter<"ParentStudent"> | boolean
    canCollectChild?: BoolFilter<"ParentStudent"> | boolean
    canAccessRecords?: BoolFilter<"ParentStudent"> | boolean
    receivesReports?: BoolFilter<"ParentStudent"> | boolean
    receivesNotifications?: BoolFilter<"ParentStudent"> | boolean
    canContactTeachers?: BoolFilter<"ParentStudent"> | boolean
    custodyArrangement?: StringNullableFilter<"ParentStudent"> | string | null
    restrictedAccess?: BoolFilter<"ParentStudent"> | boolean
    accessNotes?: StringNullableFilter<"ParentStudent"> | string | null
    createdAt?: DateTimeFilter<"ParentStudent"> | Date | string
    updatedAt?: DateTimeFilter<"ParentStudent"> | Date | string
  }

  export type TeacherClassUpsertWithWhereUniqueWithoutSchoolInput = {
    where: TeacherClassWhereUniqueInput
    update: XOR<TeacherClassUpdateWithoutSchoolInput, TeacherClassUncheckedUpdateWithoutSchoolInput>
    create: XOR<TeacherClassCreateWithoutSchoolInput, TeacherClassUncheckedCreateWithoutSchoolInput>
  }

  export type TeacherClassUpdateWithWhereUniqueWithoutSchoolInput = {
    where: TeacherClassWhereUniqueInput
    data: XOR<TeacherClassUpdateWithoutSchoolInput, TeacherClassUncheckedUpdateWithoutSchoolInput>
  }

  export type TeacherClassUpdateManyWithWhereWithoutSchoolInput = {
    where: TeacherClassScalarWhereInput
    data: XOR<TeacherClassUpdateManyMutationInput, TeacherClassUncheckedUpdateManyWithoutSchoolInput>
  }

  export type TeacherClassScalarWhereInput = {
    AND?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
    OR?: TeacherClassScalarWhereInput[]
    NOT?: TeacherClassScalarWhereInput | TeacherClassScalarWhereInput[]
    id?: StringFilter<"TeacherClass"> | string
    schoolId?: StringFilter<"TeacherClass"> | string
    teacherId?: StringFilter<"TeacherClass"> | string
    classId?: StringFilter<"TeacherClass"> | string
    role?: EnumClassRoleFilter<"TeacherClass"> | $Enums.ClassRole
    isPrimaryTeacher?: BoolFilter<"TeacherClass"> | boolean
    subjects?: StringNullableListFilter<"TeacherClass">
    timeAllocation?: IntNullableFilter<"TeacherClass"> | number | null
    timetableSlots?: JsonNullableFilter<"TeacherClass">
    canMarkHomework?: BoolFilter<"TeacherClass"> | boolean
    canAssignClubs?: BoolFilter<"TeacherClass"> | boolean
    canViewProgress?: BoolFilter<"TeacherClass"> | boolean
    canContactParents?: BoolFilter<"TeacherClass"> | boolean
    startDate?: DateTimeFilter<"TeacherClass"> | Date | string
    endDate?: DateTimeNullableFilter<"TeacherClass"> | Date | string | null
    isActive?: BoolFilter<"TeacherClass"> | boolean
    createdAt?: DateTimeFilter<"TeacherClass"> | Date | string
    updatedAt?: DateTimeFilter<"TeacherClass"> | Date | string
  }

  export type RoleUpsertWithWhereUniqueWithoutSchoolInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutSchoolInput, RoleUncheckedUpdateWithoutSchoolInput>
    create: XOR<RoleCreateWithoutSchoolInput, RoleUncheckedCreateWithoutSchoolInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutSchoolInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutSchoolInput, RoleUncheckedUpdateWithoutSchoolInput>
  }

  export type RoleUpdateManyWithWhereWithoutSchoolInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutSchoolInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: StringFilter<"Role"> | string
    schoolId?: StringNullableFilter<"Role"> | string | null
    name?: StringFilter<"Role"> | string
    description?: StringNullableFilter<"Role"> | string | null
    isDefault?: BoolFilter<"Role"> | boolean
    isCustom?: BoolFilter<"Role"> | boolean
    isActive?: BoolFilter<"Role"> | boolean
    priority?: IntFilter<"Role"> | number
    scope?: EnumRoleScopeFilter<"Role"> | $Enums.RoleScope
    applicableUserTypes?: EnumUserTypeNullableListFilter<"Role">
    createdBy?: StringNullableFilter<"Role"> | string | null
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
  }

  export type UserRoleUpsertWithWhereUniqueWithoutSchoolInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutSchoolInput, UserRoleUncheckedUpdateWithoutSchoolInput>
    create: XOR<UserRoleCreateWithoutSchoolInput, UserRoleUncheckedCreateWithoutSchoolInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutSchoolInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutSchoolInput, UserRoleUncheckedUpdateWithoutSchoolInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutSchoolInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutSchoolInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    id?: StringFilter<"UserRole"> | string
    schoolId?: StringFilter<"UserRole"> | string
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    classIds?: StringNullableListFilter<"UserRole">
    yearGroups?: IntNullableListFilter<"UserRole">
    subjects?: StringNullableListFilter<"UserRole">
    studentIds?: StringNullableListFilter<"UserRole">
    assignedAt?: DateTimeFilter<"UserRole"> | Date | string
    expiresAt?: DateTimeNullableFilter<"UserRole"> | Date | string | null
    isActive?: BoolFilter<"UserRole"> | boolean
    assignedBy?: StringNullableFilter<"UserRole"> | string | null
    assignmentReason?: StringNullableFilter<"UserRole"> | string | null
    additionalPermissions?: JsonNullableFilter<"UserRole">
    restrictedPermissions?: JsonNullableFilter<"UserRole">
    createdAt?: DateTimeFilter<"UserRole"> | Date | string
    updatedAt?: DateTimeFilter<"UserRole"> | Date | string
  }

  export type HomeworkCompletionUpsertWithWhereUniqueWithoutSchoolInput = {
    where: HomeworkCompletionWhereUniqueInput
    update: XOR<HomeworkCompletionUpdateWithoutSchoolInput, HomeworkCompletionUncheckedUpdateWithoutSchoolInput>
    create: XOR<HomeworkCompletionCreateWithoutSchoolInput, HomeworkCompletionUncheckedCreateWithoutSchoolInput>
  }

  export type HomeworkCompletionUpdateWithWhereUniqueWithoutSchoolInput = {
    where: HomeworkCompletionWhereUniqueInput
    data: XOR<HomeworkCompletionUpdateWithoutSchoolInput, HomeworkCompletionUncheckedUpdateWithoutSchoolInput>
  }

  export type HomeworkCompletionUpdateManyWithWhereWithoutSchoolInput = {
    where: HomeworkCompletionScalarWhereInput
    data: XOR<HomeworkCompletionUpdateManyMutationInput, HomeworkCompletionUncheckedUpdateManyWithoutSchoolInput>
  }

  export type HomeworkCompletionScalarWhereInput = {
    AND?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
    OR?: HomeworkCompletionScalarWhereInput[]
    NOT?: HomeworkCompletionScalarWhereInput | HomeworkCompletionScalarWhereInput[]
    id?: StringFilter<"HomeworkCompletion"> | string
    schoolId?: StringFilter<"HomeworkCompletion"> | string
    studentId?: StringFilter<"HomeworkCompletion"> | string
    clubId?: StringNullableFilter<"HomeworkCompletion"> | string | null
    completionDate?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    evidenceType?: EnumClubEvidenceTypeFilter<"HomeworkCompletion"> | $Enums.ClubEvidenceType
    evidenceUrl?: StringNullableFilter<"HomeworkCompletion"> | string | null
    notes?: StringNullableFilter<"HomeworkCompletion"> | string | null
    parentNotes?: StringNullableFilter<"HomeworkCompletion"> | string | null
    timeSpentMinutes?: IntNullableFilter<"HomeworkCompletion"> | number | null
    wasLate?: BoolFilter<"HomeworkCompletion"> | boolean
    verifiedBy?: StringNullableFilter<"HomeworkCompletion"> | string | null
    verifiedAt?: DateTimeNullableFilter<"HomeworkCompletion"> | Date | string | null
    isVerified?: BoolFilter<"HomeworkCompletion"> | boolean
    createdAt?: DateTimeFilter<"HomeworkCompletion"> | Date | string
    updatedAt?: DateTimeFilter<"HomeworkCompletion"> | Date | string
  }

  export type TeacherCreateWithoutUserInput = {
    id?: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacherClasses?: TeacherClassCreateNestedManyWithoutTeacherInput
    school: SchoolCreateNestedOneWithoutTeachersInput
  }

  export type TeacherUncheckedCreateWithoutUserInput = {
    id?: string
    schoolId: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutUserInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
  }

  export type StudentCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutStudentInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    class: ClassCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    id?: string
    schoolId: string
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    classId: string
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type ParentCreateWithoutUserInput = {
    id?: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutParentInput
    school: SchoolCreateNestedOneWithoutParentsInput
  }

  export type ParentUncheckedCreateWithoutUserInput = {
    id?: string
    schoolId: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ParentCreateOrConnectWithoutUserInput = {
    where: ParentWhereUniqueInput
    create: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
  }

  export type SchoolAdminCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutSchoolAdminsInput
  }

  export type SchoolAdminUncheckedCreateWithoutUserInput = {
    id?: string
    schoolId: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAdminCreateOrConnectWithoutUserInput = {
    where: SchoolAdminWhereUniqueInput
    create: XOR<SchoolAdminCreateWithoutUserInput, SchoolAdminUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateWithoutUserInput = {
    id?: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutUserRolesInput
    role: RoleCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    id?: string
    schoolId: string
    roleId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SchoolCreateWithoutUsersInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutUsersInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
  }

  export type TeacherUpsertWithoutUserInput = {
    update: XOR<TeacherUpdateWithoutUserInput, TeacherUncheckedUpdateWithoutUserInput>
    create: XOR<TeacherCreateWithoutUserInput, TeacherUncheckedCreateWithoutUserInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutUserInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutUserInput, TeacherUncheckedUpdateWithoutUserInput>
  }

  export type TeacherUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacherClasses?: TeacherClassUpdateManyWithoutTeacherNestedInput
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type TeacherUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type StudentUpsertWithoutUserInput = {
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutUserInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutStudentNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    classId?: StringFieldUpdateOperationsInput | string
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ParentUpsertWithoutUserInput = {
    update: XOR<ParentUpdateWithoutUserInput, ParentUncheckedUpdateWithoutUserInput>
    create: XOR<ParentCreateWithoutUserInput, ParentUncheckedCreateWithoutUserInput>
    where?: ParentWhereInput
  }

  export type ParentUpdateToOneWithWhereWithoutUserInput = {
    where?: ParentWhereInput
    data: XOR<ParentUpdateWithoutUserInput, ParentUncheckedUpdateWithoutUserInput>
  }

  export type ParentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutParentNestedInput
    school?: SchoolUpdateOneRequiredWithoutParentsNestedInput
  }

  export type ParentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type SchoolAdminUpsertWithoutUserInput = {
    update: XOR<SchoolAdminUpdateWithoutUserInput, SchoolAdminUncheckedUpdateWithoutUserInput>
    create: XOR<SchoolAdminCreateWithoutUserInput, SchoolAdminUncheckedCreateWithoutUserInput>
    where?: SchoolAdminWhereInput
  }

  export type SchoolAdminUpdateToOneWithWhereWithoutUserInput = {
    where?: SchoolAdminWhereInput
    data: XOR<SchoolAdminUpdateWithoutUserInput, SchoolAdminUncheckedUpdateWithoutUserInput>
  }

  export type SchoolAdminUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutSchoolAdminsNestedInput
  }

  export type SchoolAdminUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type SchoolUpsertWithoutUsersInput = {
    update: XOR<SchoolUpdateWithoutUsersInput, SchoolUncheckedUpdateWithoutUsersInput>
    create: XOR<SchoolCreateWithoutUsersInput, SchoolUncheckedCreateWithoutUsersInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutUsersInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutUsersInput, SchoolUncheckedUpdateWithoutUsersInput>
  }

  export type SchoolUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TeacherClassCreateWithoutTeacherInput = {
    id?: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeacherClassesInput
    class: ClassCreateNestedOneWithoutTeacherClassesInput
  }

  export type TeacherClassUncheckedCreateWithoutTeacherInput = {
    id?: string
    schoolId: string
    classId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassCreateOrConnectWithoutTeacherInput = {
    where: TeacherClassWhereUniqueInput
    create: XOR<TeacherClassCreateWithoutTeacherInput, TeacherClassUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherClassCreateManyTeacherInputEnvelope = {
    data: TeacherClassCreateManyTeacherInput | TeacherClassCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type SchoolCreateWithoutTeachersInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutTeachersInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutTeachersInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
  }

  export type UserCreateWithoutTeacherInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student?: StudentCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTeacherInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeacherInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherClassUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeacherClassWhereUniqueInput
    update: XOR<TeacherClassUpdateWithoutTeacherInput, TeacherClassUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeacherClassCreateWithoutTeacherInput, TeacherClassUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherClassUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeacherClassWhereUniqueInput
    data: XOR<TeacherClassUpdateWithoutTeacherInput, TeacherClassUncheckedUpdateWithoutTeacherInput>
  }

  export type TeacherClassUpdateManyWithWhereWithoutTeacherInput = {
    where: TeacherClassScalarWhereInput
    data: XOR<TeacherClassUpdateManyMutationInput, TeacherClassUncheckedUpdateManyWithoutTeacherInput>
  }

  export type SchoolUpsertWithoutTeachersInput = {
    update: XOR<SchoolUpdateWithoutTeachersInput, SchoolUncheckedUpdateWithoutTeachersInput>
    create: XOR<SchoolCreateWithoutTeachersInput, SchoolUncheckedCreateWithoutTeachersInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutTeachersInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutTeachersInput, SchoolUncheckedUpdateWithoutTeachersInput>
  }

  export type SchoolUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type UserUpsertWithoutTeacherInput = {
    update: XOR<UserUpdateWithoutTeacherInput, UserUncheckedUpdateWithoutTeacherInput>
    create: XOR<UserCreateWithoutTeacherInput, UserUncheckedCreateWithoutTeacherInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeacherInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeacherInput, UserUncheckedUpdateWithoutTeacherInput>
  }

  export type UserUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ParentStudentCreateWithoutStudentInput = {
    id?: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutParentStudentsInput
    parent: ParentCreateNestedOneWithoutParentStudentsInput
  }

  export type ParentStudentUncheckedCreateWithoutStudentInput = {
    id?: string
    schoolId: string
    parentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentCreateOrConnectWithoutStudentInput = {
    where: ParentStudentWhereUniqueInput
    create: XOR<ParentStudentCreateWithoutStudentInput, ParentStudentUncheckedCreateWithoutStudentInput>
  }

  export type ParentStudentCreateManyStudentInputEnvelope = {
    data: ParentStudentCreateManyStudentInput | ParentStudentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type HomeworkCompletionCreateWithoutStudentInput = {
    id?: string
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutHomeworkCompletionsInput
    club?: ClubCreateNestedOneWithoutHomeworkCompletionsInput
  }

  export type HomeworkCompletionUncheckedCreateWithoutStudentInput = {
    id?: string
    schoolId: string
    clubId?: string | null
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionCreateOrConnectWithoutStudentInput = {
    where: HomeworkCompletionWhereUniqueInput
    create: XOR<HomeworkCompletionCreateWithoutStudentInput, HomeworkCompletionUncheckedCreateWithoutStudentInput>
  }

  export type HomeworkCompletionCreateManyStudentInputEnvelope = {
    data: HomeworkCompletionCreateManyStudentInput | HomeworkCompletionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type SchoolCreateWithoutStudentsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutStudentsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutStudentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
  }

  export type UserCreateWithoutStudentInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type ClassCreateWithoutStudentsInput = {
    id?: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    school: SchoolCreateNestedOneWithoutClassesInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentsInput = {
    id?: string
    schoolId: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
  }

  export type ParentStudentUpsertWithWhereUniqueWithoutStudentInput = {
    where: ParentStudentWhereUniqueInput
    update: XOR<ParentStudentUpdateWithoutStudentInput, ParentStudentUncheckedUpdateWithoutStudentInput>
    create: XOR<ParentStudentCreateWithoutStudentInput, ParentStudentUncheckedCreateWithoutStudentInput>
  }

  export type ParentStudentUpdateWithWhereUniqueWithoutStudentInput = {
    where: ParentStudentWhereUniqueInput
    data: XOR<ParentStudentUpdateWithoutStudentInput, ParentStudentUncheckedUpdateWithoutStudentInput>
  }

  export type ParentStudentUpdateManyWithWhereWithoutStudentInput = {
    where: ParentStudentScalarWhereInput
    data: XOR<ParentStudentUpdateManyMutationInput, ParentStudentUncheckedUpdateManyWithoutStudentInput>
  }

  export type HomeworkCompletionUpsertWithWhereUniqueWithoutStudentInput = {
    where: HomeworkCompletionWhereUniqueInput
    update: XOR<HomeworkCompletionUpdateWithoutStudentInput, HomeworkCompletionUncheckedUpdateWithoutStudentInput>
    create: XOR<HomeworkCompletionCreateWithoutStudentInput, HomeworkCompletionUncheckedCreateWithoutStudentInput>
  }

  export type HomeworkCompletionUpdateWithWhereUniqueWithoutStudentInput = {
    where: HomeworkCompletionWhereUniqueInput
    data: XOR<HomeworkCompletionUpdateWithoutStudentInput, HomeworkCompletionUncheckedUpdateWithoutStudentInput>
  }

  export type HomeworkCompletionUpdateManyWithWhereWithoutStudentInput = {
    where: HomeworkCompletionScalarWhereInput
    data: XOR<HomeworkCompletionUpdateManyMutationInput, HomeworkCompletionUncheckedUpdateManyWithoutStudentInput>
  }

  export type SchoolUpsertWithoutStudentsInput = {
    update: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
    create: XOR<SchoolCreateWithoutStudentsInput, SchoolUncheckedCreateWithoutStudentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutStudentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutStudentsInput, SchoolUncheckedUpdateWithoutStudentsInput>
  }

  export type SchoolUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClassUpsertWithoutStudentsInput = {
    update: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassCreateWithoutStudentsInput, ClassUncheckedCreateWithoutStudentsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentsInput, ClassUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ParentStudentCreateWithoutParentInput = {
    id?: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutParentStudentsInput
    student: StudentCreateNestedOneWithoutParentStudentsInput
  }

  export type ParentStudentUncheckedCreateWithoutParentInput = {
    id?: string
    schoolId: string
    studentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentCreateOrConnectWithoutParentInput = {
    where: ParentStudentWhereUniqueInput
    create: XOR<ParentStudentCreateWithoutParentInput, ParentStudentUncheckedCreateWithoutParentInput>
  }

  export type ParentStudentCreateManyParentInputEnvelope = {
    data: ParentStudentCreateManyParentInput | ParentStudentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type SchoolCreateWithoutParentsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutParentsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutParentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutParentsInput, SchoolUncheckedCreateWithoutParentsInput>
  }

  export type UserCreateWithoutParentInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutParentInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutParentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
  }

  export type ParentStudentUpsertWithWhereUniqueWithoutParentInput = {
    where: ParentStudentWhereUniqueInput
    update: XOR<ParentStudentUpdateWithoutParentInput, ParentStudentUncheckedUpdateWithoutParentInput>
    create: XOR<ParentStudentCreateWithoutParentInput, ParentStudentUncheckedCreateWithoutParentInput>
  }

  export type ParentStudentUpdateWithWhereUniqueWithoutParentInput = {
    where: ParentStudentWhereUniqueInput
    data: XOR<ParentStudentUpdateWithoutParentInput, ParentStudentUncheckedUpdateWithoutParentInput>
  }

  export type ParentStudentUpdateManyWithWhereWithoutParentInput = {
    where: ParentStudentScalarWhereInput
    data: XOR<ParentStudentUpdateManyMutationInput, ParentStudentUncheckedUpdateManyWithoutParentInput>
  }

  export type SchoolUpsertWithoutParentsInput = {
    update: XOR<SchoolUpdateWithoutParentsInput, SchoolUncheckedUpdateWithoutParentsInput>
    create: XOR<SchoolCreateWithoutParentsInput, SchoolUncheckedCreateWithoutParentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutParentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutParentsInput, SchoolUncheckedUpdateWithoutParentsInput>
  }

  export type SchoolUpdateWithoutParentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutParentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type UserUpsertWithoutParentInput = {
    update: XOR<UserUpdateWithoutParentInput, UserUncheckedUpdateWithoutParentInput>
    create: XOR<UserCreateWithoutParentInput, UserUncheckedCreateWithoutParentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutParentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutParentInput, UserUncheckedUpdateWithoutParentInput>
  }

  export type UserUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SchoolCreateWithoutSchoolAdminsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutSchoolAdminsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutSchoolAdminsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutSchoolAdminsInput, SchoolUncheckedCreateWithoutSchoolAdminsInput>
  }

  export type UserCreateWithoutSchoolAdminInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    userRoles?: UserRoleCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutSchoolAdminInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSchoolAdminInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSchoolAdminInput, UserUncheckedCreateWithoutSchoolAdminInput>
  }

  export type SchoolUpsertWithoutSchoolAdminsInput = {
    update: XOR<SchoolUpdateWithoutSchoolAdminsInput, SchoolUncheckedUpdateWithoutSchoolAdminsInput>
    create: XOR<SchoolCreateWithoutSchoolAdminsInput, SchoolUncheckedCreateWithoutSchoolAdminsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutSchoolAdminsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutSchoolAdminsInput, SchoolUncheckedUpdateWithoutSchoolAdminsInput>
  }

  export type SchoolUpdateWithoutSchoolAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutSchoolAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type UserUpsertWithoutSchoolAdminInput = {
    update: XOR<UserUpdateWithoutSchoolAdminInput, UserUncheckedUpdateWithoutSchoolAdminInput>
    create: XOR<UserCreateWithoutSchoolAdminInput, UserUncheckedCreateWithoutSchoolAdminInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSchoolAdminInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSchoolAdminInput, UserUncheckedUpdateWithoutSchoolAdminInput>
  }

  export type UserUpdateWithoutSchoolAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutSchoolAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SchoolCreateWithoutParentStudentsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutParentStudentsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutParentStudentsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutParentStudentsInput, SchoolUncheckedCreateWithoutParentStudentsInput>
  }

  export type ParentCreateWithoutParentStudentsInput = {
    id?: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutParentsInput
    user: UserCreateNestedOneWithoutParentInput
  }

  export type ParentUncheckedCreateWithoutParentStudentsInput = {
    id?: string
    schoolId: string
    userId: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentCreateOrConnectWithoutParentStudentsInput = {
    where: ParentWhereUniqueInput
    create: XOR<ParentCreateWithoutParentStudentsInput, ParentUncheckedCreateWithoutParentStudentsInput>
  }

  export type StudentCreateWithoutParentStudentsInput = {
    id?: string
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutStudentInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    user?: UserCreateNestedOneWithoutStudentInput
    class: ClassCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutParentStudentsInput = {
    id?: string
    schoolId: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    classId: string
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutParentStudentsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutParentStudentsInput, StudentUncheckedCreateWithoutParentStudentsInput>
  }

  export type SchoolUpsertWithoutParentStudentsInput = {
    update: XOR<SchoolUpdateWithoutParentStudentsInput, SchoolUncheckedUpdateWithoutParentStudentsInput>
    create: XOR<SchoolCreateWithoutParentStudentsInput, SchoolUncheckedCreateWithoutParentStudentsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutParentStudentsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutParentStudentsInput, SchoolUncheckedUpdateWithoutParentStudentsInput>
  }

  export type SchoolUpdateWithoutParentStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutParentStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type ParentUpsertWithoutParentStudentsInput = {
    update: XOR<ParentUpdateWithoutParentStudentsInput, ParentUncheckedUpdateWithoutParentStudentsInput>
    create: XOR<ParentCreateWithoutParentStudentsInput, ParentUncheckedCreateWithoutParentStudentsInput>
    where?: ParentWhereInput
  }

  export type ParentUpdateToOneWithWhereWithoutParentStudentsInput = {
    where?: ParentWhereInput
    data: XOR<ParentUpdateWithoutParentStudentsInput, ParentUncheckedUpdateWithoutParentStudentsInput>
  }

  export type ParentUpdateWithoutParentStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutParentsNestedInput
    user?: UserUpdateOneRequiredWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateWithoutParentStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUpsertWithoutParentStudentsInput = {
    update: XOR<StudentUpdateWithoutParentStudentsInput, StudentUncheckedUpdateWithoutParentStudentsInput>
    create: XOR<StudentCreateWithoutParentStudentsInput, StudentUncheckedCreateWithoutParentStudentsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutParentStudentsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutParentStudentsInput, StudentUncheckedUpdateWithoutParentStudentsInput>
  }

  export type StudentUpdateWithoutParentStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutStudentNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneWithoutStudentNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutParentStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    classId?: StringFieldUpdateOperationsInput | string
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type RolePermissionCreateWithoutRoleInput = {
    id?: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    id?: string
    permissionId: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserRoleCreateWithoutRoleInput = {
    id?: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutUserRolesInput
    user: UserCreateNestedOneWithoutUserRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    id?: string
    schoolId: string
    userId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type SchoolCreateWithoutRolesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutRolesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutRolesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutRolesInput, SchoolUncheckedCreateWithoutRolesInput>
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    conditions?: JsonNullableFilter<"RolePermission">
    limitations?: JsonNullableFilter<"RolePermission">
    grantedAt?: DateTimeFilter<"RolePermission"> | Date | string
    expiresAt?: DateTimeNullableFilter<"RolePermission"> | Date | string | null
    isActive?: BoolFilter<"RolePermission"> | boolean
    grantedBy?: StringNullableFilter<"RolePermission"> | string | null
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type SchoolUpsertWithoutRolesInput = {
    update: XOR<SchoolUpdateWithoutRolesInput, SchoolUncheckedUpdateWithoutRolesInput>
    create: XOR<SchoolCreateWithoutRolesInput, SchoolUncheckedCreateWithoutRolesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutRolesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutRolesInput, SchoolUncheckedUpdateWithoutRolesInput>
  }

  export type SchoolUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    id?: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
    role: RoleCreateNestedOneWithoutPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    roleId: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RoleCreateWithoutPermissionsInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRoles?: UserRoleCreateNestedManyWithoutRoleInput
    school?: SchoolCreateNestedOneWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    id?: string
    schoolId?: string | null
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutRolePermissionsInput = {
    id?: string
    name: string
    description?: string | null
    resource: string
    action: string
    scope: string
    isDefault?: boolean
    isActive?: boolean
    category?: $Enums.PermissionCategory
    riskLevel?: $Enums.RiskLevel
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionUncheckedCreateWithoutRolePermissionsInput = {
    id?: string
    name: string
    description?: string | null
    resource: string
    action: string
    scope: string
    isDefault?: boolean
    isActive?: boolean
    category?: $Enums.PermissionCategory
    riskLevel?: $Enums.RiskLevel
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PermissionCreateOrConnectWithoutRolePermissionsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
  }

  export type RoleUpsertWithoutPermissionsInput = {
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
    school?: SchoolUpdateOneWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolePermissionsInput = {
    update: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolePermissionsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type PermissionUpdateWithoutRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: EnumPermissionCategoryFieldUpdateOperationsInput | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateWithoutRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    scope?: StringFieldUpdateOperationsInput | string
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    category?: EnumPermissionCategoryFieldUpdateOperationsInput | $Enums.PermissionCategory
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolCreateWithoutUserRolesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutUserRolesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutUserRolesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutUserRolesInput, SchoolUncheckedCreateWithoutUserRolesInput>
  }

  export type UserCreateWithoutUserRolesInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherCreateNestedOneWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
    parent?: ParentCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminCreateNestedOneWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    school: SchoolCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutUserRolesInput = {
    id?: string
    schoolId: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    teacher?: TeacherUncheckedCreateNestedOneWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
    parent?: ParentUncheckedCreateNestedOneWithoutUserInput
    schoolAdmin?: SchoolAdminUncheckedCreateNestedOneWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
  }

  export type RoleCreateWithoutUserRolesInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
    school?: SchoolCreateNestedOneWithoutRolesInput
  }

  export type RoleUncheckedCreateWithoutUserRolesInput = {
    id?: string
    schoolId?: string | null
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUserRolesInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
  }

  export type SchoolUpsertWithoutUserRolesInput = {
    update: XOR<SchoolUpdateWithoutUserRolesInput, SchoolUncheckedUpdateWithoutUserRolesInput>
    create: XOR<SchoolCreateWithoutUserRolesInput, SchoolUncheckedCreateWithoutUserRolesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutUserRolesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutUserRolesInput, SchoolUncheckedUpdateWithoutUserRolesInput>
  }

  export type SchoolUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type UserUpsertWithoutUserRolesInput = {
    update: XOR<UserUpdateWithoutUserRolesInput, UserUncheckedUpdateWithoutUserRolesInput>
    create: XOR<UserCreateWithoutUserRolesInput, UserUncheckedCreateWithoutUserRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserRolesInput, UserUncheckedUpdateWithoutUserRolesInput>
  }

  export type UserUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    school?: SchoolUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RoleUpsertWithoutUserRolesInput = {
    update: XOR<RoleUpdateWithoutUserRolesInput, RoleUncheckedUpdateWithoutUserRolesInput>
    create: XOR<RoleCreateWithoutUserRolesInput, RoleUncheckedCreateWithoutUserRolesInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUserRolesInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUserRolesInput, RoleUncheckedUpdateWithoutUserRolesInput>
  }

  export type RoleUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    school?: SchoolUpdateOneWithoutRolesNestedInput
  }

  export type RoleUncheckedUpdateWithoutUserRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type SchoolCreateWithoutClassesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutClassesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutClassesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
  }

  export type TeacherClassCreateWithoutClassInput = {
    id?: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeacherClassesInput
    teacher: TeacherCreateNestedOneWithoutTeacherClassesInput
  }

  export type TeacherClassUncheckedCreateWithoutClassInput = {
    id?: string
    schoolId: string
    teacherId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassCreateOrConnectWithoutClassInput = {
    where: TeacherClassWhereUniqueInput
    create: XOR<TeacherClassCreateWithoutClassInput, TeacherClassUncheckedCreateWithoutClassInput>
  }

  export type TeacherClassCreateManyClassInputEnvelope = {
    data: TeacherClassCreateManyClassInput | TeacherClassCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutClassInput = {
    id?: string
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutStudentInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    user?: UserCreateNestedOneWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutClassInput = {
    id?: string
    schoolId: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutStudentInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutClassInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentCreateManyClassInputEnvelope = {
    data: StudentCreateManyClassInput | StudentCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithoutClassesInput = {
    update: XOR<SchoolUpdateWithoutClassesInput, SchoolUncheckedUpdateWithoutClassesInput>
    create: XOR<SchoolCreateWithoutClassesInput, SchoolUncheckedCreateWithoutClassesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutClassesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutClassesInput, SchoolUncheckedUpdateWithoutClassesInput>
  }

  export type SchoolUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type TeacherClassUpsertWithWhereUniqueWithoutClassInput = {
    where: TeacherClassWhereUniqueInput
    update: XOR<TeacherClassUpdateWithoutClassInput, TeacherClassUncheckedUpdateWithoutClassInput>
    create: XOR<TeacherClassCreateWithoutClassInput, TeacherClassUncheckedCreateWithoutClassInput>
  }

  export type TeacherClassUpdateWithWhereUniqueWithoutClassInput = {
    where: TeacherClassWhereUniqueInput
    data: XOR<TeacherClassUpdateWithoutClassInput, TeacherClassUncheckedUpdateWithoutClassInput>
  }

  export type TeacherClassUpdateManyWithWhereWithoutClassInput = {
    where: TeacherClassScalarWhereInput
    data: XOR<TeacherClassUpdateManyMutationInput, TeacherClassUncheckedUpdateManyWithoutClassInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
    create: XOR<StudentCreateWithoutClassInput, StudentUncheckedCreateWithoutClassInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutClassInput, StudentUncheckedUpdateWithoutClassInput>
  }

  export type StudentUpdateManyWithWhereWithoutClassInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutClassInput>
  }

  export type SchoolCreateWithoutTeacherClassesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutTeacherClassesInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutTeacherClassesInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutTeacherClassesInput, SchoolUncheckedCreateWithoutTeacherClassesInput>
  }

  export type TeacherCreateWithoutTeacherClassesInput = {
    id?: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutTeachersInput
    user: UserCreateNestedOneWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutTeacherClassesInput = {
    id?: string
    schoolId: string
    userId: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherCreateOrConnectWithoutTeacherClassesInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutTeacherClassesInput, TeacherUncheckedCreateWithoutTeacherClassesInput>
  }

  export type ClassCreateWithoutTeacherClassesInput = {
    id?: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    school: SchoolCreateNestedOneWithoutClassesInput
    students?: StudentCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutTeacherClassesInput = {
    id?: string
    schoolId: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
    students?: StudentUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutTeacherClassesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTeacherClassesInput, ClassUncheckedCreateWithoutTeacherClassesInput>
  }

  export type SchoolUpsertWithoutTeacherClassesInput = {
    update: XOR<SchoolUpdateWithoutTeacherClassesInput, SchoolUncheckedUpdateWithoutTeacherClassesInput>
    create: XOR<SchoolCreateWithoutTeacherClassesInput, SchoolUncheckedCreateWithoutTeacherClassesInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutTeacherClassesInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutTeacherClassesInput, SchoolUncheckedUpdateWithoutTeacherClassesInput>
  }

  export type SchoolUpdateWithoutTeacherClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutTeacherClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type TeacherUpsertWithoutTeacherClassesInput = {
    update: XOR<TeacherUpdateWithoutTeacherClassesInput, TeacherUncheckedUpdateWithoutTeacherClassesInput>
    create: XOR<TeacherCreateWithoutTeacherClassesInput, TeacherUncheckedCreateWithoutTeacherClassesInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutTeacherClassesInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutTeacherClassesInput, TeacherUncheckedUpdateWithoutTeacherClassesInput>
  }

  export type TeacherUpdateWithoutTeacherClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeachersNestedInput
    user?: UserUpdateOneRequiredWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutTeacherClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUpsertWithoutTeacherClassesInput = {
    update: XOR<ClassUpdateWithoutTeacherClassesInput, ClassUncheckedUpdateWithoutTeacherClassesInput>
    create: XOR<ClassCreateWithoutTeacherClassesInput, ClassUncheckedCreateWithoutTeacherClassesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutTeacherClassesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutTeacherClassesInput, ClassUncheckedUpdateWithoutTeacherClassesInput>
  }

  export type ClassUpdateWithoutTeacherClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    school?: SchoolUpdateOneRequiredWithoutClassesNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutTeacherClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type SchoolCreateWithoutClubsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutClubsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
    homeworkCompletions?: HomeworkCompletionUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutClubsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutClubsInput, SchoolUncheckedCreateWithoutClubsInput>
  }

  export type HomeworkCompletionCreateWithoutClubInput = {
    id?: string
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutHomeworkCompletionsInput
    student: StudentCreateNestedOneWithoutHomeworkCompletionsInput
  }

  export type HomeworkCompletionUncheckedCreateWithoutClubInput = {
    id?: string
    schoolId: string
    studentId: string
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionCreateOrConnectWithoutClubInput = {
    where: HomeworkCompletionWhereUniqueInput
    create: XOR<HomeworkCompletionCreateWithoutClubInput, HomeworkCompletionUncheckedCreateWithoutClubInput>
  }

  export type HomeworkCompletionCreateManyClubInputEnvelope = {
    data: HomeworkCompletionCreateManyClubInput | HomeworkCompletionCreateManyClubInput[]
    skipDuplicates?: boolean
  }

  export type SchoolUpsertWithoutClubsInput = {
    update: XOR<SchoolUpdateWithoutClubsInput, SchoolUncheckedUpdateWithoutClubsInput>
    create: XOR<SchoolCreateWithoutClubsInput, SchoolUncheckedCreateWithoutClubsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutClubsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutClubsInput, SchoolUncheckedUpdateWithoutClubsInput>
  }

  export type SchoolUpdateWithoutClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type HomeworkCompletionUpsertWithWhereUniqueWithoutClubInput = {
    where: HomeworkCompletionWhereUniqueInput
    update: XOR<HomeworkCompletionUpdateWithoutClubInput, HomeworkCompletionUncheckedUpdateWithoutClubInput>
    create: XOR<HomeworkCompletionCreateWithoutClubInput, HomeworkCompletionUncheckedCreateWithoutClubInput>
  }

  export type HomeworkCompletionUpdateWithWhereUniqueWithoutClubInput = {
    where: HomeworkCompletionWhereUniqueInput
    data: XOR<HomeworkCompletionUpdateWithoutClubInput, HomeworkCompletionUncheckedUpdateWithoutClubInput>
  }

  export type HomeworkCompletionUpdateManyWithWhereWithoutClubInput = {
    where: HomeworkCompletionScalarWhereInput
    data: XOR<HomeworkCompletionUpdateManyMutationInput, HomeworkCompletionUncheckedUpdateManyWithoutClubInput>
  }

  export type SchoolCreateWithoutHomeworkCompletionsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutSchoolInput
    teachers?: TeacherCreateNestedManyWithoutSchoolInput
    students?: StudentCreateNestedManyWithoutSchoolInput
    parents?: ParentCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminCreateNestedManyWithoutSchoolInput
    classes?: ClassCreateNestedManyWithoutSchoolInput
    clubs?: ClubCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassCreateNestedManyWithoutSchoolInput
    roles?: RoleCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleCreateNestedManyWithoutSchoolInput
  }

  export type SchoolUncheckedCreateWithoutHomeworkCompletionsInput = {
    id?: string
    name: string
    urn?: string | null
    dfeNumber?: string | null
    address: string
    postcode: string
    phone: string
    email: string
    website?: string | null
    schoolType?: $Enums.SchoolType
    minYearGroup?: number
    maxYearGroup?: number
    isActive?: boolean
    logoUrl?: string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutSchoolInput
    teachers?: TeacherUncheckedCreateNestedManyWithoutSchoolInput
    students?: StudentUncheckedCreateNestedManyWithoutSchoolInput
    parents?: ParentUncheckedCreateNestedManyWithoutSchoolInput
    schoolAdmins?: SchoolAdminUncheckedCreateNestedManyWithoutSchoolInput
    classes?: ClassUncheckedCreateNestedManyWithoutSchoolInput
    clubs?: ClubUncheckedCreateNestedManyWithoutSchoolInput
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutSchoolInput
    teacherClasses?: TeacherClassUncheckedCreateNestedManyWithoutSchoolInput
    roles?: RoleUncheckedCreateNestedManyWithoutSchoolInput
    userRoles?: UserRoleUncheckedCreateNestedManyWithoutSchoolInput
  }

  export type SchoolCreateOrConnectWithoutHomeworkCompletionsInput = {
    where: SchoolWhereUniqueInput
    create: XOR<SchoolCreateWithoutHomeworkCompletionsInput, SchoolUncheckedCreateWithoutHomeworkCompletionsInput>
  }

  export type StudentCreateWithoutHomeworkCompletionsInput = {
    id?: string
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentCreateNestedManyWithoutStudentInput
    school: SchoolCreateNestedOneWithoutStudentsInput
    user?: UserCreateNestedOneWithoutStudentInput
    class: ClassCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutHomeworkCompletionsInput = {
    id?: string
    schoolId: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    classId: string
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parentStudents?: ParentStudentUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutHomeworkCompletionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutHomeworkCompletionsInput, StudentUncheckedCreateWithoutHomeworkCompletionsInput>
  }

  export type ClubCreateWithoutHomeworkCompletionsInput = {
    id?: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    school: SchoolCreateNestedOneWithoutClubsInput
  }

  export type ClubUncheckedCreateWithoutHomeworkCompletionsInput = {
    id?: string
    schoolId: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClubCreateOrConnectWithoutHomeworkCompletionsInput = {
    where: ClubWhereUniqueInput
    create: XOR<ClubCreateWithoutHomeworkCompletionsInput, ClubUncheckedCreateWithoutHomeworkCompletionsInput>
  }

  export type SchoolUpsertWithoutHomeworkCompletionsInput = {
    update: XOR<SchoolUpdateWithoutHomeworkCompletionsInput, SchoolUncheckedUpdateWithoutHomeworkCompletionsInput>
    create: XOR<SchoolCreateWithoutHomeworkCompletionsInput, SchoolUncheckedCreateWithoutHomeworkCompletionsInput>
    where?: SchoolWhereInput
  }

  export type SchoolUpdateToOneWithWhereWithoutHomeworkCompletionsInput = {
    where?: SchoolWhereInput
    data: XOR<SchoolUpdateWithoutHomeworkCompletionsInput, SchoolUncheckedUpdateWithoutHomeworkCompletionsInput>
  }

  export type SchoolUpdateWithoutHomeworkCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUpdateManyWithoutSchoolNestedInput
    students?: StudentUpdateManyWithoutSchoolNestedInput
    parents?: ParentUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUpdateManyWithoutSchoolNestedInput
    classes?: ClassUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUpdateManyWithoutSchoolNestedInput
    roles?: RoleUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUpdateManyWithoutSchoolNestedInput
  }

  export type SchoolUncheckedUpdateWithoutHomeworkCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    urn?: NullableStringFieldUpdateOperationsInput | string | null
    dfeNumber?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    postcode?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    schoolType?: EnumSchoolTypeFieldUpdateOperationsInput | $Enums.SchoolType
    minYearGroup?: IntFieldUpdateOperationsInput | number
    maxYearGroup?: IntFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutSchoolNestedInput
    teachers?: TeacherUncheckedUpdateManyWithoutSchoolNestedInput
    students?: StudentUncheckedUpdateManyWithoutSchoolNestedInput
    parents?: ParentUncheckedUpdateManyWithoutSchoolNestedInput
    schoolAdmins?: SchoolAdminUncheckedUpdateManyWithoutSchoolNestedInput
    classes?: ClassUncheckedUpdateManyWithoutSchoolNestedInput
    clubs?: ClubUncheckedUpdateManyWithoutSchoolNestedInput
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutSchoolNestedInput
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutSchoolNestedInput
    roles?: RoleUncheckedUpdateManyWithoutSchoolNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutSchoolNestedInput
  }

  export type StudentUpsertWithoutHomeworkCompletionsInput = {
    update: XOR<StudentUpdateWithoutHomeworkCompletionsInput, StudentUncheckedUpdateWithoutHomeworkCompletionsInput>
    create: XOR<StudentCreateWithoutHomeworkCompletionsInput, StudentUncheckedCreateWithoutHomeworkCompletionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutHomeworkCompletionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutHomeworkCompletionsInput, StudentUncheckedUpdateWithoutHomeworkCompletionsInput>
  }

  export type StudentUpdateWithoutHomeworkCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutStudentNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneWithoutStudentNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutHomeworkCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    classId?: StringFieldUpdateOperationsInput | string
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClubUpsertWithoutHomeworkCompletionsInput = {
    update: XOR<ClubUpdateWithoutHomeworkCompletionsInput, ClubUncheckedUpdateWithoutHomeworkCompletionsInput>
    create: XOR<ClubCreateWithoutHomeworkCompletionsInput, ClubUncheckedCreateWithoutHomeworkCompletionsInput>
    where?: ClubWhereInput
  }

  export type ClubUpdateToOneWithWhereWithoutHomeworkCompletionsInput = {
    where?: ClubWhereInput
    data: XOR<ClubUpdateWithoutHomeworkCompletionsInput, ClubUncheckedUpdateWithoutHomeworkCompletionsInput>
  }

  export type ClubUpdateWithoutHomeworkCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutClubsNestedInput
  }

  export type ClubUncheckedUpdateWithoutHomeworkCompletionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManySchoolInput = {
    id?: string
    email: string
    emailVerified?: Date | string | null
    passwordHash?: string | null
    isActive?: boolean
    lastLoginAt?: Date | string | null
    loginAttempts?: number
    lockedUntil?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherCreateManySchoolInput = {
    id?: string
    userId: string
    employeeId?: string | null
    title: string
    firstName: string
    lastName: string
    displayName?: string | null
    teacherType?: $Enums.TeacherType
    isHeadTeacher?: boolean
    isSenCo?: boolean
    isDSL?: boolean
    isDeputyHead?: boolean
    subjects?: TeacherCreatesubjectsInput | string[]
    yearGroups?: TeacherCreateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    contractType?: $Enums.ContractType
    schoolEmail?: string | null
    phoneExtension?: string | null
    dbsCheckDate?: Date | string | null
    dbsCheckNumber?: string | null
    safeguardingTraining?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentCreateManySchoolInput = {
    id?: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    classId: string
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentCreateManySchoolInput = {
    id?: string
    userId: string
    title?: string | null
    firstName: string
    lastName: string
    email: string
    alternativeEmail?: string | null
    mobilePhone?: string | null
    homePhone?: string | null
    workPhone?: string | null
    addressLine1?: string | null
    addressLine2?: string | null
    town?: string | null
    county?: string | null
    postcode?: string | null
    isEmergencyContact?: boolean
    priority?: number | null
    preferredContact?: $Enums.ContactMethod
    canReceiveSMS?: boolean
    canReceiveEmail?: boolean
    canReceivePhoneCalls?: boolean
    canCollectChild?: boolean
    canConsentToTrips?: boolean
    canAccessOnlineInfo?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SchoolAdminCreateManySchoolInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    jobTitle: string
    adminLevel?: $Enums.AdminLevel
    canManageUsers?: boolean
    canManageClasses?: boolean
    canManageClubs?: boolean
    canViewAnalytics?: boolean
    canManageSettings?: boolean
    canExportData?: boolean
    canAccessAllClasses?: boolean
    canViewAllStudents?: boolean
    canModifyHomework?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassCreateManySchoolInput = {
    id?: string
    name: string
    displayName?: string | null
    yearGroups?: ClassCreateyearGroupsInput | number[]
    keyStages?: ClassCreatekeyStagesInput | $Enums.KeyStage[]
    classType?: $Enums.ClassType
    subject?: string | null
    setLevel?: string | null
    academicYear: string
    houseGroup?: string | null
    houseColor?: string | null
    capacity?: number | null
    isActive?: boolean
    classroom?: string | null
    clubsEnabled?: boolean
    leaderboardEnabled?: boolean
  }

  export type ClubCreateManySchoolInput = {
    id?: string
    name: string
    description?: string | null
    clubType?: $Enums.ClubType
    subject: string
    isActive?: boolean
    ageGroups?: ClubCreateageGroupsInput | number[]
    keyStages?: ClubCreatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: boolean
    levelNaming?: string | null
    customLevels?: boolean
    evidenceType: $Enums.ClubEvidenceType
    logbookRequired?: boolean
    parentInvolvement?: boolean
    maxBuddyMembers?: number
    buddyGroupsEnabled?: boolean
    xpPerCompletion?: number
    streakEnabled?: boolean
    iconUrl?: string | null
    color?: string
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentCreateManySchoolInput = {
    id?: string
    parentId: string
    studentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassCreateManySchoolInput = {
    id?: string
    teacherId: string
    classId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleCreateManySchoolInput = {
    id?: string
    name: string
    description?: string | null
    isDefault?: boolean
    isCustom?: boolean
    isActive?: boolean
    priority?: number
    scope?: $Enums.RoleScope
    applicableUserTypes?: RoleCreateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserRoleCreateManySchoolInput = {
    id?: string
    userId: string
    roleId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionCreateManySchoolInput = {
    id?: string
    studentId: string
    clubId?: string | null
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
    parent?: ParentUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
    parent?: ParentUncheckedUpdateOneWithoutUserNestedInput
    schoolAdmin?: SchoolAdminUncheckedUpdateOneWithoutUserNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    passwordHash?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loginAttempts?: IntFieldUpdateOperationsInput | number
    lockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacherClasses?: TeacherClassUpdateManyWithoutTeacherNestedInput
    user?: UserUpdateOneRequiredWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    teacherType?: EnumTeacherTypeFieldUpdateOperationsInput | $Enums.TeacherType
    isHeadTeacher?: BoolFieldUpdateOperationsInput | boolean
    isSenCo?: BoolFieldUpdateOperationsInput | boolean
    isDSL?: BoolFieldUpdateOperationsInput | boolean
    isDeputyHead?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherUpdatesubjectsInput | string[]
    yearGroups?: TeacherUpdateyearGroupsInput | number[]
    qualifications?: NullableJsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    contractType?: EnumContractTypeFieldUpdateOperationsInput | $Enums.ContractType
    schoolEmail?: NullableStringFieldUpdateOperationsInput | string | null
    phoneExtension?: NullableStringFieldUpdateOperationsInput | string | null
    dbsCheckDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dbsCheckNumber?: NullableStringFieldUpdateOperationsInput | string | null
    safeguardingTraining?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutStudentNestedInput
    user?: UserUpdateOneWithoutStudentNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    classId?: StringFieldUpdateOperationsInput | string
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    classId?: StringFieldUpdateOperationsInput | string
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutParentNestedInput
    user?: UserUpdateOneRequiredWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type ParentUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    alternativeEmail?: NullableStringFieldUpdateOperationsInput | string | null
    mobilePhone?: NullableStringFieldUpdateOperationsInput | string | null
    homePhone?: NullableStringFieldUpdateOperationsInput | string | null
    workPhone?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine1?: NullableStringFieldUpdateOperationsInput | string | null
    addressLine2?: NullableStringFieldUpdateOperationsInput | string | null
    town?: NullableStringFieldUpdateOperationsInput | string | null
    county?: NullableStringFieldUpdateOperationsInput | string | null
    postcode?: NullableStringFieldUpdateOperationsInput | string | null
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    preferredContact?: EnumContactMethodFieldUpdateOperationsInput | $Enums.ContactMethod
    canReceiveSMS?: BoolFieldUpdateOperationsInput | boolean
    canReceiveEmail?: BoolFieldUpdateOperationsInput | boolean
    canReceivePhoneCalls?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canConsentToTrips?: BoolFieldUpdateOperationsInput | boolean
    canAccessOnlineInfo?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAdminUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSchoolAdminNestedInput
  }

  export type SchoolAdminUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SchoolAdminUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    adminLevel?: EnumAdminLevelFieldUpdateOperationsInput | $Enums.AdminLevel
    canManageUsers?: BoolFieldUpdateOperationsInput | boolean
    canManageClasses?: BoolFieldUpdateOperationsInput | boolean
    canManageClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewAnalytics?: BoolFieldUpdateOperationsInput | boolean
    canManageSettings?: BoolFieldUpdateOperationsInput | boolean
    canExportData?: BoolFieldUpdateOperationsInput | boolean
    canAccessAllClasses?: BoolFieldUpdateOperationsInput | boolean
    canViewAllStudents?: BoolFieldUpdateOperationsInput | boolean
    canModifyHomework?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    teacherClasses?: TeacherClassUpdateManyWithoutClassNestedInput
    students?: StudentUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
    teacherClasses?: TeacherClassUncheckedUpdateManyWithoutClassNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroups?: ClassUpdateyearGroupsInput | number[]
    keyStages?: ClassUpdatekeyStagesInput | $Enums.KeyStage[]
    classType?: EnumClassTypeFieldUpdateOperationsInput | $Enums.ClassType
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    setLevel?: NullableStringFieldUpdateOperationsInput | string | null
    academicYear?: StringFieldUpdateOperationsInput | string
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    houseColor?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    classroom?: NullableStringFieldUpdateOperationsInput | string | null
    clubsEnabled?: BoolFieldUpdateOperationsInput | boolean
    leaderboardEnabled?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ClubUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutClubNestedInput
  }

  export type ClubUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    clubType?: EnumClubTypeFieldUpdateOperationsInput | $Enums.ClubType
    subject?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ageGroups?: ClubUpdateageGroupsInput | number[]
    keyStages?: ClubUpdatekeyStagesInput | $Enums.KeyStage[]
    hasLevels?: BoolFieldUpdateOperationsInput | boolean
    levelNaming?: NullableStringFieldUpdateOperationsInput | string | null
    customLevels?: BoolFieldUpdateOperationsInput | boolean
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    logbookRequired?: BoolFieldUpdateOperationsInput | boolean
    parentInvolvement?: BoolFieldUpdateOperationsInput | boolean
    maxBuddyMembers?: IntFieldUpdateOperationsInput | number
    buddyGroupsEnabled?: BoolFieldUpdateOperationsInput | boolean
    xpPerCompletion?: IntFieldUpdateOperationsInput | number
    streakEnabled?: BoolFieldUpdateOperationsInput | boolean
    iconUrl?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ParentUpdateOneRequiredWithoutParentStudentsNestedInput
    student?: StudentUpdateOneRequiredWithoutParentStudentsNestedInput
  }

  export type ParentStudentUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherClassUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacher?: TeacherUpdateOneRequiredWithoutTeacherClassesNestedInput
    class?: ClassUpdateOneRequiredWithoutTeacherClassesNestedInput
  }

  export type TeacherClassUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherClassUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
    userRoles?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isDefault?: BoolFieldUpdateOperationsInput | boolean
    isCustom?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    priority?: IntFieldUpdateOperationsInput | number
    scope?: EnumRoleScopeFieldUpdateOperationsInput | $Enums.RoleScope
    applicableUserTypes?: RoleUpdateapplicableUserTypesInput | $Enums.UserType[]
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: StudentUpdateOneRequiredWithoutHomeworkCompletionsNestedInput
    club?: ClubUpdateOneWithoutHomeworkCompletionsNestedInput
  }

  export type HomeworkCompletionUncheckedUpdateWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionUncheckedUpdateManyWithoutSchoolInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateManyUserInput = {
    id?: string
    schoolId: string
    roleId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type UserRoleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutUserRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherClassCreateManyTeacherInput = {
    id?: string
    schoolId: string
    classId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeacherClassesNestedInput
    class?: ClassUpdateOneRequiredWithoutTeacherClassesNestedInput
  }

  export type TeacherClassUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherClassUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentCreateManyStudentInput = {
    id?: string
    schoolId: string
    parentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionCreateManyStudentInput = {
    id?: string
    schoolId: string
    clubId?: string | null
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutParentStudentsNestedInput
    parent?: ParentUpdateOneRequiredWithoutParentStudentsNestedInput
  }

  export type ParentStudentUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    parentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutHomeworkCompletionsNestedInput
    club?: ClubUpdateOneWithoutHomeworkCompletionsNestedInput
  }

  export type HomeworkCompletionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    clubId?: NullableStringFieldUpdateOperationsInput | string | null
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentCreateManyParentInput = {
    id?: string
    schoolId: string
    studentId: string
    relationshipType: $Enums.ParentType
    isPrimaryContact?: boolean
    isEmergencyContact?: boolean
    hasParentalResponsibility?: boolean
    canGiveConsent?: boolean
    canCollectChild?: boolean
    canAccessRecords?: boolean
    receivesReports?: boolean
    receivesNotifications?: boolean
    canContactTeachers?: boolean
    custodyArrangement?: string | null
    restrictedAccess?: boolean
    accessNotes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParentStudentUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutParentStudentsNestedInput
    student?: StudentUpdateOneRequiredWithoutParentStudentsNestedInput
  }

  export type ParentStudentUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParentStudentUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    relationshipType?: EnumParentTypeFieldUpdateOperationsInput | $Enums.ParentType
    isPrimaryContact?: BoolFieldUpdateOperationsInput | boolean
    isEmergencyContact?: BoolFieldUpdateOperationsInput | boolean
    hasParentalResponsibility?: BoolFieldUpdateOperationsInput | boolean
    canGiveConsent?: BoolFieldUpdateOperationsInput | boolean
    canCollectChild?: BoolFieldUpdateOperationsInput | boolean
    canAccessRecords?: BoolFieldUpdateOperationsInput | boolean
    receivesReports?: BoolFieldUpdateOperationsInput | boolean
    receivesNotifications?: BoolFieldUpdateOperationsInput | boolean
    canContactTeachers?: BoolFieldUpdateOperationsInput | boolean
    custodyArrangement?: NullableStringFieldUpdateOperationsInput | string | null
    restrictedAccess?: BoolFieldUpdateOperationsInput | boolean
    accessNotes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyRoleInput = {
    id?: string
    permissionId: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
  }

  export type UserRoleCreateManyRoleInput = {
    id?: string
    schoolId: string
    userId: string
    classIds?: UserRoleCreateclassIdsInput | string[]
    yearGroups?: UserRoleCreateyearGroupsInput | number[]
    subjects?: UserRoleCreatesubjectsInput | string[]
    studentIds?: UserRoleCreatestudentIdsInput | string[]
    assignedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    assignedBy?: string | null
    assignmentReason?: string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRoleUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutUserRolesNestedInput
    user?: UserUpdateOneRequiredWithoutUserRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    classIds?: UserRoleUpdateclassIdsInput | string[]
    yearGroups?: UserRoleUpdateyearGroupsInput | number[]
    subjects?: UserRoleUpdatesubjectsInput | string[]
    studentIds?: UserRoleUpdatestudentIdsInput | string[]
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    assignedBy?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentReason?: NullableStringFieldUpdateOperationsInput | string | null
    additionalPermissions?: NullableJsonNullValueInput | InputJsonValue
    restrictedPermissions?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyPermissionInput = {
    id?: string
    roleId: string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: Date | string
    expiresAt?: Date | string | null
    isActive?: boolean
    grantedBy?: string | null
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
    conditions?: NullableJsonNullValueInput | InputJsonValue
    limitations?: NullableJsonNullValueInput | InputJsonValue
    grantedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    grantedBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherClassCreateManyClassInput = {
    id?: string
    schoolId: string
    teacherId: string
    role?: $Enums.ClassRole
    isPrimaryTeacher?: boolean
    subjects?: TeacherClassCreatesubjectsInput | string[]
    timeAllocation?: number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: boolean
    canAssignClubs?: boolean
    canViewProgress?: boolean
    canContactParents?: boolean
    startDate?: Date | string
    endDate?: Date | string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentCreateManyClassInput = {
    id?: string
    schoolId: string
    userId?: string | null
    firstName: string
    lastName: string
    preferredName?: string | null
    dateOfBirth: Date | string
    pupilId: string
    admissionNumber?: string | null
    yearGroup: number
    admissionDate: Date | string
    leavingDate?: Date | string | null
    uln?: string | null
    upn?: string | null
    sen?: boolean
    senCategory?: string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: boolean
    freeschoolMeals?: boolean
    englishAsAdditional?: boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: string | null
    dataRetentionUntil: Date | string
    consentGiven?: boolean
    consentGivenBy?: string | null
    consentDate?: Date | string | null
    consentWithdrawn?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherClassUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutTeacherClassesNestedInput
    teacher?: TeacherUpdateOneRequiredWithoutTeacherClassesNestedInput
  }

  export type TeacherClassUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherClassUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    role?: EnumClassRoleFieldUpdateOperationsInput | $Enums.ClassRole
    isPrimaryTeacher?: BoolFieldUpdateOperationsInput | boolean
    subjects?: TeacherClassUpdatesubjectsInput | string[]
    timeAllocation?: NullableIntFieldUpdateOperationsInput | number | null
    timetableSlots?: NullableJsonNullValueInput | InputJsonValue
    canMarkHomework?: BoolFieldUpdateOperationsInput | boolean
    canAssignClubs?: BoolFieldUpdateOperationsInput | boolean
    canViewProgress?: BoolFieldUpdateOperationsInput | boolean
    canContactParents?: BoolFieldUpdateOperationsInput | boolean
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUpdateManyWithoutStudentNestedInput
    school?: SchoolUpdateOneRequiredWithoutStudentsNestedInput
    user?: UserUpdateOneWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parentStudents?: ParentStudentUncheckedUpdateManyWithoutStudentNestedInput
    homeworkCompletions?: HomeworkCompletionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    preferredName?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    pupilId?: StringFieldUpdateOperationsInput | string
    admissionNumber?: NullableStringFieldUpdateOperationsInput | string | null
    yearGroup?: IntFieldUpdateOperationsInput | number
    admissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    leavingDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    uln?: NullableStringFieldUpdateOperationsInput | string | null
    upn?: NullableStringFieldUpdateOperationsInput | string | null
    sen?: BoolFieldUpdateOperationsInput | boolean
    senCategory?: NullableStringFieldUpdateOperationsInput | string | null
    senSupport?: NullableJsonNullValueInput | InputJsonValue
    pupilPremium?: BoolFieldUpdateOperationsInput | boolean
    freeschoolMeals?: BoolFieldUpdateOperationsInput | boolean
    englishAsAdditional?: BoolFieldUpdateOperationsInput | boolean
    medicalConditions?: NullableJsonNullValueInput | InputJsonValue
    dietaryRequirements?: NullableJsonNullValueInput | InputJsonValue
    houseGroup?: NullableStringFieldUpdateOperationsInput | string | null
    dataRetentionUntil?: DateTimeFieldUpdateOperationsInput | Date | string
    consentGiven?: BoolFieldUpdateOperationsInput | boolean
    consentGivenBy?: NullableStringFieldUpdateOperationsInput | string | null
    consentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consentWithdrawn?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionCreateManyClubInput = {
    id?: string
    schoolId: string
    studentId: string
    completionDate?: Date | string
    evidenceType: $Enums.ClubEvidenceType
    evidenceUrl?: string | null
    notes?: string | null
    parentNotes?: string | null
    timeSpentMinutes?: number | null
    wasLate?: boolean
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HomeworkCompletionUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    school?: SchoolUpdateOneRequiredWithoutHomeworkCompletionsNestedInput
    student?: StudentUpdateOneRequiredWithoutHomeworkCompletionsNestedInput
  }

  export type HomeworkCompletionUncheckedUpdateWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HomeworkCompletionUncheckedUpdateManyWithoutClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    schoolId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    completionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    evidenceType?: EnumClubEvidenceTypeFieldUpdateOperationsInput | $Enums.ClubEvidenceType
    evidenceUrl?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    parentNotes?: NullableStringFieldUpdateOperationsInput | string | null
    timeSpentMinutes?: NullableIntFieldUpdateOperationsInput | number | null
    wasLate?: BoolFieldUpdateOperationsInput | boolean
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SchoolCountOutputTypeDefaultArgs instead
     */
    export type SchoolCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherCountOutputTypeDefaultArgs instead
     */
    export type TeacherCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentCountOutputTypeDefaultArgs instead
     */
    export type StudentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentCountOutputTypeDefaultArgs instead
     */
    export type ParentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassCountOutputTypeDefaultArgs instead
     */
    export type ClassCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClubCountOutputTypeDefaultArgs instead
     */
    export type ClubCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClubCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolDefaultArgs instead
     */
    export type SchoolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherDefaultArgs instead
     */
    export type TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentDefaultArgs instead
     */
    export type ParentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SchoolAdminDefaultArgs instead
     */
    export type SchoolAdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SchoolAdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ParentStudentDefaultArgs instead
     */
    export type ParentStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ParentStudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolePermissionDefaultArgs instead
     */
    export type RolePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleDefaultArgs instead
     */
    export type UserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassDefaultArgs instead
     */
    export type ClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherClassDefaultArgs instead
     */
    export type TeacherClassArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherClassDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClubDefaultArgs instead
     */
    export type ClubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClubDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HomeworkCompletionDefaultArgs instead
     */
    export type HomeworkCompletionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HomeworkCompletionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}